{
  "decks": [
    {
      "id": "java-interview",
      "title": "Java Interview Questions",
      "description": "Advanced Java interview questions for experienced developers",
      "createdAt": "2025-10-21T00:00:00.000Z"
    }
  ],
  "questions": [
    {
      "id": "java-q1",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is the primary difference between HashMap and ConcurrentHashMap?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1",
          "text": "HashMap is synchronized, ConcurrentHashMap is not",
          "isCorrect": false
        },
        {
          "id": "java-c2",
          "text": "ConcurrentHashMap allows concurrent modifications without external synchronization",
          "isCorrect": true
        },
        {
          "id": "java-c3",
          "text": "HashMap supports null keys, ConcurrentHashMap does not",
          "isCorrect": false
        },
        {
          "id": "java-c4",
          "text": "ConcurrentHashMap uses a single lock, HashMap uses multiple",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q2",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are true about Java's volatile keyword? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c5",
          "text": "Guarantees atomicity of compound operations",
          "isCorrect": false
        },
        {
          "id": "java-c6",
          "text": "Prevents instruction reordering around the variable",
          "isCorrect": true
        },
        {
          "id": "java-c7",
          "text": "Ensures visibility of changes across threads",
          "isCorrect": true
        },
        {
          "id": "java-c8",
          "text": "Provides mutual exclusion like synchronized",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q3",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What happens when you override equals() but not hashCode() in a class used as a HashMap key?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c9",
          "text": "It works fine as long as equals() is consistent",
          "isCorrect": false
        },
        {
          "id": "java-c10",
          "text": "The object may not be found in the HashMap",
          "isCorrect": true
        },
        {
          "id": "java-c11",
          "text": "It throws a RuntimeException",
          "isCorrect": false
        },
        {
          "id": "java-c12",
          "text": "The HashMap becomes read-only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q4",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Spring Boot, what annotation is used to mark a method as a REST endpoint that handles HTTP GET requests?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c13",
          "text": "@GetMapping",
          "isCorrect": true
        },
        {
          "id": "java-c14",
          "text": "@RequestMapping(method = RequestMethod.GET)",
          "isCorrect": false
        },
        {
          "id": "java-c15",
          "text": "@RestController",
          "isCorrect": false
        },
        {
          "id": "java-c16",
          "text": "@PathVariable",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q5",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which design patterns are commonly used in Spring Framework? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c17",
          "text": "Singleton",
          "isCorrect": true
        },
        {
          "id": "java-c18",
          "text": "Factory",
          "isCorrect": true
        },
        {
          "id": "java-c19",
          "text": "Observer",
          "isCorrect": false
        },
        {
          "id": "java-c20",
          "text": "Proxy",
          "isCorrect": true
        }
      ]
    },
    {
      "id": "java-q6",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the default isolation level in Spring's @Transactional annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c21",
          "text": "READ_UNCOMMITTED",
          "isCorrect": false
        },
        {
          "id": "java-c22",
          "text": "READ_COMMITTED",
          "isCorrect": true
        },
        {
          "id": "java-c23",
          "text": "REPEATABLE_READ",
          "isCorrect": false
        },
        {
          "id": "java-c24",
          "text": "SERIALIZABLE",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q7",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java 8+, what is the correct way to create an unmodifiable List from a stream?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c25",
          "text": "stream.collect(Collectors.toList())",
          "isCorrect": false
        },
        {
          "id": "java-c26",
          "text": "List.copyOf(stream.collect(Collectors.toList()))",
          "isCorrect": true
        },
        {
          "id": "java-c27",
          "text": "Collections.unmodifiableList(stream.collect(Collectors.toList()))",
          "isCorrect": false
        },
        {
          "id": "java-c28",
          "text": "stream.toList()",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q8",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are benefits of using JPA over direct JDBC? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c29",
          "text": "Automatic SQL generation",
          "isCorrect": true
        },
        {
          "id": "java-c30",
          "text": "Better performance for complex queries",
          "isCorrect": false
        },
        {
          "id": "java-c31",
          "text": "Object-relational mapping",
          "isCorrect": true
        },
        {
          "id": "java-c32",
          "text": "Reduced boilerplate code",
          "isCorrect": true
        }
      ]
    },
    {
      "id": "java-q9",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @JsonIgnore annotation in Jackson?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c33",
          "text": "To ignore null values during serialization",
          "isCorrect": false
        },
        {
          "id": "java-c34",
          "text": "To exclude a field from JSON serialization/deserialization",
          "isCorrect": true
        },
        {
          "id": "java-c35",
          "text": "To validate JSON input",
          "isCorrect": false
        },
        {
          "id": "java-c36",
          "text": "To format dates in JSON",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q10",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Hibernate, what does the 'n+1 selects' problem refer to?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c37",
          "text": "Executing n+1 SQL queries instead of 1",
          "isCorrect": true
        },
        {
          "id": "java-c38",
          "text": "Having n+1 database connections",
          "isCorrect": false
        },
        {
          "id": "java-c39",
          "text": "Creating n+1 entity instances",
          "isCorrect": false
        },
        {
          "id": "java-c40",
          "text": "Using n+1 threads for queries",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q11",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which HTTP status codes indicate successful responses? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c41",
          "text": "200 OK",
          "isCorrect": true
        },
        {
          "id": "java-c42",
          "text": "201 Created",
          "isCorrect": true
        },
        {
          "id": "java-c43",
          "text": "301 Moved Permanently",
          "isCorrect": false
        },
        {
          "id": "java-c44",
          "text": "404 Not Found",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q12",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between @Autowired and @Inject annotations?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c45",
          "text": "@Autowired is Spring-specific, @Inject is JSR-330 standard",
          "isCorrect": true
        },
        {
          "id": "java-c46",
          "text": "@Inject requires explicit bean names",
          "isCorrect": false
        },
        {
          "id": "java-c47",
          "text": "@Autowired supports field injection only",
          "isCorrect": false
        },
        {
          "id": "java-c48",
          "text": "@Inject is deprecated in Spring Boot",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q13",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what does the 'final' keyword guarantee about a variable?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c49",
          "text": "The variable cannot be reassigned",
          "isCorrect": true
        },
        {
          "id": "java-c50",
          "text": "The object it references is immutable",
          "isCorrect": false
        },
        {
          "id": "java-c51",
          "text": "The variable is thread-safe",
          "isCorrect": false
        },
        {
          "id": "java-c52",
          "text": "The variable is optimized by the compiler",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q14",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are valid ways to handle exceptions in Spring MVC? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c53",
          "text": "@ExceptionHandler annotation",
          "isCorrect": true
        },
        {
          "id": "java-c54",
          "text": "@ControllerAdvice for global handling",
          "isCorrect": true
        },
        {
          "id": "java-c55",
          "text": "@ErrorController interface",
          "isCorrect": false
        },
        {
          "id": "java-c56",
          "text": "Custom HandlerExceptionResolver",
          "isCorrect": true
        }
      ]
    },
    {
      "id": "java-q15",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @Transactional(readOnly = true) annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c57",
          "text": "Prevents any database writes",
          "isCorrect": true
        },
        {
          "id": "java-c58",
          "text": "Makes the transaction faster",
          "isCorrect": false
        },
        {
          "id": "java-c59",
          "text": "Disables transaction rollback",
          "isCorrect": false
        },
        {
          "id": "java-c60",
          "text": "Allows concurrent reads",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q16",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is a 'race condition'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c61",
          "text": "When two threads compete for the same resource",
          "isCorrect": true
        },
        {
          "id": "java-c62",
          "text": "When a thread runs faster than expected",
          "isCorrect": false
        },
        {
          "id": "java-c63",
          "text": "When memory leaks occur",
          "isCorrect": false
        },
        {
          "id": "java-c64",
          "text": "When exceptions are not caught",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q17",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are characteristics of a microservices architecture? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c65",
          "text": "Independent deployment",
          "isCorrect": true
        },
        {
          "id": "java-c66",
          "text": "Shared database across services",
          "isCorrect": false
        },
        {
          "id": "java-c67",
          "text": "Decentralized data management",
          "isCorrect": true
        },
        {
          "id": "java-c68",
          "text": "Single technology stack",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q18",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @RestController annotation do in Spring?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c69",
          "text": "Combines @Controller and @ResponseBody",
          "isCorrect": true
        },
        {
          "id": "java-c70",
          "text": "Handles RESTful web services only",
          "isCorrect": false
        },
        {
          "id": "java-c71",
          "text": "Replaces @RequestMapping",
          "isCorrect": false
        },
        {
          "id": "java-c72",
          "text": "Enables CORS automatically",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q19",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is the difference between '==' and '.equals()'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c73",
          "text": "== compares references, .equals() compares values",
          "isCorrect": true
        },
        {
          "id": "java-c74",
          "text": ".equals() is only for primitives",
          "isCorrect": false
        },
        {
          "id": "java-c75",
          "text": "== is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c76",
          "text": ".equals() throws exceptions",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q20",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are SOLID principles? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c77",
          "text": "Single Responsibility",
          "isCorrect": true
        },
        {
          "id": "java-c78",
          "text": "Open/Closed",
          "isCorrect": true
        },
        {
          "id": "java-c79",
          "text": "Liskov Substitution",
          "isCorrect": true
        },
        {
          "id": "java-c80",
          "text": "Dependency Inversion",
          "isCorrect": true
        }
      ]
    },
    {
      "id": "java-q21",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the default scope of a Spring bean?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c81",
          "text": "singleton",
          "isCorrect": true
        },
        {
          "id": "java-c82",
          "text": "prototype",
          "isCorrect": false
        },
        {
          "id": "java-c83",
          "text": "request",
          "isCorrect": false
        },
        {
          "id": "java-c84",
          "text": "session",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q22",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what does the 'transient' keyword do?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c85",
          "text": "Excludes field from serialization",
          "isCorrect": true
        },
        {
          "id": "java-c86",
          "text": "Makes field thread-local",
          "isCorrect": false
        },
        {
          "id": "java-c87",
          "text": "Prevents field modification",
          "isCorrect": false
        },
        {
          "id": "java-c88",
          "text": "Optimizes field access",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q23",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid ways to create a thread in Java? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c89",
          "text": "Extend Thread class",
          "isCorrect": true
        },
        {
          "id": "java-c90",
          "text": "Implement Runnable interface",
          "isCorrect": true
        },
        {
          "id": "java-c91",
          "text": "Implement Callable interface",
          "isCorrect": true
        },
        {
          "id": "java-c92",
          "text": "Use ExecutorService",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q24",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @PathVariable annotation in Spring MVC?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c93",
          "text": "To bind URI template variables",
          "isCorrect": true
        },
        {
          "id": "java-c94",
          "text": "To validate request parameters",
          "isCorrect": false
        },
        {
          "id": "java-c95",
          "text": "To handle file uploads",
          "isCorrect": false
        },
        {
          "id": "java-c96",
          "text": "To set response headers",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q25",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Hibernate, what does 'lazy loading' mean?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c97",
          "text": "Data is loaded only when accessed",
          "isCorrect": true
        },
        {
          "id": "java-c98",
          "text": "Data is loaded eagerly",
          "isCorrect": false
        },
        {
          "id": "java-c99",
          "text": "Data is cached permanently",
          "isCorrect": false
        },
        {
          "id": "java-c100",
          "text": "Data is loaded asynchronously",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q26",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java memory areas? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c101",
          "text": "Heap",
          "isCorrect": true
        },
        {
          "id": "java-c102",
          "text": "Stack",
          "isCorrect": true
        },
        {
          "id": "java-c103",
          "text": "Method Area",
          "isCorrect": true
        },
        {
          "id": "java-c104",
          "text": "CPU Cache",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q27",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between @RequestParam and @PathVariable?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c105",
          "text": "@RequestParam extracts query parameters, @PathVariable extracts URI variables",
          "isCorrect": true
        },
        {
          "id": "java-c106",
          "text": "@PathVariable is for POST requests only",
          "isCorrect": false
        },
        {
          "id": "java-c107",
          "text": "@RequestParam requires encoding",
          "isCorrect": false
        },
        {
          "id": "java-c108",
          "text": "@PathVariable is deprecated",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q28",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what does 'immutable' mean for an object?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c109",
          "text": "Its state cannot be changed after creation",
          "isCorrect": true
        },
        {
          "id": "java-c110",
          "text": "It cannot be garbage collected",
          "isCorrect": false
        },
        {
          "id": "java-c111",
          "text": "It cannot be serialized",
          "isCorrect": false
        },
        {
          "id": "java-c112",
          "text": "It cannot be cloned",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q29",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which annotations are used for dependency injection in Spring? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c113",
          "text": "@Autowired",
          "isCorrect": true
        },
        {
          "id": "java-c114",
          "text": "@Inject",
          "isCorrect": true
        },
        {
          "id": "java-c115",
          "text": "@Resource",
          "isCorrect": true
        },
        {
          "id": "java-c116",
          "text": "@Value",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q30",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @Qualifier annotation in Spring?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c117",
          "text": "To specify which bean to inject when multiple candidates exist",
          "isCorrect": true
        },
        {
          "id": "java-c118",
          "text": "To validate bean properties",
          "isCorrect": false
        },
        {
          "id": "java-c119",
          "text": "To create qualified names for beans",
          "isCorrect": false
        },
        {
          "id": "java-c120",
          "text": "To enable lazy initialization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q31",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is a 'deadlock'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c121",
          "text": "Two or more threads waiting for each other to release resources",
          "isCorrect": true
        },
        {
          "id": "java-c122",
          "text": "A thread that has stopped executing",
          "isCorrect": false
        },
        {
          "id": "java-c123",
          "text": "Memory that cannot be freed",
          "isCorrect": false
        },
        {
          "id": "java-c124",
          "text": "An unhandled exception",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q32",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are benefits of using Docker? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c125",
          "text": "Environment consistency",
          "isCorrect": true
        },
        {
          "id": "java-c126",
          "text": "Reduced resource usage",
          "isCorrect": false
        },
        {
          "id": "java-c127",
          "text": "Easy scaling",
          "isCorrect": true
        },
        {
          "id": "java-c128",
          "text": "Automatic code compilation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q33",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @Entity annotation do in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c129",
          "text": "Marks a class as a JPA entity",
          "isCorrect": true
        },
        {
          "id": "java-c130",
          "text": "Creates database tables automatically",
          "isCorrect": false
        },
        {
          "id": "java-c131",
          "text": "Validates entity fields",
          "isCorrect": false
        },
        {
          "id": "java-c132",
          "text": "Enables caching for the entity",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q34",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is the purpose of the 'synchronized' keyword?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c133",
          "text": "To provide mutual exclusion and visibility guarantees",
          "isCorrect": true
        },
        {
          "id": "java-c134",
          "text": "To make methods run faster",
          "isCorrect": false
        },
        {
          "id": "java-c135",
          "text": "To prevent exceptions",
          "isCorrect": false
        },
        {
          "id": "java-c136",
          "text": "To enable garbage collection",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q35",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid scopes for Spring beans? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c137",
          "text": "singleton",
          "isCorrect": true
        },
        {
          "id": "java-c138",
          "text": "prototype",
          "isCorrect": true
        },
        {
          "id": "java-c139",
          "text": "request",
          "isCorrect": true
        },
        {
          "id": "java-c140",
          "text": "global",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q36",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between @Component and @Service annotations?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c141",
          "text": "@Service is a specialization of @Component for service layer",
          "isCorrect": true
        },
        {
          "id": "java-c142",
          "text": "@Component is for web controllers only",
          "isCorrect": false
        },
        {
          "id": "java-c143",
          "text": "@Service enables transactions automatically",
          "isCorrect": false
        },
        {
          "id": "java-c144",
          "text": "@Component requires explicit configuration",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q37",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what does 'GC' stand for in JVM context?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c145",
          "text": "Garbage Collector",
          "isCorrect": true
        },
        {
          "id": "java-c146",
          "text": "Global Cache",
          "isCorrect": false
        },
        {
          "id": "java-c147",
          "text": "Generic Class",
          "isCorrect": false
        },
        {
          "id": "java-c148",
          "text": "Graphics Context",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q38",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java concurrency utilities? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c149",
          "text": "CountDownLatch",
          "isCorrect": true
        },
        {
          "id": "java-c150",
          "text": "CyclicBarrier",
          "isCorrect": true
        },
        {
          "id": "java-c151",
          "text": "Semaphore",
          "isCorrect": true
        },
        {
          "id": "java-c152",
          "text": "Vector",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q39",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @Valid annotation in Spring?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c153",
          "text": "To trigger validation on the annotated object",
          "isCorrect": true
        },
        {
          "id": "java-c154",
          "text": "To validate method parameters only",
          "isCorrect": false
        },
        {
          "id": "java-c155",
          "text": "To enable cross-field validation",
          "isCorrect": false
        },
        {
          "id": "java-c156",
          "text": "To validate database constraints",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q40",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Hibernate, what is 'second-level caching'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c157",
          "text": "Caching at the SessionFactory level",
          "isCorrect": true
        },
        {
          "id": "java-c158",
          "text": "Caching within a single session",
          "isCorrect": false
        },
        {
          "id": "java-c159",
          "text": "Caching database connections",
          "isCorrect": false
        },
        {
          "id": "java-c160",
          "text": "Caching SQL queries",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q41",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are characteristics of RESTful APIs? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c161",
          "text": "Stateless",
          "isCorrect": true
        },
        {
          "id": "java-c162",
          "text": "Cacheable",
          "isCorrect": true
        },
        {
          "id": "java-c163",
          "text": "Layered system",
          "isCorrect": true
        },
        {
          "id": "java-c164",
          "text": "Requires SOAP",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q42",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @JsonProperty annotation do in Jackson?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c165",
          "text": "Maps JSON field names to Java properties",
          "isCorrect": true
        },
        {
          "id": "java-c166",
          "text": "Validates JSON structure",
          "isCorrect": false
        },
        {
          "id": "java-c167",
          "text": "Formats JSON output",
          "isCorrect": false
        },
        {
          "id": "java-c168",
          "text": "Compresses JSON data",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q43",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'method overloading'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c169",
          "text": "Multiple methods with same name but different parameters",
          "isCorrect": true
        },
        {
          "id": "java-c170",
          "text": "Overriding parent class methods",
          "isCorrect": false
        },
        {
          "id": "java-c171",
          "text": "Dynamic method dispatch",
          "isCorrect": false
        },
        {
          "id": "java-c172",
          "text": "Method chaining",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q44",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java 8 functional interfaces? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c173",
          "text": "Predicate",
          "isCorrect": true
        },
        {
          "id": "java-c174",
          "text": "Function",
          "isCorrect": true
        },
        {
          "id": "java-c175",
          "text": "Consumer",
          "isCorrect": true
        },
        {
          "id": "java-c176",
          "text": "Iterator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q45",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @EnableCaching annotation in Spring?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c177",
          "text": "Enables Spring's caching abstraction",
          "isCorrect": true
        },
        {
          "id": "java-c178",
          "text": "Creates cache configurations",
          "isCorrect": false
        },
        {
          "id": "java-c179",
          "text": "Validates cache keys",
          "isCorrect": false
        },
        {
          "id": "java-c180",
          "text": "Monitors cache performance",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q46",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what does 'polymorphism' mean?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c181",
          "text": "Ability of objects to take multiple forms",
          "isCorrect": true
        },
        {
          "id": "java-c182",
          "text": "Multiple inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c183",
          "text": "Dynamic typing",
          "isCorrect": false
        },
        {
          "id": "java-c184",
          "text": "Method overloading only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q47",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid HTTP methods in REST? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c185",
          "text": "GET",
          "isCorrect": true
        },
        {
          "id": "java-c186",
          "text": "POST",
          "isCorrect": true
        },
        {
          "id": "java-c187",
          "text": "PUT",
          "isCorrect": true
        },
        {
          "id": "java-c188",
          "text": "CONNECT",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q48",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between @Controller and @RestController?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c189",
          "text": "@RestController combines @Controller and @ResponseBody",
          "isCorrect": true
        },
        {
          "id": "java-c190",
          "text": "@Controller is for REST APIs only",
          "isCorrect": false
        },
        {
          "id": "java-c191",
          "text": "@RestController doesn't support views",
          "isCorrect": false
        },
        {
          "id": "java-c192",
          "text": "@Controller requires @ResponseBody on each method",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q49",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'encapsulation'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c193",
          "text": "Hiding internal state and requiring access through methods",
          "isCorrect": true
        },
        {
          "id": "java-c194",
          "text": "Converting data types",
          "isCorrect": false
        },
        {
          "id": "java-c195",
          "text": "Creating wrapper classes",
          "isCorrect": false
        },
        {
          "id": "java-c196",
          "text": "Memory management",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q50",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Spring Boot starters? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c197",
          "text": "spring-boot-starter-web",
          "isCorrect": true
        },
        {
          "id": "java-c198",
          "text": "spring-boot-starter-data-jpa",
          "isCorrect": true
        },
        {
          "id": "java-c199",
          "text": "spring-boot-starter-security",
          "isCorrect": true
        },
        {
          "id": "java-c200",
          "text": "spring-boot-starter-mvc",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q51",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @Repository annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c201",
          "text": "Marks a class as a DAO and enables exception translation",
          "isCorrect": true
        },
        {
          "id": "java-c202",
          "text": "Creates database repositories automatically",
          "isCorrect": false
        },
        {
          "id": "java-c203",
          "text": "Validates repository methods",
          "isCorrect": false
        },
        {
          "id": "java-c204",
          "text": "Enables caching for repositories",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q52",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'inheritance'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c205",
          "text": "A mechanism to acquire properties of parent class",
          "isCorrect": true
        },
        {
          "id": "java-c206",
          "text": "Copying object state",
          "isCorrect": false
        },
        {
          "id": "java-c207",
          "text": "Method overloading",
          "isCorrect": false
        },
        {
          "id": "java-c208",
          "text": "Dynamic binding",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q53",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid ways to configure Spring beans? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c209",
          "text": "XML configuration",
          "isCorrect": true
        },
        {
          "id": "java-c210",
          "text": "Java configuration with @Configuration",
          "isCorrect": true
        },
        {
          "id": "java-c211",
          "text": "Annotation-based configuration",
          "isCorrect": true
        },
        {
          "id": "java-c212",
          "text": "Properties file configuration",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q54",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @Transactional annotation do by default?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c213",
          "text": "Creates a transaction if none exists",
          "isCorrect": true
        },
        {
          "id": "java-c214",
          "text": "Always creates a new transaction",
          "isCorrect": false
        },
        {
          "id": "java-c215",
          "text": "Suspends existing transactions",
          "isCorrect": false
        },
        {
          "id": "java-c216",
          "text": "Requires an existing transaction",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q55",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'abstraction'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c217",
          "text": "Hiding implementation details and showing only functionality",
          "isCorrect": true
        },
        {
          "id": "java-c218",
          "text": "Creating abstract classes only",
          "isCorrect": false
        },
        {
          "id": "java-c219",
          "text": "Interface implementation",
          "isCorrect": false
        },
        {
          "id": "java-c220",
          "text": "Method signatures",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q56",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java collection interfaces? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c221",
          "text": "List",
          "isCorrect": true
        },
        {
          "id": "java-c222",
          "text": "Set",
          "isCorrect": true
        },
        {
          "id": "java-c223",
          "text": "Map",
          "isCorrect": true
        },
        {
          "id": "java-c224",
          "text": "Array",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q57",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @RequestBody annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c225",
          "text": "Binds HTTP request body to a method parameter",
          "isCorrect": true
        },
        {
          "id": "java-c226",
          "text": "Validates request body format",
          "isCorrect": false
        },
        {
          "id": "java-c227",
          "text": "Converts request to JSON",
          "isCorrect": false
        },
        {
          "id": "java-c228",
          "text": "Handles multipart requests",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q58",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'method overriding'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c229",
          "text": "Providing a specific implementation in subclass",
          "isCorrect": true
        },
        {
          "id": "java-c230",
          "text": "Creating multiple methods with same name",
          "isCorrect": false
        },
        {
          "id": "java-c231",
          "text": "Dynamic method dispatch",
          "isCorrect": false
        },
        {
          "id": "java-c232",
          "text": "Method chaining",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q59",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid Spring bean lifecycle phases? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c233",
          "text": "Instantiation",
          "isCorrect": true
        },
        {
          "id": "java-c234",
          "text": "Initialization",
          "isCorrect": true
        },
        {
          "id": "java-c235",
          "text": "Destruction",
          "isCorrect": true
        },
        {
          "id": "java-c236",
          "text": "Compilation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q60",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @ResponseBody annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c237",
          "text": "Serializes return value to HTTP response body",
          "isCorrect": true
        },
        {
          "id": "java-c238",
          "text": "Validates response format",
          "isCorrect": false
        },
        {
          "id": "java-c239",
          "text": "Sets response headers",
          "isCorrect": false
        },
        {
          "id": "java-c240",
          "text": "Handles response exceptions",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q61",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'coupling' in OOP?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c241",
          "text": "Degree of interdependence between classes",
          "isCorrect": true
        },
        {
          "id": "java-c242",
          "text": "Multiple inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c243",
          "text": "Method overriding",
          "isCorrect": false
        },
        {
          "id": "java-c244",
          "text": "Interface implementation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q62",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java access modifiers? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c245",
          "text": "public",
          "isCorrect": true
        },
        {
          "id": "java-c246",
          "text": "private",
          "isCorrect": true
        },
        {
          "id": "java-c247",
          "text": "protected",
          "isCorrect": true
        },
        {
          "id": "java-c248",
          "text": "internal",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q63",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @PathParam annotation do in JAX-RS?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c249",
          "text": "Extracts URI path parameters",
          "isCorrect": true
        },
        {
          "id": "java-c250",
          "text": "Validates path format",
          "isCorrect": false
        },
        {
          "id": "java-c251",
          "text": "Creates REST paths",
          "isCorrect": false
        },
        {
          "id": "java-c252",
          "text": "Handles path exceptions",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q64",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'cohesion' in OOP?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c253",
          "text": "Degree to which class elements belong together",
          "isCorrect": true
        },
        {
          "id": "java-c254",
          "text": "Class inheritance hierarchy",
          "isCorrect": false
        },
        {
          "id": "java-c255",
          "text": "Method signatures",
          "isCorrect": false
        },
        {
          "id": "java-c256",
          "text": "Interface design",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q65",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid JPA relationship annotations? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c257",
          "text": "@OneToOne",
          "isCorrect": true
        },
        {
          "id": "java-c258",
          "text": "@OneToMany",
          "isCorrect": true
        },
        {
          "id": "java-c259",
          "text": "@ManyToOne",
          "isCorrect": true
        },
        {
          "id": "java-c260",
          "text": "@ManyToMany",
          "isCorrect": true
        }
      ]
    },
    {
      "id": "java-q66",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @QueryParam annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c261",
          "text": "Extracts query parameters from URL",
          "isCorrect": true
        },
        {
          "id": "java-c262",
          "text": "Validates query syntax",
          "isCorrect": false
        },
        {
          "id": "java-c263",
          "text": "Creates SQL queries",
          "isCorrect": false
        },
        {
          "id": "java-c264",
          "text": "Handles query exceptions",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q67",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'composition'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c265",
          "text": "Building complex objects from simpler ones",
          "isCorrect": true
        },
        {
          "id": "java-c266",
          "text": "Multiple inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c267",
          "text": "Method chaining",
          "isCorrect": false
        },
        {
          "id": "java-c268",
          "text": "Class hierarchies",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q68",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java primitive types? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c269",
          "text": "int",
          "isCorrect": true
        },
        {
          "id": "java-c270",
          "text": "boolean",
          "isCorrect": true
        },
        {
          "id": "java-c271",
          "text": "char",
          "isCorrect": true
        },
        {
          "id": "java-c272",
          "text": "String",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q69",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @FormParam annotation do?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c273",
          "text": "Extracts form parameters from POST requests",
          "isCorrect": true
        },
        {
          "id": "java-c274",
          "text": "Validates form data",
          "isCorrect": false
        },
        {
          "id": "java-c275",
          "text": "Creates HTML forms",
          "isCorrect": false
        },
        {
          "id": "java-c276",
          "text": "Handles form submissions",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q70",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'aggregation'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c277",
          "text": "A form of association where one object contains another",
          "isCorrect": true
        },
        {
          "id": "java-c278",
          "text": "Method overriding",
          "isCorrect": false
        },
        {
          "id": "java-c279",
          "text": "Interface implementation",
          "isCorrect": false
        },
        {
          "id": "java-c280",
          "text": "Class inheritance",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q71",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid Java exception types? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c281",
          "text": "Checked exceptions",
          "isCorrect": true
        },
        {
          "id": "java-c282",
          "text": "Unchecked exceptions",
          "isCorrect": true
        },
        {
          "id": "java-c283",
          "text": "Runtime exceptions",
          "isCorrect": true
        },
        {
          "id": "java-c284",
          "text": "Syntax exceptions",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q72",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @HeaderParam annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c285",
          "text": "Extracts HTTP header values",
          "isCorrect": true
        },
        {
          "id": "java-c286",
          "text": "Sets response headers",
          "isCorrect": false
        },
        {
          "id": "java-c287",
          "text": "Validates header format",
          "isCorrect": false
        },
        {
          "id": "java-c288",
          "text": "Creates HTTP headers",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q73",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'tight coupling'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c289",
          "text": "High interdependence between classes",
          "isCorrect": true
        },
        {
          "id": "java-c290",
          "text": "Multiple inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c291",
          "text": "Method overloading",
          "isCorrect": false
        },
        {
          "id": "java-c292",
          "text": "Interface usage",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q74",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java wrapper classes? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c293",
          "text": "Integer",
          "isCorrect": true
        },
        {
          "id": "java-c294",
          "text": "Boolean",
          "isCorrect": true
        },
        {
          "id": "java-c295",
          "text": "Character",
          "isCorrect": true
        },
        {
          "id": "java-c296",
          "text": "String",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q75",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @CookieParam annotation do?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c297",
          "text": "Extracts cookie values from requests",
          "isCorrect": true
        },
        {
          "id": "java-c298",
          "text": "Sets cookie values in responses",
          "isCorrect": false
        },
        {
          "id": "java-c299",
          "text": "Validates cookie format",
          "isCorrect": false
        },
        {
          "id": "java-c300",
          "text": "Creates HTTP cookies",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q76",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'loose coupling'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c301",
          "text": "Low interdependence between classes",
          "isCorrect": true
        },
        {
          "id": "java-c302",
          "text": "No inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c303",
          "text": "No method overriding",
          "isCorrect": false
        },
        {
          "id": "java-c304",
          "text": "No interfaces",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q77",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid Java keywords? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c305",
          "text": "abstract",
          "isCorrect": true
        },
        {
          "id": "java-c306",
          "text": "interface",
          "isCorrect": true
        },
        {
          "id": "java-c307",
          "text": "implements",
          "isCorrect": true
        },
        {
          "id": "java-c308",
          "text": "include",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q78",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @MatrixParam annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c309",
          "text": "Extracts matrix parameters from URI",
          "isCorrect": true
        },
        {
          "id": "java-c310",
          "text": "Creates matrix structures",
          "isCorrect": false
        },
        {
          "id": "java-c311",
          "text": "Validates matrix data",
          "isCorrect": false
        },
        {
          "id": "java-c312",
          "text": "Handles matrix operations",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q79",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'association'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c313",
          "text": "Relationship between classes",
          "isCorrect": true
        },
        {
          "id": "java-c314",
          "text": "Method calling",
          "isCorrect": false
        },
        {
          "id": "java-c315",
          "text": "Variable assignment",
          "isCorrect": false
        },
        {
          "id": "java-c316",
          "text": "Class instantiation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q80",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java OOP concepts? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c317",
          "text": "Encapsulation",
          "isCorrect": true
        },
        {
          "id": "java-c318",
          "text": "Inheritance",
          "isCorrect": true
        },
        {
          "id": "java-c319",
          "text": "Polymorphism",
          "isCorrect": true
        },
        {
          "id": "java-c320",
          "text": "Compilation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q81",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @BeanParam annotation do?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c321",
          "text": "Injects multiple parameters into a bean",
          "isCorrect": true
        },
        {
          "id": "java-c322",
          "text": "Creates bean instances",
          "isCorrect": false
        },
        {
          "id": "java-c323",
          "text": "Validates bean properties",
          "isCorrect": false
        },
        {
          "id": "java-c324",
          "text": "Configures bean scopes",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q82",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'dependency injection'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c325",
          "text": "Providing dependencies to objects instead of creating them",
          "isCorrect": true
        },
        {
          "id": "java-c326",
          "text": "Method parameter passing",
          "isCorrect": false
        },
        {
          "id": "java-c327",
          "text": "Variable initialization",
          "isCorrect": false
        },
        {
          "id": "java-c328",
          "text": "Class instantiation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q83",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid Java loop constructs? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c329",
          "text": "for",
          "isCorrect": true
        },
        {
          "id": "java-c330",
          "text": "while",
          "isCorrect": true
        },
        {
          "id": "java-c331",
          "text": "do-while",
          "isCorrect": true
        },
        {
          "id": "java-c332",
          "text": "repeat-until",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q84",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @Suspended annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c333",
          "text": "Suspends asynchronous response processing",
          "isCorrect": true
        },
        {
          "id": "java-c334",
          "text": "Pauses thread execution",
          "isCorrect": false
        },
        {
          "id": "java-c335",
          "text": "Stops method execution",
          "isCorrect": false
        },
        {
          "id": "java-c336",
          "text": "Delays response sending",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q85",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'inversion of control'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c337",
          "text": "Framework controls object lifecycle instead of application",
          "isCorrect": true
        },
        {
          "id": "java-c338",
          "text": "Reversing method calls",
          "isCorrect": false
        },
        {
          "id": "java-c339",
          "text": "Changing inheritance direction",
          "isCorrect": false
        },
        {
          "id": "java-c340",
          "text": "Interface implementation reversal",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q86",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java conditional statements? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c341",
          "text": "if",
          "isCorrect": true
        },
        {
          "id": "java-c342",
          "text": "if-else",
          "isCorrect": true
        },
        {
          "id": "java-c343",
          "text": "switch",
          "isCorrect": true
        },
        {
          "id": "java-c344",
          "text": "when",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q87",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @Context annotation do?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c345",
          "text": "Injects context objects like HttpServletRequest",
          "isCorrect": true
        },
        {
          "id": "java-c346",
          "text": "Creates application context",
          "isCorrect": false
        },
        {
          "id": "java-c347",
          "text": "Sets execution context",
          "isCorrect": false
        },
        {
          "id": "java-c348",
          "text": "Configures context parameters",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q88",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'aspect-oriented programming'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c349",
          "text": "Programming paradigm for separating cross-cutting concerns",
          "isCorrect": true
        },
        {
          "id": "java-c350",
          "text": "Object-oriented programming extension",
          "isCorrect": false
        },
        {
          "id": "java-c351",
          "text": "Functional programming approach",
          "isCorrect": false
        },
        {
          "id": "java-c352",
          "text": "Procedural programming method",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q89",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid Java data types? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c353",
          "text": "Primitive types",
          "isCorrect": true
        },
        {
          "id": "java-c354",
          "text": "Reference types",
          "isCorrect": true
        },
        {
          "id": "java-c355",
          "text": "Object types",
          "isCorrect": true
        },
        {
          "id": "java-c356",
          "text": "Function types",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q90",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @Provider annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c357",
          "text": "Registers JAX-RS providers like exception mappers",
          "isCorrect": true
        },
        {
          "id": "java-c358",
          "text": "Provides service implementations",
          "isCorrect": false
        },
        {
          "id": "java-c359",
          "text": "Configures data providers",
          "isCorrect": false
        },
        {
          "id": "java-c360",
          "text": "Sets up dependency providers",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q91",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'cross-cutting concern'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c361",
          "text": "Functionality that spans multiple modules",
          "isCorrect": true
        },
        {
          "id": "java-c362",
          "text": "Method that calls multiple classes",
          "isCorrect": false
        },
        {
          "id": "java-c363",
          "text": "Class that implements multiple interfaces",
          "isCorrect": false
        },
        {
          "id": "java-c364",
          "text": "Module with multiple responsibilities",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q92",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java memory management concepts? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c365",
          "text": "Garbage collection",
          "isCorrect": true
        },
        {
          "id": "java-c366",
          "text": "Memory leaks",
          "isCorrect": true
        },
        {
          "id": "java-c367",
          "text": "Heap memory",
          "isCorrect": true
        },
        {
          "id": "java-c368",
          "text": "CPU cache",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q93",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @Consumes annotation specify?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c369",
          "text": "Media types the resource can consume",
          "isCorrect": true
        },
        {
          "id": "java-c370",
          "text": "Resources the method consumes",
          "isCorrect": false
        },
        {
          "id": "java-c371",
          "text": "Data types the method accepts",
          "isCorrect": false
        },
        {
          "id": "java-c372",
          "text": "Memory consumption limits",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q94",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'pointcut' in AOP?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c373",
          "text": "Expression that matches join points",
          "isCorrect": true
        },
        {
          "id": "java-c374",
          "text": "Method execution point",
          "isCorrect": false
        },
        {
          "id": "java-c375",
          "text": "Aspect application point",
          "isCorrect": false
        },
        {
          "id": "java-c376",
          "text": "Advice execution point",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q95",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid Java exception handling keywords? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c377",
          "text": "try",
          "isCorrect": true
        },
        {
          "id": "java-c378",
          "text": "catch",
          "isCorrect": true
        },
        {
          "id": "java-c379",
          "text": "finally",
          "isCorrect": true
        },
        {
          "id": "java-c380",
          "text": "except",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q96",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @Produces annotation specify?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c381",
          "text": "Media types the resource can produce",
          "isCorrect": true
        },
        {
          "id": "java-c382",
          "text": "Resources the method produces",
          "isCorrect": false
        },
        {
          "id": "java-c383",
          "text": "Data types the method returns",
          "isCorrect": false
        },
        {
          "id": "java-c384",
          "text": "Output stream types",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q97",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'advice' in AOP?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c385",
          "text": "Code executed at join points",
          "isCorrect": true
        },
        {
          "id": "java-c386",
          "text": "Method execution advice",
          "isCorrect": false
        },
        {
          "id": "java-c387",
          "text": "Aspect configuration advice",
          "isCorrect": false
        },
        {
          "id": "java-c388",
          "text": "Pointcut definition advice",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q98",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java class modifiers? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c389",
          "text": "public",
          "isCorrect": true
        },
        {
          "id": "java-c390",
          "text": "abstract",
          "isCorrect": true
        },
        {
          "id": "java-c391",
          "text": "final",
          "isCorrect": true
        },
        {
          "id": "java-c392",
          "text": "static",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q99",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @ApplicationPath annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c393",
          "text": "Defines the base URI path for REST resources",
          "isCorrect": true
        },
        {
          "id": "java-c394",
          "text": "Sets application classpath",
          "isCorrect": false
        },
        {
          "id": "java-c395",
          "text": "Configures application properties",
          "isCorrect": false
        },
        {
          "id": "java-c396",
          "text": "Defines application entry point",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q100",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'join point' in AOP?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c397",
          "text": "Point in program execution where advice can be applied",
          "isCorrect": true
        },
        {
          "id": "java-c398",
          "text": "Method call point",
          "isCorrect": false
        },
        {
          "id": "java-c399",
          "text": "Class instantiation point",
          "isCorrect": false
        },
        {
          "id": "java-c400",
          "text": "Variable access point",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q101",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the main difference between @Component and @Bean annotations in Spring?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c401",
          "text": "@Component is for class-level scanning, @Bean is for method-level configuration",
          "isCorrect": true
        },
        {
          "id": "java-c402",
          "text": "@Bean can only be used in @Configuration classes",
          "isCorrect": false
        },
        {
          "id": "java-c403",
          "text": "@Component creates prototype beans by default",
          "isCorrect": false
        },
        {
          "id": "java-c404",
          "text": "@Bean requires explicit bean naming",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q102",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are true about Java's CompletableFuture? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c405",
          "text": "It supports asynchronous programming",
          "isCorrect": true
        },
        {
          "id": "java-c406",
          "text": "It can combine multiple asynchronous operations",
          "isCorrect": true
        },
        {
          "id": "java-c407",
          "text": "It automatically handles thread pools",
          "isCorrect": false
        },
        {
          "id": "java-c408",
          "text": "It provides functional programming style",
          "isCorrect": true
        }
      ]
    },
    {
      "id": "java-q103",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Hibernate, what does the @GeneratedValue(strategy = GenerationType.IDENTITY) do?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c409",
          "text": "Uses database auto-increment feature",
          "isCorrect": true
        },
        {
          "id": "java-c410",
          "text": "Generates UUID values",
          "isCorrect": false
        },
        {
          "id": "java-c411",
          "text": "Uses a sequence table",
          "isCorrect": false
        },
        {
          "id": "java-c412",
          "text": "Delegates to application code",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q104",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @JsonCreator annotation in Jackson?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c413",
          "text": "Marks constructor or factory method for deserialization",
          "isCorrect": true
        },
        {
          "id": "java-c414",
          "text": "Creates JSON objects",
          "isCorrect": false
        },
        {
          "id": "java-c415",
          "text": "Validates JSON structure",
          "isCorrect": false
        },
        {
          "id": "java-c416",
          "text": "Formats JSON output",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q105",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid ways to handle cross-origin requests in Spring Boot? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c417",
          "text": "@CrossOrigin annotation",
          "isCorrect": true
        },
        {
          "id": "java-c418",
          "text": "WebMvcConfigurer configuration",
          "isCorrect": true
        },
        {
          "id": "java-c419",
          "text": "CORS filter in web.xml",
          "isCorrect": false
        },
        {
          "id": "java-c420",
          "text": "HttpSecurity configuration",
          "isCorrect": true
        }
      ]
    },
    {
      "id": "java-q106",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @PreAuthorize annotation do in Spring Security?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c421",
          "text": "Checks authorization before method execution",
          "isCorrect": true
        },
        {
          "id": "java-c422",
          "text": "Authenticates users before method calls",
          "isCorrect": false
        },
        {
          "id": "java-c423",
          "text": "Validates method parameters",
          "isCorrect": false
        },
        {
          "id": "java-c424",
          "text": "Logs method execution",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q107",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java 9+, what is a module descriptor file called?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c425",
          "text": "module-info.java",
          "isCorrect": true
        },
        {
          "id": "java-c426",
          "text": "module.java",
          "isCorrect": false
        },
        {
          "id": "java-c427",
          "text": "ModuleDescriptor.java",
          "isCorrect": false
        },
        {
          "id": "java-c428",
          "text": "module-config.java",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q108",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are benefits of using Spring Cloud? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c429",
          "text": "Service discovery",
          "isCorrect": true
        },
        {
          "id": "java-c430",
          "text": "Configuration management",
          "isCorrect": true
        },
        {
          "id": "java-c431",
          "text": "Circuit breaker pattern",
          "isCorrect": true
        },
        {
          "id": "java-c432",
          "text": "Automatic code generation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q109",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the default fetch type for JPA @OneToMany relationships?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c433",
          "text": "LAZY",
          "isCorrect": true
        },
        {
          "id": "java-c434",
          "text": "EAGER",
          "isCorrect": false
        },
        {
          "id": "java-c435",
          "text": "IMMEDIATE",
          "isCorrect": false
        },
        {
          "id": "java-c436",
          "text": "DEFERRED",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q110",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Docker, what does the CMD instruction do?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c437",
          "text": "Provides default command for container execution",
          "isCorrect": true
        },
        {
          "id": "java-c438",
          "text": "Runs commands during image build",
          "isCorrect": false
        },
        {
          "id": "java-c439",
          "text": "Sets environment variables",
          "isCorrect": false
        },
        {
          "id": "java-c440",
          "text": "Copies files into image",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q111",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid Spring Boot testing annotations? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c441",
          "text": "@SpringBootTest",
          "isCorrect": true
        },
        {
          "id": "java-c442",
          "text": "@WebMvcTest",
          "isCorrect": true
        },
        {
          "id": "java-c443",
          "text": "@DataJpaTest",
          "isCorrect": true
        },
        {
          "id": "java-c444",
          "text": "@SpringTest",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q112",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @JsonInclude annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c445",
          "text": "Controls what fields are included in JSON serialization",
          "isCorrect": true
        },
        {
          "id": "java-c446",
          "text": "Includes external JSON files",
          "isCorrect": false
        },
        {
          "id": "java-c447",
          "text": "Validates JSON structure",
          "isCorrect": false
        },
        {
          "id": "java-c448",
          "text": "Merges JSON objects",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q113",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Kubernetes, what is a 'Pod'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c449",
          "text": "Smallest deployable unit containing one or more containers",
          "isCorrect": true
        },
        {
          "id": "java-c450",
          "text": "A storage volume",
          "isCorrect": false
        },
        {
          "id": "java-c451",
          "text": "A network service",
          "isCorrect": false
        },
        {
          "id": "java-c452",
          "text": "A configuration object",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q114",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java memory leak causes? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c453",
          "text": "Static collections holding object references",
          "isCorrect": true
        },
        {
          "id": "java-c454",
          "text": "Unclosed database connections",
          "isCorrect": true
        },
        {
          "id": "java-c455",
          "text": "Unused local variables",
          "isCorrect": false
        },
        {
          "id": "java-c456",
          "text": "Large primitive arrays",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q115",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @Cacheable annotation do in Spring?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c457",
          "text": "Caches method return values",
          "isCorrect": true
        },
        {
          "id": "java-c458",
          "text": "Makes methods thread-safe",
          "isCorrect": false
        },
        {
          "id": "java-c459",
          "text": "Validates method parameters",
          "isCorrect": false
        },
        {
          "id": "java-c460",
          "text": "Logs method calls",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q116",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'method reference'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c461",
          "text": "Shorthand syntax for lambda expressions",
          "isCorrect": true
        },
        {
          "id": "java-c462",
          "text": "Reference to method metadata",
          "isCorrect": false
        },
        {
          "id": "java-c463",
          "text": "Pointer to method implementation",
          "isCorrect": false
        },
        {
          "id": "java-c464",
          "text": "Method documentation reference",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q117",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid Maven scopes? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c465",
          "text": "compile",
          "isCorrect": true
        },
        {
          "id": "java-c466",
          "text": "test",
          "isCorrect": true
        },
        {
          "id": "java-c467",
          "text": "runtime",
          "isCorrect": true
        },
        {
          "id": "java-c468",
          "text": "development",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q118",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @EventListener annotation in Spring?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c469",
          "text": "Listens for application events",
          "isCorrect": true
        },
        {
          "id": "java-c470",
          "text": "Handles HTTP requests",
          "isCorrect": false
        },
        {
          "id": "java-c471",
          "text": "Validates form data",
          "isCorrect": false
        },
        {
          "id": "java-c472",
          "text": "Manages database transactions",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q119",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what does 'Optional' represent?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c473",
          "text": "Container that may or may not contain a value",
          "isCorrect": true
        },
        {
          "id": "java-c474",
          "text": "Alternative to null checks",
          "isCorrect": false
        },
        {
          "id": "java-c475",
          "text": "Configuration option",
          "isCorrect": false
        },
        {
          "id": "java-c476",
          "text": "Method parameter choice",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q120",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are REST API best practices? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c477",
          "text": "Use HTTP status codes appropriately",
          "isCorrect": true
        },
        {
          "id": "java-c478",
          "text": "Version API endpoints",
          "isCorrect": true
        },
        {
          "id": "java-c479",
          "text": "Use nouns for resource names",
          "isCorrect": true
        },
        {
          "id": "java-c480",
          "text": "Include verbs in URL paths",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q121",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @Conditional annotation in Spring?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c481",
          "text": "Conditionally register beans based on criteria",
          "isCorrect": true
        },
        {
          "id": "java-c482",
          "text": "Execute methods conditionally",
          "isCorrect": false
        },
        {
          "id": "java-c483",
          "text": "Validate conditional logic",
          "isCorrect": false
        },
        {
          "id": "java-c484",
          "text": "Handle conditional exceptions",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q122",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'type erasure'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c485",
          "text": "Removal of generic type information at runtime",
          "isCorrect": true
        },
        {
          "id": "java-c486",
          "text": "Type conversion mechanism",
          "isCorrect": false
        },
        {
          "id": "java-c487",
          "text": "Exception handling for type mismatches",
          "isCorrect": false
        },
        {
          "id": "java-c488",
          "text": "Memory deallocation for objects",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q123",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid Java Stream operations? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c489",
          "text": "filter()",
          "isCorrect": true
        },
        {
          "id": "java-c490",
          "text": "map()",
          "isCorrect": true
        },
        {
          "id": "java-c491",
          "text": "collect()",
          "isCorrect": true
        },
        {
          "id": "java-c492",
          "text": "execute()",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q124",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @Async annotation do in Spring?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c493",
          "text": "Executes method asynchronously",
          "isCorrect": true
        },
        {
          "id": "java-c494",
          "text": "Makes method thread-safe",
          "isCorrect": false
        },
        {
          "id": "java-c495",
          "text": "Validates method parameters",
          "isCorrect": false
        },
        {
          "id": "java-c496",
          "text": "Logs asynchronous operations",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q125",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Hibernate, what is 'dirty checking'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c497",
          "text": "Automatic detection of entity changes",
          "isCorrect": true
        },
        {
          "id": "java-c498",
          "text": "Validation of data integrity",
          "isCorrect": false
        },
        {
          "id": "java-c499",
          "text": "Checking for database locks",
          "isCorrect": false
        },
        {
          "id": "java-c500",
          "text": "Memory cleanup process",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q126",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java EE specifications? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c501",
          "text": "JPA",
          "isCorrect": true
        },
        {
          "id": "java-c502",
          "text": "JAX-RS",
          "isCorrect": true
        },
        {
          "id": "java-c503",
          "text": "CDI",
          "isCorrect": true
        },
        {
          "id": "java-c504",
          "text": "JPA-RS",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q127",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @JsonView annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c505",
          "text": "Controls which fields are serialized for different views",
          "isCorrect": true
        },
        {
          "id": "java-c506",
          "text": "Creates different JSON formats",
          "isCorrect": false
        },
        {
          "id": "java-c507",
          "text": "Validates JSON views",
          "isCorrect": false
        },
        {
          "id": "java-c508",
          "text": "Merges multiple JSON views",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q128",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Spring Data JPA, what does the @Query annotation do?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c509",
          "text": "Defines custom JPQL or SQL queries",
          "isCorrect": true
        },
        {
          "id": "java-c510",
          "text": "Queries database metadata",
          "isCorrect": false
        },
        {
          "id": "java-c511",
          "text": "Validates query parameters",
          "isCorrect": false
        },
        {
          "id": "java-c512",
          "text": "Logs query execution",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q129",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid ways to configure logging in Spring Boot? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c513",
          "text": "application.properties",
          "isCorrect": true
        },
        {
          "id": "java-c514",
          "text": "logback-spring.xml",
          "isCorrect": true
        },
        {
          "id": "java-c515",
          "text": "Java configuration class",
          "isCorrect": true
        },
        {
          "id": "java-c516",
          "text": "pom.xml dependencies",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q130",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @EnableScheduling annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c517",
          "text": "Enables scheduled task execution",
          "isCorrect": true
        },
        {
          "id": "java-c518",
          "text": "Schedules database backups",
          "isCorrect": false
        },
        {
          "id": "java-c519",
          "text": "Manages thread scheduling",
          "isCorrect": false
        },
        {
          "id": "java-c520",
          "text": "Schedules application startup",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q131",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'diamond operator'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c521",
          "text": "<> syntax for generic type inference",
          "isCorrect": true
        },
        {
          "id": "java-c522",
          "text": "Operator for type casting",
          "isCorrect": false
        },
        {
          "id": "java-c523",
          "text": "Bitwise operator",
          "isCorrect": false
        },
        {
          "id": "java-c524",
          "text": "Arithmetic operator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q132",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java concurrency patterns? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c525",
          "text": "Producer-Consumer",
          "isCorrect": true
        },
        {
          "id": "java-c526",
          "text": "Reader-Writer",
          "isCorrect": true
        },
        {
          "id": "java-c527",
          "text": "Balking",
          "isCorrect": true
        },
        {
          "id": "java-c528",
          "text": "Singleton",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q133",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @Profile annotation do in Spring?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c529",
          "text": "Activates beans for specific environments",
          "isCorrect": true
        },
        {
          "id": "java-c530",
          "text": "Creates user profiles",
          "isCorrect": false
        },
        {
          "id": "java-c531",
          "text": "Manages application profiles",
          "isCorrect": false
        },
        {
          "id": "java-c532",
          "text": "Validates profile data",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q134",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'try-with-resources'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c533",
          "text": "Automatic resource management syntax",
          "isCorrect": true
        },
        {
          "id": "java-c534",
          "text": "Exception handling mechanism",
          "isCorrect": false
        },
        {
          "id": "java-c535",
          "text": "Memory management technique",
          "isCorrect": false
        },
        {
          "id": "java-c536",
          "text": "File handling method",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q135",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid Spring AOP advice types? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c537",
          "text": "@Before",
          "isCorrect": true
        },
        {
          "id": "java-c538",
          "text": "@After",
          "isCorrect": true
        },
        {
          "id": "java-c539",
          "text": "@Around",
          "isCorrect": true
        },
        {
          "id": "java-c540",
          "text": "@When",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q136",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @JsonFormat annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c541",
          "text": "Controls date/time formatting in JSON",
          "isCorrect": true
        },
        {
          "id": "java-c542",
          "text": "Formats JSON structure",
          "isCorrect": false
        },
        {
          "id": "java-c543",
          "text": "Validates JSON format",
          "isCorrect": false
        },
        {
          "id": "java-c544",
          "text": "Compresses JSON data",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q137",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Kubernetes, what is a 'Service'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c545",
          "text": "Abstraction for accessing pods",
          "isCorrect": true
        },
        {
          "id": "java-c546",
          "text": "Storage abstraction",
          "isCorrect": false
        },
        {
          "id": "java-c547",
          "text": "Network policy",
          "isCorrect": false
        },
        {
          "id": "java-c548",
          "text": "Configuration management",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q138",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java build tools? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c549",
          "text": "Maven",
          "isCorrect": true
        },
        {
          "id": "java-c550",
          "text": "Gradle",
          "isCorrect": true
        },
        {
          "id": "java-c551",
          "text": "Ant",
          "isCorrect": true
        },
        {
          "id": "java-c552",
          "text": "Make",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q139",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @EnableWebSecurity annotation do?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c553",
          "text": "Enables Spring Security configuration",
          "isCorrect": true
        },
        {
          "id": "java-c554",
          "text": "Secures web applications",
          "isCorrect": false
        },
        {
          "id": "java-c555",
          "text": "Validates security configurations",
          "isCorrect": false
        },
        {
          "id": "java-c556",
          "text": "Manages user sessions",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q140",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'bounded type parameter'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c557",
          "text": "Generic type restricted to certain types",
          "isCorrect": true
        },
        {
          "id": "java-c558",
          "text": "Parameter with size limits",
          "isCorrect": false
        },
        {
          "id": "java-c559",
          "text": "Method parameter bounds",
          "isCorrect": false
        },
        {
          "id": "java-c560",
          "text": "Array size specification",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q141",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid Java module directives? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c561",
          "text": "requires",
          "isCorrect": true
        },
        {
          "id": "java-c562",
          "text": "exports",
          "isCorrect": true
        },
        {
          "id": "java-c563",
          "text": "opens",
          "isCorrect": true
        },
        {
          "id": "java-c564",
          "text": "imports",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q142",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @Value annotation in Spring?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c565",
          "text": "Injects values from properties files",
          "isCorrect": true
        },
        {
          "id": "java-c566",
          "text": "Validates field values",
          "isCorrect": false
        },
        {
          "id": "java-c567",
          "text": "Sets default values",
          "isCorrect": false
        },
        {
          "id": "java-c568",
          "text": "Calculates field values",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q143",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'wild card' in generics?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c569",
          "text": "? symbol for unknown type parameters",
          "isCorrect": true
        },
        {
          "id": "java-c570",
          "text": "Pattern matching symbol",
          "isCorrect": false
        },
        {
          "id": "java-c571",
          "text": "Regular expression symbol",
          "isCorrect": false
        },
        {
          "id": "java-c572",
          "text": "Arithmetic operator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q144",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Spring Boot auto-configuration features? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c573",
          "text": "Embedded Tomcat",
          "isCorrect": true
        },
        {
          "id": "java-c574",
          "text": "H2 database",
          "isCorrect": true
        },
        {
          "id": "java-c575",
          "text": "Actuator endpoints",
          "isCorrect": true
        },
        {
          "id": "java-c576",
          "text": "Custom logging",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q145",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @JsonIgnoreProperties annotation do?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c577",
          "text": "Ignores unknown properties during deserialization",
          "isCorrect": true
        },
        {
          "id": "java-c578",
          "text": "Ignores null values",
          "isCorrect": false
        },
        {
          "id": "java-c579",
          "text": "Validates property names",
          "isCorrect": false
        },
        {
          "id": "java-c580",
          "text": "Merges properties",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q146",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Docker, what is a 'Dockerfile'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c581",
          "text": "Script for building Docker images",
          "isCorrect": true
        },
        {
          "id": "java-c582",
          "text": "Container runtime configuration",
          "isCorrect": false
        },
        {
          "id": "java-c583",
          "text": "Network configuration file",
          "isCorrect": false
        },
        {
          "id": "java-c584",
          "text": "Volume mount specification",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q147",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid Java date/time APIs? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c585",
          "text": "java.time package",
          "isCorrect": true
        },
        {
          "id": "java-c586",
          "text": "java.util.Date",
          "isCorrect": false
        },
        {
          "id": "java-c587",
          "text": "java.util.Calendar",
          "isCorrect": false
        },
        {
          "id": "java-c588",
          "text": "java.time.LocalDate",
          "isCorrect": true
        }
      ]
    },
    {
      "id": "java-q148",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @Scheduled annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c589",
          "text": "Schedules method execution at fixed intervals",
          "isCorrect": true
        },
        {
          "id": "java-c590",
          "text": "Schedules database operations",
          "isCorrect": false
        },
        {
          "id": "java-c591",
          "text": "Schedules thread creation",
          "isCorrect": false
        },
        {
          "id": "java-c592",
          "text": "Schedules application startup",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q149",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'marker interface'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c593",
          "text": "Interface with no methods that provides metadata",
          "isCorrect": true
        },
        {
          "id": "java-c594",
          "text": "Interface for marking objects",
          "isCorrect": false
        },
        {
          "id": "java-c595",
          "text": "Interface for serialization",
          "isCorrect": false
        },
        {
          "id": "java-c596",
          "text": "Interface for cloning",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q150",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java testing frameworks? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c597",
          "text": "JUnit",
          "isCorrect": true
        },
        {
          "id": "java-c598",
          "text": "TestNG",
          "isCorrect": true
        },
        {
          "id": "java-c599",
          "text": "Mockito",
          "isCorrect": true
        },
        {
          "id": "java-c600",
          "text": "Hamcrest",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q151",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @EnableJpaRepositories annotation do?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c601",
          "text": "Enables JPA repository scanning",
          "isCorrect": true
        },
        {
          "id": "java-c602",
          "text": "Creates repository beans",
          "isCorrect": false
        },
        {
          "id": "java-c603",
          "text": "Validates repository methods",
          "isCorrect": false
        },
        {
          "id": "java-c604",
          "text": "Configures database connections",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q152",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'functional interface'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c605",
          "text": "Interface with exactly one abstract method",
          "isCorrect": true
        },
        {
          "id": "java-c606",
          "text": "Interface for functional programming",
          "isCorrect": false
        },
        {
          "id": "java-c607",
          "text": "Interface with default methods",
          "isCorrect": false
        },
        {
          "id": "java-c608",
          "text": "Interface for lambda expressions",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q153",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid Spring transaction propagation levels? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c609",
          "text": "REQUIRED",
          "isCorrect": true
        },
        {
          "id": "java-c610",
          "text": "REQUIRES_NEW",
          "isCorrect": true
        },
        {
          "id": "java-c611",
          "text": "MANDATORY",
          "isCorrect": true
        },
        {
          "id": "java-c612",
          "text": "AUTOMATIC",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q154",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @JsonSubTypes annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c613",
          "text": "Handles polymorphism in JSON serialization",
          "isCorrect": true
        },
        {
          "id": "java-c614",
          "text": "Creates JSON subtypes",
          "isCorrect": false
        },
        {
          "id": "java-c615",
          "text": "Validates subtype relationships",
          "isCorrect": false
        },
        {
          "id": "java-c616",
          "text": "Merges JSON subtypes",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q155",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Kubernetes, what is a 'ConfigMap'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c617",
          "text": "Object for storing configuration data",
          "isCorrect": true
        },
        {
          "id": "java-c618",
          "text": "Network configuration",
          "isCorrect": false
        },
        {
          "id": "java-c619",
          "text": "Storage configuration",
          "isCorrect": false
        },
        {
          "id": "java-c620",
          "text": "Security configuration",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q156",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java serialization mechanisms? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c621",
          "text": "Serializable interface",
          "isCorrect": true
        },
        {
          "id": "java-c622",
          "text": "Externalizable interface",
          "isCorrect": true
        },
        {
          "id": "java-c623",
          "text": "JSON serialization",
          "isCorrect": false
        },
        {
          "id": "java-c624",
          "text": "XML serialization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q157",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @EnableTransactionManagement annotation do?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c625",
          "text": "Enables declarative transaction management",
          "isCorrect": true
        },
        {
          "id": "java-c626",
          "text": "Manages database transactions",
          "isCorrect": false
        },
        {
          "id": "java-c627",
          "text": "Validates transaction boundaries",
          "isCorrect": false
        },
        {
          "id": "java-c628",
          "text": "Logs transaction operations",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q158",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'raw type' in generics?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c629",
          "text": "Generic class without type parameters",
          "isCorrect": true
        },
        {
          "id": "java-c630",
          "text": "Unprocessed data type",
          "isCorrect": false
        },
        {
          "id": "java-c631",
          "text": "Primitive data type",
          "isCorrect": false
        },
        {
          "id": "java-c632",
          "text": "Object type without generics",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q159",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid Java exception handling best practices? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c633",
          "text": "Catch specific exceptions",
          "isCorrect": true
        },
        {
          "id": "java-c634",
          "text": "Don't suppress exceptions",
          "isCorrect": true
        },
        {
          "id": "java-c635",
          "text": "Use finally for cleanup",
          "isCorrect": true
        },
        {
          "id": "java-c636",
          "text": "Catch Exception everywhere",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q160",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @JsonTypeInfo annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c637",
          "text": "Includes type information in JSON for polymorphism",
          "isCorrect": true
        },
        {
          "id": "java-c638",
          "text": "Validates JSON types",
          "isCorrect": false
        },
        {
          "id": "java-c639",
          "text": "Converts JSON types",
          "isCorrect": false
        },
        {
          "id": "java-c640",
          "text": "Merges JSON types",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q161",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Docker, what is a 'volume'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c641",
          "text": "Persistent data storage for containers",
          "isCorrect": true
        },
        {
          "id": "java-c642",
          "text": "Container memory allocation",
          "isCorrect": false
        },
        {
          "id": "java-c643",
          "text": "Network volume control",
          "isCorrect": false
        },
        {
          "id": "java-c644",
          "text": "CPU resource allocation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q162",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java design patterns? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c645",
          "text": "Observer",
          "isCorrect": true
        },
        {
          "id": "java-c646",
          "text": "Decorator",
          "isCorrect": true
        },
        {
          "id": "java-c647",
          "text": "Strategy",
          "isCorrect": true
        },
        {
          "id": "java-c648",
          "text": "Iterator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q163",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @EnableCaching annotation enable?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c649",
          "text": "Spring's caching abstraction",
          "isCorrect": true
        },
        {
          "id": "java-c650",
          "text": "Database caching",
          "isCorrect": false
        },
        {
          "id": "java-c651",
          "text": "HTTP response caching",
          "isCorrect": false
        },
        {
          "id": "java-c652",
          "text": "Method result caching",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q164",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'heap pollution'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c653",
          "text": "Mixing incompatible generic types in heap",
          "isCorrect": true
        },
        {
          "id": "java-c654",
          "text": "Memory corruption",
          "isCorrect": false
        },
        {
          "id": "java-c655",
          "text": "Heap memory exhaustion",
          "isCorrect": false
        },
        {
          "id": "java-c656",
          "text": "Garbage collection issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q165",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid Spring MVC controller method return types? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c657",
          "text": "String (view name)",
          "isCorrect": true
        },
        {
          "id": "java-c658",
          "text": "ModelAndView",
          "isCorrect": true
        },
        {
          "id": "java-c659",
          "text": "ResponseEntity",
          "isCorrect": true
        },
        {
          "id": "java-c660",
          "text": "HttpResponse",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q166",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @JsonPropertyOrder annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c661",
          "text": "Controls order of properties in JSON output",
          "isCorrect": true
        },
        {
          "id": "java-c662",
          "text": "Orders JSON properties alphabetically",
          "isCorrect": false
        },
        {
          "id": "java-c663",
          "text": "Validates property order",
          "isCorrect": false
        },
        {
          "id": "java-c664",
          "text": "Sorts JSON arrays",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q167",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Kubernetes, what is a 'Deployment'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c665",
          "text": "Manages replica sets and pods",
          "isCorrect": true
        },
        {
          "id": "java-c666",
          "text": "Manages network policies",
          "isCorrect": false
        },
        {
          "id": "java-c667",
          "text": "Manages storage volumes",
          "isCorrect": false
        },
        {
          "id": "java-c668",
          "text": "Manages configuration",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q168",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java I/O stream types? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c669",
          "text": "Byte streams",
          "isCorrect": true
        },
        {
          "id": "java-c670",
          "text": "Character streams",
          "isCorrect": true
        },
        {
          "id": "java-c671",
          "text": "Buffered streams",
          "isCorrect": true
        },
        {
          "id": "java-c672",
          "text": "Network streams",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q169",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @EnableWebMvc annotation do?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c673",
          "text": "Enables Spring MVC configuration",
          "isCorrect": true
        },
        {
          "id": "java-c674",
          "text": "Enables web security",
          "isCorrect": false
        },
        {
          "id": "java-c675",
          "text": "Enables REST endpoints",
          "isCorrect": false
        },
        {
          "id": "java-c676",
          "text": "Enables HTTP clients",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q170",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'bridge method'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c677",
          "text": "Synthetic method for type erasure compatibility",
          "isCorrect": true
        },
        {
          "id": "java-c678",
          "text": "Method for connecting classes",
          "isCorrect": false
        },
        {
          "id": "java-c679",
          "text": "Method for inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c680",
          "text": "Method for polymorphism",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q171",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid Java NIO.2 features? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c681",
          "text": "Path API",
          "isCorrect": true
        },
        {
          "id": "java-c682",
          "text": "Files utility class",
          "isCorrect": true
        },
        {
          "id": "java-c683",
          "text": "Asynchronous file I/O",
          "isCorrect": true
        },
        {
          "id": "java-c684",
          "text": "Network I/O",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q172",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @ConfigurationProperties annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c685",
          "text": "Maps external properties to object fields",
          "isCorrect": true
        },
        {
          "id": "java-c686",
          "text": "Configures application properties",
          "isCorrect": false
        },
        {
          "id": "java-c687",
          "text": "Validates property values",
          "isCorrect": false
        },
        {
          "id": "java-c688",
          "text": "Sets default properties",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q173",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'capture conversion'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c689",
          "text": "Conversion of wildcard types to concrete types",
          "isCorrect": true
        },
        {
          "id": "java-c690",
          "text": "Type casting operation",
          "isCorrect": false
        },
        {
          "id": "java-c691",
          "text": "Data type conversion",
          "isCorrect": false
        },
        {
          "id": "java-c692",
          "text": "Generic type conversion",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q174",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Spring Cloud Config features? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c693",
          "text": "Centralized configuration",
          "isCorrect": true
        },
        {
          "id": "java-c694",
          "text": "Environment-specific properties",
          "isCorrect": true
        },
        {
          "id": "java-c695",
          "text": "Configuration encryption",
          "isCorrect": true
        },
        {
          "id": "java-c696",
          "text": "Database configuration",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q175",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @JsonUnwrapped annotation do?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c697",
          "text": "Flattens object properties in JSON",
          "isCorrect": true
        },
        {
          "id": "java-c698",
          "text": "Unwraps JSON arrays",
          "isCorrect": false
        },
        {
          "id": "java-c699",
          "text": "Unwraps JSON objects",
          "isCorrect": false
        },
        {
          "id": "java-c700",
          "text": "Removes JSON wrappers",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q176",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Docker, what is 'docker-compose'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c701",
          "text": "Tool for defining multi-container applications",
          "isCorrect": true
        },
        {
          "id": "java-c702",
          "text": "Container orchestration tool",
          "isCorrect": false
        },
        {
          "id": "java-c703",
          "text": "Image building tool",
          "isCorrect": false
        },
        {
          "id": "java-c704",
          "text": "Container monitoring tool",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q177",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid Java collection utility methods? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c705",
          "text": "Collections.sort()",
          "isCorrect": true
        },
        {
          "id": "java-c706",
          "text": "Collections.unmodifiableList()",
          "isCorrect": true
        },
        {
          "id": "java-c707",
          "text": "Collections.synchronizedList()",
          "isCorrect": true
        },
        {
          "id": "java-c708",
          "text": "Collections.stream()",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q178",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @EnableAsync annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c709",
          "text": "Enables asynchronous method execution",
          "isCorrect": true
        },
        {
          "id": "java-c710",
          "text": "Enables parallel processing",
          "isCorrect": false
        },
        {
          "id": "java-c711",
          "text": "Enables thread pooling",
          "isCorrect": false
        },
        {
          "id": "java-c712",
          "text": "Enables concurrent execution",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q179",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'reifiable type'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c713",
          "text": "Type whose runtime representation contains full type information",
          "isCorrect": true
        },
        {
          "id": "java-c714",
          "text": "Type that can be instantiated",
          "isCorrect": false
        },
        {
          "id": "java-c715",
          "text": "Type with complete metadata",
          "isCorrect": false
        },
        {
          "id": "java-c716",
          "text": "Type that supports reflection",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q180",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java annotation processing tools? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c717",
          "text": "APT",
          "isCorrect": true
        },
        {
          "id": "java-c718",
          "text": "Lombok",
          "isCorrect": true
        },
        {
          "id": "java-c719",
          "text": "MapStruct",
          "isCorrect": true
        },
        {
          "id": "java-c720",
          "text": "Jackson",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q181",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @EnableJpaAuditing annotation do?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c721",
          "text": "Enables automatic entity auditing",
          "isCorrect": true
        },
        {
          "id": "java-c722",
          "text": "Enables JPA validation",
          "isCorrect": false
        },
        {
          "id": "java-c723",
          "text": "Enables database auditing",
          "isCorrect": false
        },
        {
          "id": "java-c724",
          "text": "Enables query auditing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q182",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'non-reifiable type'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c725",
          "text": "Type whose runtime representation lacks full type information",
          "isCorrect": true
        },
        {
          "id": "java-c726",
          "text": "Type that cannot be instantiated",
          "isCorrect": false
        },
        {
          "id": "java-c727",
          "text": "Type without metadata",
          "isCorrect": false
        },
        {
          "id": "java-c728",
          "text": "Type that doesn't support reflection",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q183",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid Spring Data JPA repository methods? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c729",
          "text": "findById()",
          "isCorrect": true
        },
        {
          "id": "java-c730",
          "text": "save()",
          "isCorrect": true
        },
        {
          "id": "java-c731",
          "text": "deleteById()",
          "isCorrect": true
        },
        {
          "id": "java-c732",
          "text": "updateById()",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q184",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @JsonManagedReference annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c733",
          "text": "Manages forward part of parent-child relationship in JSON",
          "isCorrect": true
        },
        {
          "id": "java-c734",
          "text": "Manages JSON references",
          "isCorrect": false
        },
        {
          "id": "java-c735",
          "text": "Manages object lifecycle",
          "isCorrect": false
        },
        {
          "id": "java-c736",
          "text": "Manages memory references",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q185",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Kubernetes, what is a 'Secret'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c737",
          "text": "Object for storing sensitive data",
          "isCorrect": true
        },
        {
          "id": "java-c738",
          "text": "Security policy object",
          "isCorrect": false
        },
        {
          "id": "java-c739",
          "text": "Authentication object",
          "isCorrect": false
        },
        {
          "id": "java-c740",
          "text": "Encryption object",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q186",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java reflection capabilities? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c741",
          "text": "Inspect classes at runtime",
          "isCorrect": true
        },
        {
          "id": "java-c742",
          "text": "Invoke methods dynamically",
          "isCorrect": true
        },
        {
          "id": "java-c743",
          "text": "Create objects dynamically",
          "isCorrect": true
        },
        {
          "id": "java-c744",
          "text": "Modify bytecode",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q187",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @EnableGlobalMethodSecurity annotation do?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c745",
          "text": "Enables method-level security annotations",
          "isCorrect": true
        },
        {
          "id": "java-c746",
          "text": "Enables global security",
          "isCorrect": false
        },
        {
          "id": "java-c747",
          "text": "Enables authentication",
          "isCorrect": false
        },
        {
          "id": "java-c748",
          "text": "Enables authorization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q188",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'type witness'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c749",
          "text": "Explicit type argument to assist type inference",
          "isCorrect": true
        },
        {
          "id": "java-c750",
          "text": "Type declaration witness",
          "isCorrect": false
        },
        {
          "id": "java-c751",
          "text": "Generic type witness",
          "isCorrect": false
        },
        {
          "id": "java-c752",
          "text": "Method parameter witness",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q189",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid Java JVM tuning parameters? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c753",
          "text": "-Xmx (max heap)",
          "isCorrect": true
        },
        {
          "id": "java-c754",
          "text": "-Xms (initial heap)",
          "isCorrect": true
        },
        {
          "id": "java-c755",
          "text": "-XX:MaxGCPauseMillis",
          "isCorrect": true
        },
        {
          "id": "java-c756",
          "text": "-Xdebug",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q190",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @JsonBackReference annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c757",
          "text": "Manages back part of parent-child relationship in JSON",
          "isCorrect": true
        },
        {
          "id": "java-c758",
          "text": "Creates back references",
          "isCorrect": false
        },
        {
          "id": "java-c759",
          "text": "Manages circular references",
          "isCorrect": false
        },
        {
          "id": "java-c760",
          "text": "Handles backward compatibility",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q191",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Docker, what is 'swarm mode'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c761",
          "text": "Native clustering and orchestration feature",
          "isCorrect": true
        },
        {
          "id": "java-c762",
          "text": "Container monitoring mode",
          "isCorrect": false
        },
        {
          "id": "java-c763",
          "text": "Network isolation mode",
          "isCorrect": false
        },
        {
          "id": "java-c764",
          "text": "Security mode",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q192",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java security best practices? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c765",
          "text": "Validate input data",
          "isCorrect": true
        },
        {
          "id": "java-c766",
          "text": "Use parameterized queries",
          "isCorrect": true
        },
        {
          "id": "java-c767",
          "text": "Encrypt sensitive data",
          "isCorrect": true
        },
        {
          "id": "java-c768",
          "text": "Use reflection extensively",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q193",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @EnableDiscoveryClient annotation do?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c769",
          "text": "Enables service discovery client",
          "isCorrect": true
        },
        {
          "id": "java-c770",
          "text": "Enables client discovery",
          "isCorrect": false
        },
        {
          "id": "java-c771",
          "text": "Enables service registration",
          "isCorrect": false
        },
        {
          "id": "java-c772",
          "text": "Enables load balancing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q194",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'unchecked conversion'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c773",
          "text": "Conversion that bypasses generic type checking",
          "isCorrect": true
        },
        {
          "id": "java-c774",
          "text": "Type casting without validation",
          "isCorrect": false
        },
        {
          "id": "java-c775",
          "text": "Implicit type conversion",
          "isCorrect": false
        },
        {
          "id": "java-c776",
          "text": "Primitive type conversion",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q195",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "Which are valid Java microbenchmarking tools? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c777",
          "text": "JMH (Java Microbenchmarking Harness)",
          "isCorrect": true
        },
        {
          "id": "java-c778",
          "text": "JProfiler",
          "isCorrect": false
        },
        {
          "id": "java-c779",
          "text": "VisualVM",
          "isCorrect": false
        },
        {
          "id": "java-c780",
          "text": "YourKit",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q196",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of the @JsonIdentityInfo annotation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c781",
          "text": "Handles circular references in JSON serialization",
          "isCorrect": true
        },
        {
          "id": "java-c782",
          "text": "Identifies JSON objects",
          "isCorrect": false
        },
        {
          "id": "java-c783",
          "text": "Validates object identity",
          "isCorrect": false
        },
        {
          "id": "java-c784",
          "text": "Creates object IDs",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q197",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Kubernetes, what is a 'StatefulSet'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c785",
          "text": "Manages stateful applications with stable identities",
          "isCorrect": true
        },
        {
          "id": "java-c786",
          "text": "Manages stateless applications",
          "isCorrect": false
        },
        {
          "id": "java-c787",
          "text": "Manages configuration state",
          "isCorrect": false
        },
        {
          "id": "java-c788",
          "text": "Manages application state",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q198",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which of the following are Java performance monitoring tools? (Select all that apply)",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c789",
          "text": "JConsole",
          "isCorrect": true
        },
        {
          "id": "java-c790",
          "text": "JVisualVM",
          "isCorrect": true
        },
        {
          "id": "java-c791",
          "text": "Java Mission Control",
          "isCorrect": true
        },
        {
          "id": "java-c792",
          "text": "JDB",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q199",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What does the @EnableFeignClients annotation do?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c793",
          "text": "Enables Feign client scanning and configuration",
          "isCorrect": true
        },
        {
          "id": "java-c794",
          "text": "Enables REST client creation",
          "isCorrect": false
        },
        {
          "id": "java-c795",
          "text": "Enables HTTP client configuration",
          "isCorrect": false
        },
        {
          "id": "java-c796",
          "text": "Enables service discovery",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q200",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "In Java, what is 'method handle'?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c797",
          "text": "Typed reference to method for dynamic invocation",
          "isCorrect": true
        },
        {
          "id": "java-c798",
          "text": "Method reference handle",
          "isCorrect": false
        },
        {
          "id": "java-c799",
          "text": "Reflection method handle",
          "isCorrect": false
        },
        {
          "id": "java-c800",
          "text": "Dynamic method handle",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q201",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What causes OutOfMemoryError: Java heap space?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c801",
          "text": "Heap memory exhausted, objects cannot be garbage collected",
          "isCorrect": true
        },
        {
          "id": "java-c802",
          "text": "Stack overflow",
          "isCorrect": false
        },
        {
          "id": "java-c803",
          "text": "Too many threads",
          "isCorrect": false
        },
        {
          "id": "java-c804",
          "text": "Metaspace full",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q202",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which statements about G1GC are true?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c805",
          "text": "Divides heap into regions",
          "isCorrect": true
        },
        {
          "id": "java-c806",
          "text": "Designed for heaps > 4GB",
          "isCorrect": true
        },
        {
          "id": "java-c807",
          "text": "Predictable pause times",
          "isCorrect": true
        },
        {
          "id": "java-c808",
          "text": "No stop-the-world pauses",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q203",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of -XX:MaxGCPauseMillis?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c809",
          "text": "Target maximum GC pause time",
          "isCorrect": true
        },
        {
          "id": "java-c810",
          "text": "Maximum GC frequency",
          "isCorrect": false
        },
        {
          "id": "java-c811",
          "text": "Total GC time limit",
          "isCorrect": false
        },
        {
          "id": "java-c812",
          "text": "GC thread count",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q204",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is String deduplication in G1GC?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c813",
          "text": "Removes duplicate String objects to save memory",
          "isCorrect": true
        },
        {
          "id": "java-c814",
          "text": "Removes duplicate characters",
          "isCorrect": false
        },
        {
          "id": "java-c815",
          "text": "String compression",
          "isCorrect": false
        },
        {
          "id": "java-c816",
          "text": "String pool optimization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q205",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between -Xms and -Xmx?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c817",
          "text": "-Xms: initial heap size; -Xmx: maximum heap size",
          "isCorrect": true
        },
        {
          "id": "java-c818",
          "text": "-Xms: max stack; -Xmx: max heap",
          "isCorrect": false
        },
        {
          "id": "java-c819",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c820",
          "text": "-Xms: min threads; -Xmx: max threads",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q206",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which are valid String pool locations in different Java versions?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c821",
          "text": "PermGen (Java 7)",
          "isCorrect": true
        },
        {
          "id": "java-c822",
          "text": "Heap (Java 7+)",
          "isCorrect": true
        },
        {
          "id": "java-c823",
          "text": "Metaspace (Java 8+)",
          "isCorrect": false
        },
        {
          "id": "java-c824",
          "text": "Stack",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q207",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What happens when calling intern() on a huge String?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c825",
          "text": "May cause performance issues, string added to pool",
          "isCorrect": true
        },
        {
          "id": "java-c826",
          "text": "Throws exception",
          "isCorrect": false
        },
        {
          "id": "java-c827",
          "text": "String truncated",
          "isCorrect": false
        },
        {
          "id": "java-c828",
          "text": "Automatically optimized",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q208",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is escape analysis optimization?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c829",
          "text": "Determines if object escapes method, can allocate on stack",
          "isCorrect": true
        },
        {
          "id": "java-c830",
          "text": "Security analysis",
          "isCorrect": false
        },
        {
          "id": "java-c831",
          "text": "Exception analysis",
          "isCorrect": false
        },
        {
          "id": "java-c832",
          "text": "Thread escape detection",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q209",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is scalar replacement?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c833",
          "text": "JVM optimization that replaces object with its scalar fields",
          "isCorrect": true
        },
        {
          "id": "java-c834",
          "text": "Variable replacement",
          "isCorrect": false
        },
        {
          "id": "java-c835",
          "text": "Method inlining",
          "isCorrect": false
        },
        {
          "id": "java-c836",
          "text": "Type replacement",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q210",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which JVM flags enable detailed GC logging?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c837",
          "text": "-XX:+PrintGCDetails",
          "isCorrect": true
        },
        {
          "id": "java-c838",
          "text": "-Xlog:gc*",
          "isCorrect": true
        },
        {
          "id": "java-c839",
          "text": "-verbose:gc",
          "isCorrect": true
        },
        {
          "id": "java-c840",
          "text": "-XX:+PrintMemory",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q211",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of ClassLoader.loadClass() vs Class.forName()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c841",
          "text": "loadClass: lazy, Class.forName: initializes static blocks",
          "isCorrect": true
        },
        {
          "id": "java-c842",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c843",
          "text": "loadClass is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c844",
          "text": "Class.forName is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q212",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the types of class loaders?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c845",
          "text": "Bootstrap",
          "isCorrect": true
        },
        {
          "id": "java-c846",
          "text": "Extension/Platform",
          "isCorrect": true
        },
        {
          "id": "java-c847",
          "text": "Application",
          "isCorrect": true
        },
        {
          "id": "java-c848",
          "text": "Runtime",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q213",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is type erasure limitation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c849",
          "text": "Cannot create generic array, runtime type info lost",
          "isCorrect": true
        },
        {
          "id": "java-c850",
          "text": "Generics don't work",
          "isCorrect": false
        },
        {
          "id": "java-c851",
          "text": "All types erased",
          "isCorrect": false
        },
        {
          "id": "java-c852",
          "text": "Performance issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q214",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is PECS principle?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c853",
          "text": "Producer Extends, Consumer Super for wildcard usage",
          "isCorrect": true
        },
        {
          "id": "java-c854",
          "text": "Performance principle",
          "isCorrect": false
        },
        {
          "id": "java-c855",
          "text": "Concurrency principle",
          "isCorrect": false
        },
        {
          "id": "java-c856",
          "text": "Design pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q215",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the diamond operator <>?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c857",
          "text": "Type inference for generics in Java 7+",
          "isCorrect": true
        },
        {
          "id": "java-c858",
          "text": "Multiple inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c859",
          "text": "Operator overloading",
          "isCorrect": false
        },
        {
          "id": "java-c860",
          "text": "Pattern matching",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q216",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of ClassLoader.loadClass() vs Class.forName()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c861",
          "text": "loadClass: lazy, Class.forName: initializes static blocks",
          "isCorrect": true
        },
        {
          "id": "java-c862",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c863",
          "text": "loadClass is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c864",
          "text": "Class.forName is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q217",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the types of class loaders?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c865",
          "text": "Bootstrap",
          "isCorrect": true
        },
        {
          "id": "java-c866",
          "text": "Extension/Platform",
          "isCorrect": true
        },
        {
          "id": "java-c867",
          "text": "Application",
          "isCorrect": true
        },
        {
          "id": "java-c868",
          "text": "Runtime",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q218",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is type erasure limitation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c869",
          "text": "Cannot create generic array, runtime type info lost",
          "isCorrect": true
        },
        {
          "id": "java-c870",
          "text": "Generics don't work",
          "isCorrect": false
        },
        {
          "id": "java-c871",
          "text": "All types erased",
          "isCorrect": false
        },
        {
          "id": "java-c872",
          "text": "Performance issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q219",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is PECS principle?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c873",
          "text": "Producer Extends, Consumer Super for wildcard usage",
          "isCorrect": true
        },
        {
          "id": "java-c874",
          "text": "Performance principle",
          "isCorrect": false
        },
        {
          "id": "java-c875",
          "text": "Concurrency principle",
          "isCorrect": false
        },
        {
          "id": "java-c876",
          "text": "Design pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q220",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the diamond operator <>?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c877",
          "text": "Type inference for generics in Java 7+",
          "isCorrect": true
        },
        {
          "id": "java-c878",
          "text": "Multiple inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c879",
          "text": "Operator overloading",
          "isCorrect": false
        },
        {
          "id": "java-c880",
          "text": "Pattern matching",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q221",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of ClassLoader.loadClass() vs Class.forName()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c881",
          "text": "loadClass: lazy, Class.forName: initializes static blocks",
          "isCorrect": true
        },
        {
          "id": "java-c882",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c883",
          "text": "loadClass is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c884",
          "text": "Class.forName is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q222",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the types of class loaders?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c885",
          "text": "Bootstrap",
          "isCorrect": true
        },
        {
          "id": "java-c886",
          "text": "Extension/Platform",
          "isCorrect": true
        },
        {
          "id": "java-c887",
          "text": "Application",
          "isCorrect": true
        },
        {
          "id": "java-c888",
          "text": "Runtime",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q223",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is type erasure limitation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c889",
          "text": "Cannot create generic array, runtime type info lost",
          "isCorrect": true
        },
        {
          "id": "java-c890",
          "text": "Generics don't work",
          "isCorrect": false
        },
        {
          "id": "java-c891",
          "text": "All types erased",
          "isCorrect": false
        },
        {
          "id": "java-c892",
          "text": "Performance issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q224",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is PECS principle?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c893",
          "text": "Producer Extends, Consumer Super for wildcard usage",
          "isCorrect": true
        },
        {
          "id": "java-c894",
          "text": "Performance principle",
          "isCorrect": false
        },
        {
          "id": "java-c895",
          "text": "Concurrency principle",
          "isCorrect": false
        },
        {
          "id": "java-c896",
          "text": "Design pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q225",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the diamond operator <>?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c897",
          "text": "Type inference for generics in Java 7+",
          "isCorrect": true
        },
        {
          "id": "java-c898",
          "text": "Multiple inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c899",
          "text": "Operator overloading",
          "isCorrect": false
        },
        {
          "id": "java-c900",
          "text": "Pattern matching",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q226",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of ClassLoader.loadClass() vs Class.forName()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c901",
          "text": "loadClass: lazy, Class.forName: initializes static blocks",
          "isCorrect": true
        },
        {
          "id": "java-c902",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c903",
          "text": "loadClass is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c904",
          "text": "Class.forName is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q227",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the types of class loaders?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c905",
          "text": "Bootstrap",
          "isCorrect": true
        },
        {
          "id": "java-c906",
          "text": "Extension/Platform",
          "isCorrect": true
        },
        {
          "id": "java-c907",
          "text": "Application",
          "isCorrect": true
        },
        {
          "id": "java-c908",
          "text": "Runtime",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q228",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is type erasure limitation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c909",
          "text": "Cannot create generic array, runtime type info lost",
          "isCorrect": true
        },
        {
          "id": "java-c910",
          "text": "Generics don't work",
          "isCorrect": false
        },
        {
          "id": "java-c911",
          "text": "All types erased",
          "isCorrect": false
        },
        {
          "id": "java-c912",
          "text": "Performance issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q229",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is PECS principle?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c913",
          "text": "Producer Extends, Consumer Super for wildcard usage",
          "isCorrect": true
        },
        {
          "id": "java-c914",
          "text": "Performance principle",
          "isCorrect": false
        },
        {
          "id": "java-c915",
          "text": "Concurrency principle",
          "isCorrect": false
        },
        {
          "id": "java-c916",
          "text": "Design pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q230",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the diamond operator <>?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c917",
          "text": "Type inference for generics in Java 7+",
          "isCorrect": true
        },
        {
          "id": "java-c918",
          "text": "Multiple inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c919",
          "text": "Operator overloading",
          "isCorrect": false
        },
        {
          "id": "java-c920",
          "text": "Pattern matching",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q231",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of ClassLoader.loadClass() vs Class.forName()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c921",
          "text": "loadClass: lazy, Class.forName: initializes static blocks",
          "isCorrect": true
        },
        {
          "id": "java-c922",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c923",
          "text": "loadClass is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c924",
          "text": "Class.forName is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q232",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the types of class loaders?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c925",
          "text": "Bootstrap",
          "isCorrect": true
        },
        {
          "id": "java-c926",
          "text": "Extension/Platform",
          "isCorrect": true
        },
        {
          "id": "java-c927",
          "text": "Application",
          "isCorrect": true
        },
        {
          "id": "java-c928",
          "text": "Runtime",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q233",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is type erasure limitation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c929",
          "text": "Cannot create generic array, runtime type info lost",
          "isCorrect": true
        },
        {
          "id": "java-c930",
          "text": "Generics don't work",
          "isCorrect": false
        },
        {
          "id": "java-c931",
          "text": "All types erased",
          "isCorrect": false
        },
        {
          "id": "java-c932",
          "text": "Performance issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q234",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is PECS principle?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c933",
          "text": "Producer Extends, Consumer Super for wildcard usage",
          "isCorrect": true
        },
        {
          "id": "java-c934",
          "text": "Performance principle",
          "isCorrect": false
        },
        {
          "id": "java-c935",
          "text": "Concurrency principle",
          "isCorrect": false
        },
        {
          "id": "java-c936",
          "text": "Design pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q235",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the diamond operator <>?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c937",
          "text": "Type inference for generics in Java 7+",
          "isCorrect": true
        },
        {
          "id": "java-c938",
          "text": "Multiple inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c939",
          "text": "Operator overloading",
          "isCorrect": false
        },
        {
          "id": "java-c940",
          "text": "Pattern matching",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q236",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of ClassLoader.loadClass() vs Class.forName()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c941",
          "text": "loadClass: lazy, Class.forName: initializes static blocks",
          "isCorrect": true
        },
        {
          "id": "java-c942",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c943",
          "text": "loadClass is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c944",
          "text": "Class.forName is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q237",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the types of class loaders?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c945",
          "text": "Bootstrap",
          "isCorrect": true
        },
        {
          "id": "java-c946",
          "text": "Extension/Platform",
          "isCorrect": true
        },
        {
          "id": "java-c947",
          "text": "Application",
          "isCorrect": true
        },
        {
          "id": "java-c948",
          "text": "Runtime",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q238",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is type erasure limitation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c949",
          "text": "Cannot create generic array, runtime type info lost",
          "isCorrect": true
        },
        {
          "id": "java-c950",
          "text": "Generics don't work",
          "isCorrect": false
        },
        {
          "id": "java-c951",
          "text": "All types erased",
          "isCorrect": false
        },
        {
          "id": "java-c952",
          "text": "Performance issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q239",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is PECS principle?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c953",
          "text": "Producer Extends, Consumer Super for wildcard usage",
          "isCorrect": true
        },
        {
          "id": "java-c954",
          "text": "Performance principle",
          "isCorrect": false
        },
        {
          "id": "java-c955",
          "text": "Concurrency principle",
          "isCorrect": false
        },
        {
          "id": "java-c956",
          "text": "Design pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q240",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the diamond operator <>?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c957",
          "text": "Type inference for generics in Java 7+",
          "isCorrect": true
        },
        {
          "id": "java-c958",
          "text": "Multiple inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c959",
          "text": "Operator overloading",
          "isCorrect": false
        },
        {
          "id": "java-c960",
          "text": "Pattern matching",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q241",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of ClassLoader.loadClass() vs Class.forName()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c961",
          "text": "loadClass: lazy, Class.forName: initializes static blocks",
          "isCorrect": true
        },
        {
          "id": "java-c962",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c963",
          "text": "loadClass is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c964",
          "text": "Class.forName is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q242",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the types of class loaders?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c965",
          "text": "Bootstrap",
          "isCorrect": true
        },
        {
          "id": "java-c966",
          "text": "Extension/Platform",
          "isCorrect": true
        },
        {
          "id": "java-c967",
          "text": "Application",
          "isCorrect": true
        },
        {
          "id": "java-c968",
          "text": "Runtime",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q243",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is type erasure limitation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c969",
          "text": "Cannot create generic array, runtime type info lost",
          "isCorrect": true
        },
        {
          "id": "java-c970",
          "text": "Generics don't work",
          "isCorrect": false
        },
        {
          "id": "java-c971",
          "text": "All types erased",
          "isCorrect": false
        },
        {
          "id": "java-c972",
          "text": "Performance issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q244",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is PECS principle?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c973",
          "text": "Producer Extends, Consumer Super for wildcard usage",
          "isCorrect": true
        },
        {
          "id": "java-c974",
          "text": "Performance principle",
          "isCorrect": false
        },
        {
          "id": "java-c975",
          "text": "Concurrency principle",
          "isCorrect": false
        },
        {
          "id": "java-c976",
          "text": "Design pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q245",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the diamond operator <>?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c977",
          "text": "Type inference for generics in Java 7+",
          "isCorrect": true
        },
        {
          "id": "java-c978",
          "text": "Multiple inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c979",
          "text": "Operator overloading",
          "isCorrect": false
        },
        {
          "id": "java-c980",
          "text": "Pattern matching",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q246",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of ClassLoader.loadClass() vs Class.forName()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c981",
          "text": "loadClass: lazy, Class.forName: initializes static blocks",
          "isCorrect": true
        },
        {
          "id": "java-c982",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c983",
          "text": "loadClass is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c984",
          "text": "Class.forName is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q247",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the types of class loaders?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c985",
          "text": "Bootstrap",
          "isCorrect": true
        },
        {
          "id": "java-c986",
          "text": "Extension/Platform",
          "isCorrect": true
        },
        {
          "id": "java-c987",
          "text": "Application",
          "isCorrect": true
        },
        {
          "id": "java-c988",
          "text": "Runtime",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q248",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is type erasure limitation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c989",
          "text": "Cannot create generic array, runtime type info lost",
          "isCorrect": true
        },
        {
          "id": "java-c990",
          "text": "Generics don't work",
          "isCorrect": false
        },
        {
          "id": "java-c991",
          "text": "All types erased",
          "isCorrect": false
        },
        {
          "id": "java-c992",
          "text": "Performance issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q249",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is PECS principle?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c993",
          "text": "Producer Extends, Consumer Super for wildcard usage",
          "isCorrect": true
        },
        {
          "id": "java-c994",
          "text": "Performance principle",
          "isCorrect": false
        },
        {
          "id": "java-c995",
          "text": "Concurrency principle",
          "isCorrect": false
        },
        {
          "id": "java-c996",
          "text": "Design pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q250",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the diamond operator <>?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c997",
          "text": "Type inference for generics in Java 7+",
          "isCorrect": true
        },
        {
          "id": "java-c998",
          "text": "Multiple inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c999",
          "text": "Operator overloading",
          "isCorrect": false
        },
        {
          "id": "java-c1000",
          "text": "Pattern matching",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q251",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of ClassLoader.loadClass() vs Class.forName()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1001",
          "text": "loadClass: lazy, Class.forName: initializes static blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1002",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1003",
          "text": "loadClass is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1004",
          "text": "Class.forName is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q252",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the types of class loaders?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1005",
          "text": "Bootstrap",
          "isCorrect": true
        },
        {
          "id": "java-c1006",
          "text": "Extension/Platform",
          "isCorrect": true
        },
        {
          "id": "java-c1007",
          "text": "Application",
          "isCorrect": true
        },
        {
          "id": "java-c1008",
          "text": "Runtime",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q253",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is type erasure limitation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1009",
          "text": "Cannot create generic array, runtime type info lost",
          "isCorrect": true
        },
        {
          "id": "java-c1010",
          "text": "Generics don't work",
          "isCorrect": false
        },
        {
          "id": "java-c1011",
          "text": "All types erased",
          "isCorrect": false
        },
        {
          "id": "java-c1012",
          "text": "Performance issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q254",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is PECS principle?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1013",
          "text": "Producer Extends, Consumer Super for wildcard usage",
          "isCorrect": true
        },
        {
          "id": "java-c1014",
          "text": "Performance principle",
          "isCorrect": false
        },
        {
          "id": "java-c1015",
          "text": "Concurrency principle",
          "isCorrect": false
        },
        {
          "id": "java-c1016",
          "text": "Design pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q255",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the diamond operator <>?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1017",
          "text": "Type inference for generics in Java 7+",
          "isCorrect": true
        },
        {
          "id": "java-c1018",
          "text": "Multiple inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c1019",
          "text": "Operator overloading",
          "isCorrect": false
        },
        {
          "id": "java-c1020",
          "text": "Pattern matching",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q256",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of ClassLoader.loadClass() vs Class.forName()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1021",
          "text": "loadClass: lazy, Class.forName: initializes static blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1022",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1023",
          "text": "loadClass is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1024",
          "text": "Class.forName is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q257",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the types of class loaders?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1025",
          "text": "Bootstrap",
          "isCorrect": true
        },
        {
          "id": "java-c1026",
          "text": "Extension/Platform",
          "isCorrect": true
        },
        {
          "id": "java-c1027",
          "text": "Application",
          "isCorrect": true
        },
        {
          "id": "java-c1028",
          "text": "Runtime",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q258",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is type erasure limitation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1029",
          "text": "Cannot create generic array, runtime type info lost",
          "isCorrect": true
        },
        {
          "id": "java-c1030",
          "text": "Generics don't work",
          "isCorrect": false
        },
        {
          "id": "java-c1031",
          "text": "All types erased",
          "isCorrect": false
        },
        {
          "id": "java-c1032",
          "text": "Performance issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q259",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is PECS principle?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1033",
          "text": "Producer Extends, Consumer Super for wildcard usage",
          "isCorrect": true
        },
        {
          "id": "java-c1034",
          "text": "Performance principle",
          "isCorrect": false
        },
        {
          "id": "java-c1035",
          "text": "Concurrency principle",
          "isCorrect": false
        },
        {
          "id": "java-c1036",
          "text": "Design pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q260",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the diamond operator <>?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1037",
          "text": "Type inference for generics in Java 7+",
          "isCorrect": true
        },
        {
          "id": "java-c1038",
          "text": "Multiple inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c1039",
          "text": "Operator overloading",
          "isCorrect": false
        },
        {
          "id": "java-c1040",
          "text": "Pattern matching",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q261",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of ClassLoader.loadClass() vs Class.forName()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1041",
          "text": "loadClass: lazy, Class.forName: initializes static blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1042",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1043",
          "text": "loadClass is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1044",
          "text": "Class.forName is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q262",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the types of class loaders?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1045",
          "text": "Bootstrap",
          "isCorrect": true
        },
        {
          "id": "java-c1046",
          "text": "Extension/Platform",
          "isCorrect": true
        },
        {
          "id": "java-c1047",
          "text": "Application",
          "isCorrect": true
        },
        {
          "id": "java-c1048",
          "text": "Runtime",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q263",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is type erasure limitation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1049",
          "text": "Cannot create generic array, runtime type info lost",
          "isCorrect": true
        },
        {
          "id": "java-c1050",
          "text": "Generics don't work",
          "isCorrect": false
        },
        {
          "id": "java-c1051",
          "text": "All types erased",
          "isCorrect": false
        },
        {
          "id": "java-c1052",
          "text": "Performance issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q264",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is PECS principle?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1053",
          "text": "Producer Extends, Consumer Super for wildcard usage",
          "isCorrect": true
        },
        {
          "id": "java-c1054",
          "text": "Performance principle",
          "isCorrect": false
        },
        {
          "id": "java-c1055",
          "text": "Concurrency principle",
          "isCorrect": false
        },
        {
          "id": "java-c1056",
          "text": "Design pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q265",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the diamond operator <>?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1057",
          "text": "Type inference for generics in Java 7+",
          "isCorrect": true
        },
        {
          "id": "java-c1058",
          "text": "Multiple inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c1059",
          "text": "Operator overloading",
          "isCorrect": false
        },
        {
          "id": "java-c1060",
          "text": "Pattern matching",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q266",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of ClassLoader.loadClass() vs Class.forName()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1061",
          "text": "loadClass: lazy, Class.forName: initializes static blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1062",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1063",
          "text": "loadClass is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1064",
          "text": "Class.forName is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q267",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the types of class loaders?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1065",
          "text": "Bootstrap",
          "isCorrect": true
        },
        {
          "id": "java-c1066",
          "text": "Extension/Platform",
          "isCorrect": true
        },
        {
          "id": "java-c1067",
          "text": "Application",
          "isCorrect": true
        },
        {
          "id": "java-c1068",
          "text": "Runtime",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q268",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is type erasure limitation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1069",
          "text": "Cannot create generic array, runtime type info lost",
          "isCorrect": true
        },
        {
          "id": "java-c1070",
          "text": "Generics don't work",
          "isCorrect": false
        },
        {
          "id": "java-c1071",
          "text": "All types erased",
          "isCorrect": false
        },
        {
          "id": "java-c1072",
          "text": "Performance issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q269",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is PECS principle?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1073",
          "text": "Producer Extends, Consumer Super for wildcard usage",
          "isCorrect": true
        },
        {
          "id": "java-c1074",
          "text": "Performance principle",
          "isCorrect": false
        },
        {
          "id": "java-c1075",
          "text": "Concurrency principle",
          "isCorrect": false
        },
        {
          "id": "java-c1076",
          "text": "Design pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q270",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the diamond operator <>?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1077",
          "text": "Type inference for generics in Java 7+",
          "isCorrect": true
        },
        {
          "id": "java-c1078",
          "text": "Multiple inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c1079",
          "text": "Operator overloading",
          "isCorrect": false
        },
        {
          "id": "java-c1080",
          "text": "Pattern matching",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q271",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of ClassLoader.loadClass() vs Class.forName()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1081",
          "text": "loadClass: lazy, Class.forName: initializes static blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1082",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1083",
          "text": "loadClass is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1084",
          "text": "Class.forName is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q272",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the types of class loaders?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1085",
          "text": "Bootstrap",
          "isCorrect": true
        },
        {
          "id": "java-c1086",
          "text": "Extension/Platform",
          "isCorrect": true
        },
        {
          "id": "java-c1087",
          "text": "Application",
          "isCorrect": true
        },
        {
          "id": "java-c1088",
          "text": "Runtime",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q273",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is type erasure limitation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1089",
          "text": "Cannot create generic array, runtime type info lost",
          "isCorrect": true
        },
        {
          "id": "java-c1090",
          "text": "Generics don't work",
          "isCorrect": false
        },
        {
          "id": "java-c1091",
          "text": "All types erased",
          "isCorrect": false
        },
        {
          "id": "java-c1092",
          "text": "Performance issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q274",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is PECS principle?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1093",
          "text": "Producer Extends, Consumer Super for wildcard usage",
          "isCorrect": true
        },
        {
          "id": "java-c1094",
          "text": "Performance principle",
          "isCorrect": false
        },
        {
          "id": "java-c1095",
          "text": "Concurrency principle",
          "isCorrect": false
        },
        {
          "id": "java-c1096",
          "text": "Design pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q275",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the diamond operator <>?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1097",
          "text": "Type inference for generics in Java 7+",
          "isCorrect": true
        },
        {
          "id": "java-c1098",
          "text": "Multiple inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c1099",
          "text": "Operator overloading",
          "isCorrect": false
        },
        {
          "id": "java-c1100",
          "text": "Pattern matching",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q276",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of ClassLoader.loadClass() vs Class.forName()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1101",
          "text": "loadClass: lazy, Class.forName: initializes static blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1102",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1103",
          "text": "loadClass is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1104",
          "text": "Class.forName is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q277",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the types of class loaders?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1105",
          "text": "Bootstrap",
          "isCorrect": true
        },
        {
          "id": "java-c1106",
          "text": "Extension/Platform",
          "isCorrect": true
        },
        {
          "id": "java-c1107",
          "text": "Application",
          "isCorrect": true
        },
        {
          "id": "java-c1108",
          "text": "Runtime",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q278",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is type erasure limitation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1109",
          "text": "Cannot create generic array, runtime type info lost",
          "isCorrect": true
        },
        {
          "id": "java-c1110",
          "text": "Generics don't work",
          "isCorrect": false
        },
        {
          "id": "java-c1111",
          "text": "All types erased",
          "isCorrect": false
        },
        {
          "id": "java-c1112",
          "text": "Performance issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q279",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is PECS principle?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1113",
          "text": "Producer Extends, Consumer Super for wildcard usage",
          "isCorrect": true
        },
        {
          "id": "java-c1114",
          "text": "Performance principle",
          "isCorrect": false
        },
        {
          "id": "java-c1115",
          "text": "Concurrency principle",
          "isCorrect": false
        },
        {
          "id": "java-c1116",
          "text": "Design pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q280",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the diamond operator <>?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1117",
          "text": "Type inference for generics in Java 7+",
          "isCorrect": true
        },
        {
          "id": "java-c1118",
          "text": "Multiple inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c1119",
          "text": "Operator overloading",
          "isCorrect": false
        },
        {
          "id": "java-c1120",
          "text": "Pattern matching",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q281",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of ClassLoader.loadClass() vs Class.forName()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1121",
          "text": "loadClass: lazy, Class.forName: initializes static blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1122",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1123",
          "text": "loadClass is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1124",
          "text": "Class.forName is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q282",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the types of class loaders?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1125",
          "text": "Bootstrap",
          "isCorrect": true
        },
        {
          "id": "java-c1126",
          "text": "Extension/Platform",
          "isCorrect": true
        },
        {
          "id": "java-c1127",
          "text": "Application",
          "isCorrect": true
        },
        {
          "id": "java-c1128",
          "text": "Runtime",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q283",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is type erasure limitation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1129",
          "text": "Cannot create generic array, runtime type info lost",
          "isCorrect": true
        },
        {
          "id": "java-c1130",
          "text": "Generics don't work",
          "isCorrect": false
        },
        {
          "id": "java-c1131",
          "text": "All types erased",
          "isCorrect": false
        },
        {
          "id": "java-c1132",
          "text": "Performance issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q284",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is PECS principle?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1133",
          "text": "Producer Extends, Consumer Super for wildcard usage",
          "isCorrect": true
        },
        {
          "id": "java-c1134",
          "text": "Performance principle",
          "isCorrect": false
        },
        {
          "id": "java-c1135",
          "text": "Concurrency principle",
          "isCorrect": false
        },
        {
          "id": "java-c1136",
          "text": "Design pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q285",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the diamond operator <>?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1137",
          "text": "Type inference for generics in Java 7+",
          "isCorrect": true
        },
        {
          "id": "java-c1138",
          "text": "Multiple inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c1139",
          "text": "Operator overloading",
          "isCorrect": false
        },
        {
          "id": "java-c1140",
          "text": "Pattern matching",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q286",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of ClassLoader.loadClass() vs Class.forName()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1141",
          "text": "loadClass: lazy, Class.forName: initializes static blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1142",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1143",
          "text": "loadClass is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1144",
          "text": "Class.forName is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q287",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the types of class loaders?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1145",
          "text": "Bootstrap",
          "isCorrect": true
        },
        {
          "id": "java-c1146",
          "text": "Extension/Platform",
          "isCorrect": true
        },
        {
          "id": "java-c1147",
          "text": "Application",
          "isCorrect": true
        },
        {
          "id": "java-c1148",
          "text": "Runtime",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q288",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is type erasure limitation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1149",
          "text": "Cannot create generic array, runtime type info lost",
          "isCorrect": true
        },
        {
          "id": "java-c1150",
          "text": "Generics don't work",
          "isCorrect": false
        },
        {
          "id": "java-c1151",
          "text": "All types erased",
          "isCorrect": false
        },
        {
          "id": "java-c1152",
          "text": "Performance issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q289",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is PECS principle?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1153",
          "text": "Producer Extends, Consumer Super for wildcard usage",
          "isCorrect": true
        },
        {
          "id": "java-c1154",
          "text": "Performance principle",
          "isCorrect": false
        },
        {
          "id": "java-c1155",
          "text": "Concurrency principle",
          "isCorrect": false
        },
        {
          "id": "java-c1156",
          "text": "Design pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q290",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the diamond operator <>?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1157",
          "text": "Type inference for generics in Java 7+",
          "isCorrect": true
        },
        {
          "id": "java-c1158",
          "text": "Multiple inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c1159",
          "text": "Operator overloading",
          "isCorrect": false
        },
        {
          "id": "java-c1160",
          "text": "Pattern matching",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q291",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of ClassLoader.loadClass() vs Class.forName()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1161",
          "text": "loadClass: lazy, Class.forName: initializes static blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1162",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1163",
          "text": "loadClass is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1164",
          "text": "Class.forName is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q292",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the types of class loaders?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1165",
          "text": "Bootstrap",
          "isCorrect": true
        },
        {
          "id": "java-c1166",
          "text": "Extension/Platform",
          "isCorrect": true
        },
        {
          "id": "java-c1167",
          "text": "Application",
          "isCorrect": true
        },
        {
          "id": "java-c1168",
          "text": "Runtime",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q293",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is type erasure limitation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1169",
          "text": "Cannot create generic array, runtime type info lost",
          "isCorrect": true
        },
        {
          "id": "java-c1170",
          "text": "Generics don't work",
          "isCorrect": false
        },
        {
          "id": "java-c1171",
          "text": "All types erased",
          "isCorrect": false
        },
        {
          "id": "java-c1172",
          "text": "Performance issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q294",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is PECS principle?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1173",
          "text": "Producer Extends, Consumer Super for wildcard usage",
          "isCorrect": true
        },
        {
          "id": "java-c1174",
          "text": "Performance principle",
          "isCorrect": false
        },
        {
          "id": "java-c1175",
          "text": "Concurrency principle",
          "isCorrect": false
        },
        {
          "id": "java-c1176",
          "text": "Design pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q295",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the diamond operator <>?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1177",
          "text": "Type inference for generics in Java 7+",
          "isCorrect": true
        },
        {
          "id": "java-c1178",
          "text": "Multiple inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c1179",
          "text": "Operator overloading",
          "isCorrect": false
        },
        {
          "id": "java-c1180",
          "text": "Pattern matching",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q296",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of ClassLoader.loadClass() vs Class.forName()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1181",
          "text": "loadClass: lazy, Class.forName: initializes static blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1182",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1183",
          "text": "loadClass is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1184",
          "text": "Class.forName is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q297",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the types of class loaders?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1185",
          "text": "Bootstrap",
          "isCorrect": true
        },
        {
          "id": "java-c1186",
          "text": "Extension/Platform",
          "isCorrect": true
        },
        {
          "id": "java-c1187",
          "text": "Application",
          "isCorrect": true
        },
        {
          "id": "java-c1188",
          "text": "Runtime",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q298",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is type erasure limitation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1189",
          "text": "Cannot create generic array, runtime type info lost",
          "isCorrect": true
        },
        {
          "id": "java-c1190",
          "text": "Generics don't work",
          "isCorrect": false
        },
        {
          "id": "java-c1191",
          "text": "All types erased",
          "isCorrect": false
        },
        {
          "id": "java-c1192",
          "text": "Performance issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q299",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is PECS principle?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1193",
          "text": "Producer Extends, Consumer Super for wildcard usage",
          "isCorrect": true
        },
        {
          "id": "java-c1194",
          "text": "Performance principle",
          "isCorrect": false
        },
        {
          "id": "java-c1195",
          "text": "Concurrency principle",
          "isCorrect": false
        },
        {
          "id": "java-c1196",
          "text": "Design pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q300",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the diamond operator <>?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1197",
          "text": "Type inference for generics in Java 7+",
          "isCorrect": true
        },
        {
          "id": "java-c1198",
          "text": "Multiple inheritance",
          "isCorrect": false
        },
        {
          "id": "java-c1199",
          "text": "Operator overloading",
          "isCorrect": false
        },
        {
          "id": "java-c1200",
          "text": "Pattern matching",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q301",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the Java Memory Model (JMM)?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1201",
          "text": "Specifies how threads interact through memory, visibility rules",
          "isCorrect": true
        },
        {
          "id": "java-c1202",
          "text": "Memory allocation model",
          "isCorrect": false
        },
        {
          "id": "java-c1203",
          "text": "GC model",
          "isCorrect": false
        },
        {
          "id": "java-c1204",
          "text": "Heap structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q302",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are happens-before relationships?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1205",
          "text": "Synchronized block entry/exit",
          "isCorrect": true
        },
        {
          "id": "java-c1206",
          "text": "Volatile variable write/read",
          "isCorrect": true
        },
        {
          "id": "java-c1207",
          "text": "Thread start/join",
          "isCorrect": true
        },
        {
          "id": "java-c1208",
          "text": "Regular field access",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q303",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the double-checked locking problem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1209",
          "text": "Broken without volatile due to reordering, partial construction",
          "isCorrect": true
        },
        {
          "id": "java-c1210",
          "text": "Always works correctly",
          "isCorrect": false
        },
        {
          "id": "java-c1211",
          "text": "Performance issue only",
          "isCorrect": false
        },
        {
          "id": "java-c1212",
          "text": "Threading issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q304",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is lock coarsening?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1213",
          "text": "JVM optimization merging adjacent synchronized blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1214",
          "text": "Lock expansion",
          "isCorrect": false
        },
        {
          "id": "java-c1215",
          "text": "Lock degradation",
          "isCorrect": false
        },
        {
          "id": "java-c1216",
          "text": "Lock splitting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q305",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is biased locking?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1217",
          "text": "Optimization for locks acquired by same thread repeatedly",
          "isCorrect": true
        },
        {
          "id": "java-c1218",
          "text": "Lock preference",
          "isCorrect": false
        },
        {
          "id": "java-c1219",
          "text": "Unfair locking",
          "isCorrect": false
        },
        {
          "id": "java-c1220",
          "text": "Lock priority",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q306",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CAS operation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1221",
          "text": "Compare-And-Swap, atomic lock-free operation",
          "isCorrect": true
        },
        {
          "id": "java-c1222",
          "text": "Conditional Assignment",
          "isCorrect": false
        },
        {
          "id": "java-c1223",
          "text": "Cache Synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1224",
          "text": "Concurrent Addressing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q307",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the benefits of ReentrantLock over synchronized?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1225",
          "text": "tryLock() with timeout",
          "isCorrect": true
        },
        {
          "id": "java-c1226",
          "text": "lockInterruptibly()",
          "isCorrect": true
        },
        {
          "id": "java-c1227",
          "text": "Multiple condition variables",
          "isCorrect": true
        },
        {
          "id": "java-c1228",
          "text": "Always faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q308",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Phaser?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1229",
          "text": "Flexible synchronization barrier for phases, like CyclicBarrier but reusable",
          "isCorrect": true
        },
        {
          "id": "java-c1230",
          "text": "Thread phase manager",
          "isCorrect": false
        },
        {
          "id": "java-c1231",
          "text": "Performance profiler",
          "isCorrect": false
        },
        {
          "id": "java-c1232",
          "text": "Resource allocator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q309",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Semaphore used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1233",
          "text": "Controls access to resource with permit count",
          "isCorrect": true
        },
        {
          "id": "java-c1234",
          "text": "Signal handling",
          "isCorrect": false
        },
        {
          "id": "java-c1235",
          "text": "Memory synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1236",
          "text": "Thread communication",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q310",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between await() and wait()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1237",
          "text": "await: Condition; wait: Object monitor",
          "isCorrect": true
        },
        {
          "id": "java-c1238",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1239",
          "text": "await is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1240",
          "text": "wait is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q311",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the Java Memory Model (JMM)?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1241",
          "text": "Specifies how threads interact through memory, visibility rules",
          "isCorrect": true
        },
        {
          "id": "java-c1242",
          "text": "Memory allocation model",
          "isCorrect": false
        },
        {
          "id": "java-c1243",
          "text": "GC model",
          "isCorrect": false
        },
        {
          "id": "java-c1244",
          "text": "Heap structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q312",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are happens-before relationships?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1245",
          "text": "Synchronized block entry/exit",
          "isCorrect": true
        },
        {
          "id": "java-c1246",
          "text": "Volatile variable write/read",
          "isCorrect": true
        },
        {
          "id": "java-c1247",
          "text": "Thread start/join",
          "isCorrect": true
        },
        {
          "id": "java-c1248",
          "text": "Regular field access",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q313",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the double-checked locking problem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1249",
          "text": "Broken without volatile due to reordering, partial construction",
          "isCorrect": true
        },
        {
          "id": "java-c1250",
          "text": "Always works correctly",
          "isCorrect": false
        },
        {
          "id": "java-c1251",
          "text": "Performance issue only",
          "isCorrect": false
        },
        {
          "id": "java-c1252",
          "text": "Threading issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q314",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is lock coarsening?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1253",
          "text": "JVM optimization merging adjacent synchronized blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1254",
          "text": "Lock expansion",
          "isCorrect": false
        },
        {
          "id": "java-c1255",
          "text": "Lock degradation",
          "isCorrect": false
        },
        {
          "id": "java-c1256",
          "text": "Lock splitting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q315",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is biased locking?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1257",
          "text": "Optimization for locks acquired by same thread repeatedly",
          "isCorrect": true
        },
        {
          "id": "java-c1258",
          "text": "Lock preference",
          "isCorrect": false
        },
        {
          "id": "java-c1259",
          "text": "Unfair locking",
          "isCorrect": false
        },
        {
          "id": "java-c1260",
          "text": "Lock priority",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q316",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CAS operation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1261",
          "text": "Compare-And-Swap, atomic lock-free operation",
          "isCorrect": true
        },
        {
          "id": "java-c1262",
          "text": "Conditional Assignment",
          "isCorrect": false
        },
        {
          "id": "java-c1263",
          "text": "Cache Synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1264",
          "text": "Concurrent Addressing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q317",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the benefits of ReentrantLock over synchronized?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1265",
          "text": "tryLock() with timeout",
          "isCorrect": true
        },
        {
          "id": "java-c1266",
          "text": "lockInterruptibly()",
          "isCorrect": true
        },
        {
          "id": "java-c1267",
          "text": "Multiple condition variables",
          "isCorrect": true
        },
        {
          "id": "java-c1268",
          "text": "Always faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q318",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Phaser?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1269",
          "text": "Flexible synchronization barrier for phases, like CyclicBarrier but reusable",
          "isCorrect": true
        },
        {
          "id": "java-c1270",
          "text": "Thread phase manager",
          "isCorrect": false
        },
        {
          "id": "java-c1271",
          "text": "Performance profiler",
          "isCorrect": false
        },
        {
          "id": "java-c1272",
          "text": "Resource allocator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q319",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Semaphore used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1273",
          "text": "Controls access to resource with permit count",
          "isCorrect": true
        },
        {
          "id": "java-c1274",
          "text": "Signal handling",
          "isCorrect": false
        },
        {
          "id": "java-c1275",
          "text": "Memory synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1276",
          "text": "Thread communication",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q320",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between await() and wait()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1277",
          "text": "await: Condition; wait: Object monitor",
          "isCorrect": true
        },
        {
          "id": "java-c1278",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1279",
          "text": "await is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1280",
          "text": "wait is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q321",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the Java Memory Model (JMM)?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1281",
          "text": "Specifies how threads interact through memory, visibility rules",
          "isCorrect": true
        },
        {
          "id": "java-c1282",
          "text": "Memory allocation model",
          "isCorrect": false
        },
        {
          "id": "java-c1283",
          "text": "GC model",
          "isCorrect": false
        },
        {
          "id": "java-c1284",
          "text": "Heap structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q322",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are happens-before relationships?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1285",
          "text": "Synchronized block entry/exit",
          "isCorrect": true
        },
        {
          "id": "java-c1286",
          "text": "Volatile variable write/read",
          "isCorrect": true
        },
        {
          "id": "java-c1287",
          "text": "Thread start/join",
          "isCorrect": true
        },
        {
          "id": "java-c1288",
          "text": "Regular field access",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q323",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the double-checked locking problem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1289",
          "text": "Broken without volatile due to reordering, partial construction",
          "isCorrect": true
        },
        {
          "id": "java-c1290",
          "text": "Always works correctly",
          "isCorrect": false
        },
        {
          "id": "java-c1291",
          "text": "Performance issue only",
          "isCorrect": false
        },
        {
          "id": "java-c1292",
          "text": "Threading issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q324",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is lock coarsening?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1293",
          "text": "JVM optimization merging adjacent synchronized blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1294",
          "text": "Lock expansion",
          "isCorrect": false
        },
        {
          "id": "java-c1295",
          "text": "Lock degradation",
          "isCorrect": false
        },
        {
          "id": "java-c1296",
          "text": "Lock splitting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q325",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is biased locking?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1297",
          "text": "Optimization for locks acquired by same thread repeatedly",
          "isCorrect": true
        },
        {
          "id": "java-c1298",
          "text": "Lock preference",
          "isCorrect": false
        },
        {
          "id": "java-c1299",
          "text": "Unfair locking",
          "isCorrect": false
        },
        {
          "id": "java-c1300",
          "text": "Lock priority",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q326",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CAS operation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1301",
          "text": "Compare-And-Swap, atomic lock-free operation",
          "isCorrect": true
        },
        {
          "id": "java-c1302",
          "text": "Conditional Assignment",
          "isCorrect": false
        },
        {
          "id": "java-c1303",
          "text": "Cache Synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1304",
          "text": "Concurrent Addressing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q327",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the benefits of ReentrantLock over synchronized?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1305",
          "text": "tryLock() with timeout",
          "isCorrect": true
        },
        {
          "id": "java-c1306",
          "text": "lockInterruptibly()",
          "isCorrect": true
        },
        {
          "id": "java-c1307",
          "text": "Multiple condition variables",
          "isCorrect": true
        },
        {
          "id": "java-c1308",
          "text": "Always faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q328",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Phaser?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1309",
          "text": "Flexible synchronization barrier for phases, like CyclicBarrier but reusable",
          "isCorrect": true
        },
        {
          "id": "java-c1310",
          "text": "Thread phase manager",
          "isCorrect": false
        },
        {
          "id": "java-c1311",
          "text": "Performance profiler",
          "isCorrect": false
        },
        {
          "id": "java-c1312",
          "text": "Resource allocator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q329",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Semaphore used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1313",
          "text": "Controls access to resource with permit count",
          "isCorrect": true
        },
        {
          "id": "java-c1314",
          "text": "Signal handling",
          "isCorrect": false
        },
        {
          "id": "java-c1315",
          "text": "Memory synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1316",
          "text": "Thread communication",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q330",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between await() and wait()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1317",
          "text": "await: Condition; wait: Object monitor",
          "isCorrect": true
        },
        {
          "id": "java-c1318",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1319",
          "text": "await is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1320",
          "text": "wait is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q331",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the Java Memory Model (JMM)?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1321",
          "text": "Specifies how threads interact through memory, visibility rules",
          "isCorrect": true
        },
        {
          "id": "java-c1322",
          "text": "Memory allocation model",
          "isCorrect": false
        },
        {
          "id": "java-c1323",
          "text": "GC model",
          "isCorrect": false
        },
        {
          "id": "java-c1324",
          "text": "Heap structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q332",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are happens-before relationships?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1325",
          "text": "Synchronized block entry/exit",
          "isCorrect": true
        },
        {
          "id": "java-c1326",
          "text": "Volatile variable write/read",
          "isCorrect": true
        },
        {
          "id": "java-c1327",
          "text": "Thread start/join",
          "isCorrect": true
        },
        {
          "id": "java-c1328",
          "text": "Regular field access",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q333",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the double-checked locking problem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1329",
          "text": "Broken without volatile due to reordering, partial construction",
          "isCorrect": true
        },
        {
          "id": "java-c1330",
          "text": "Always works correctly",
          "isCorrect": false
        },
        {
          "id": "java-c1331",
          "text": "Performance issue only",
          "isCorrect": false
        },
        {
          "id": "java-c1332",
          "text": "Threading issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q334",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is lock coarsening?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1333",
          "text": "JVM optimization merging adjacent synchronized blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1334",
          "text": "Lock expansion",
          "isCorrect": false
        },
        {
          "id": "java-c1335",
          "text": "Lock degradation",
          "isCorrect": false
        },
        {
          "id": "java-c1336",
          "text": "Lock splitting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q335",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is biased locking?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1337",
          "text": "Optimization for locks acquired by same thread repeatedly",
          "isCorrect": true
        },
        {
          "id": "java-c1338",
          "text": "Lock preference",
          "isCorrect": false
        },
        {
          "id": "java-c1339",
          "text": "Unfair locking",
          "isCorrect": false
        },
        {
          "id": "java-c1340",
          "text": "Lock priority",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q336",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CAS operation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1341",
          "text": "Compare-And-Swap, atomic lock-free operation",
          "isCorrect": true
        },
        {
          "id": "java-c1342",
          "text": "Conditional Assignment",
          "isCorrect": false
        },
        {
          "id": "java-c1343",
          "text": "Cache Synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1344",
          "text": "Concurrent Addressing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q337",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the benefits of ReentrantLock over synchronized?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1345",
          "text": "tryLock() with timeout",
          "isCorrect": true
        },
        {
          "id": "java-c1346",
          "text": "lockInterruptibly()",
          "isCorrect": true
        },
        {
          "id": "java-c1347",
          "text": "Multiple condition variables",
          "isCorrect": true
        },
        {
          "id": "java-c1348",
          "text": "Always faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q338",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Phaser?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1349",
          "text": "Flexible synchronization barrier for phases, like CyclicBarrier but reusable",
          "isCorrect": true
        },
        {
          "id": "java-c1350",
          "text": "Thread phase manager",
          "isCorrect": false
        },
        {
          "id": "java-c1351",
          "text": "Performance profiler",
          "isCorrect": false
        },
        {
          "id": "java-c1352",
          "text": "Resource allocator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q339",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Semaphore used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1353",
          "text": "Controls access to resource with permit count",
          "isCorrect": true
        },
        {
          "id": "java-c1354",
          "text": "Signal handling",
          "isCorrect": false
        },
        {
          "id": "java-c1355",
          "text": "Memory synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1356",
          "text": "Thread communication",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q340",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between await() and wait()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1357",
          "text": "await: Condition; wait: Object monitor",
          "isCorrect": true
        },
        {
          "id": "java-c1358",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1359",
          "text": "await is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1360",
          "text": "wait is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q341",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the Java Memory Model (JMM)?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1361",
          "text": "Specifies how threads interact through memory, visibility rules",
          "isCorrect": true
        },
        {
          "id": "java-c1362",
          "text": "Memory allocation model",
          "isCorrect": false
        },
        {
          "id": "java-c1363",
          "text": "GC model",
          "isCorrect": false
        },
        {
          "id": "java-c1364",
          "text": "Heap structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q342",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are happens-before relationships?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1365",
          "text": "Synchronized block entry/exit",
          "isCorrect": true
        },
        {
          "id": "java-c1366",
          "text": "Volatile variable write/read",
          "isCorrect": true
        },
        {
          "id": "java-c1367",
          "text": "Thread start/join",
          "isCorrect": true
        },
        {
          "id": "java-c1368",
          "text": "Regular field access",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q343",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the double-checked locking problem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1369",
          "text": "Broken without volatile due to reordering, partial construction",
          "isCorrect": true
        },
        {
          "id": "java-c1370",
          "text": "Always works correctly",
          "isCorrect": false
        },
        {
          "id": "java-c1371",
          "text": "Performance issue only",
          "isCorrect": false
        },
        {
          "id": "java-c1372",
          "text": "Threading issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q344",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is lock coarsening?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1373",
          "text": "JVM optimization merging adjacent synchronized blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1374",
          "text": "Lock expansion",
          "isCorrect": false
        },
        {
          "id": "java-c1375",
          "text": "Lock degradation",
          "isCorrect": false
        },
        {
          "id": "java-c1376",
          "text": "Lock splitting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q345",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is biased locking?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1377",
          "text": "Optimization for locks acquired by same thread repeatedly",
          "isCorrect": true
        },
        {
          "id": "java-c1378",
          "text": "Lock preference",
          "isCorrect": false
        },
        {
          "id": "java-c1379",
          "text": "Unfair locking",
          "isCorrect": false
        },
        {
          "id": "java-c1380",
          "text": "Lock priority",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q346",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CAS operation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1381",
          "text": "Compare-And-Swap, atomic lock-free operation",
          "isCorrect": true
        },
        {
          "id": "java-c1382",
          "text": "Conditional Assignment",
          "isCorrect": false
        },
        {
          "id": "java-c1383",
          "text": "Cache Synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1384",
          "text": "Concurrent Addressing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q347",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the benefits of ReentrantLock over synchronized?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1385",
          "text": "tryLock() with timeout",
          "isCorrect": true
        },
        {
          "id": "java-c1386",
          "text": "lockInterruptibly()",
          "isCorrect": true
        },
        {
          "id": "java-c1387",
          "text": "Multiple condition variables",
          "isCorrect": true
        },
        {
          "id": "java-c1388",
          "text": "Always faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q348",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Phaser?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1389",
          "text": "Flexible synchronization barrier for phases, like CyclicBarrier but reusable",
          "isCorrect": true
        },
        {
          "id": "java-c1390",
          "text": "Thread phase manager",
          "isCorrect": false
        },
        {
          "id": "java-c1391",
          "text": "Performance profiler",
          "isCorrect": false
        },
        {
          "id": "java-c1392",
          "text": "Resource allocator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q349",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Semaphore used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1393",
          "text": "Controls access to resource with permit count",
          "isCorrect": true
        },
        {
          "id": "java-c1394",
          "text": "Signal handling",
          "isCorrect": false
        },
        {
          "id": "java-c1395",
          "text": "Memory synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1396",
          "text": "Thread communication",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q350",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between await() and wait()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1397",
          "text": "await: Condition; wait: Object monitor",
          "isCorrect": true
        },
        {
          "id": "java-c1398",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1399",
          "text": "await is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1400",
          "text": "wait is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q351",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the Java Memory Model (JMM)?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1401",
          "text": "Specifies how threads interact through memory, visibility rules",
          "isCorrect": true
        },
        {
          "id": "java-c1402",
          "text": "Memory allocation model",
          "isCorrect": false
        },
        {
          "id": "java-c1403",
          "text": "GC model",
          "isCorrect": false
        },
        {
          "id": "java-c1404",
          "text": "Heap structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q352",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are happens-before relationships?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1405",
          "text": "Synchronized block entry/exit",
          "isCorrect": true
        },
        {
          "id": "java-c1406",
          "text": "Volatile variable write/read",
          "isCorrect": true
        },
        {
          "id": "java-c1407",
          "text": "Thread start/join",
          "isCorrect": true
        },
        {
          "id": "java-c1408",
          "text": "Regular field access",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q353",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the double-checked locking problem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1409",
          "text": "Broken without volatile due to reordering, partial construction",
          "isCorrect": true
        },
        {
          "id": "java-c1410",
          "text": "Always works correctly",
          "isCorrect": false
        },
        {
          "id": "java-c1411",
          "text": "Performance issue only",
          "isCorrect": false
        },
        {
          "id": "java-c1412",
          "text": "Threading issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q354",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is lock coarsening?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1413",
          "text": "JVM optimization merging adjacent synchronized blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1414",
          "text": "Lock expansion",
          "isCorrect": false
        },
        {
          "id": "java-c1415",
          "text": "Lock degradation",
          "isCorrect": false
        },
        {
          "id": "java-c1416",
          "text": "Lock splitting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q355",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is biased locking?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1417",
          "text": "Optimization for locks acquired by same thread repeatedly",
          "isCorrect": true
        },
        {
          "id": "java-c1418",
          "text": "Lock preference",
          "isCorrect": false
        },
        {
          "id": "java-c1419",
          "text": "Unfair locking",
          "isCorrect": false
        },
        {
          "id": "java-c1420",
          "text": "Lock priority",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q356",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CAS operation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1421",
          "text": "Compare-And-Swap, atomic lock-free operation",
          "isCorrect": true
        },
        {
          "id": "java-c1422",
          "text": "Conditional Assignment",
          "isCorrect": false
        },
        {
          "id": "java-c1423",
          "text": "Cache Synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1424",
          "text": "Concurrent Addressing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q357",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the benefits of ReentrantLock over synchronized?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1425",
          "text": "tryLock() with timeout",
          "isCorrect": true
        },
        {
          "id": "java-c1426",
          "text": "lockInterruptibly()",
          "isCorrect": true
        },
        {
          "id": "java-c1427",
          "text": "Multiple condition variables",
          "isCorrect": true
        },
        {
          "id": "java-c1428",
          "text": "Always faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q358",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Phaser?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1429",
          "text": "Flexible synchronization barrier for phases, like CyclicBarrier but reusable",
          "isCorrect": true
        },
        {
          "id": "java-c1430",
          "text": "Thread phase manager",
          "isCorrect": false
        },
        {
          "id": "java-c1431",
          "text": "Performance profiler",
          "isCorrect": false
        },
        {
          "id": "java-c1432",
          "text": "Resource allocator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q359",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Semaphore used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1433",
          "text": "Controls access to resource with permit count",
          "isCorrect": true
        },
        {
          "id": "java-c1434",
          "text": "Signal handling",
          "isCorrect": false
        },
        {
          "id": "java-c1435",
          "text": "Memory synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1436",
          "text": "Thread communication",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q360",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between await() and wait()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1437",
          "text": "await: Condition; wait: Object monitor",
          "isCorrect": true
        },
        {
          "id": "java-c1438",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1439",
          "text": "await is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1440",
          "text": "wait is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q361",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the Java Memory Model (JMM)?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1441",
          "text": "Specifies how threads interact through memory, visibility rules",
          "isCorrect": true
        },
        {
          "id": "java-c1442",
          "text": "Memory allocation model",
          "isCorrect": false
        },
        {
          "id": "java-c1443",
          "text": "GC model",
          "isCorrect": false
        },
        {
          "id": "java-c1444",
          "text": "Heap structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q362",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are happens-before relationships?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1445",
          "text": "Synchronized block entry/exit",
          "isCorrect": true
        },
        {
          "id": "java-c1446",
          "text": "Volatile variable write/read",
          "isCorrect": true
        },
        {
          "id": "java-c1447",
          "text": "Thread start/join",
          "isCorrect": true
        },
        {
          "id": "java-c1448",
          "text": "Regular field access",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q363",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the double-checked locking problem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1449",
          "text": "Broken without volatile due to reordering, partial construction",
          "isCorrect": true
        },
        {
          "id": "java-c1450",
          "text": "Always works correctly",
          "isCorrect": false
        },
        {
          "id": "java-c1451",
          "text": "Performance issue only",
          "isCorrect": false
        },
        {
          "id": "java-c1452",
          "text": "Threading issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q364",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is lock coarsening?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1453",
          "text": "JVM optimization merging adjacent synchronized blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1454",
          "text": "Lock expansion",
          "isCorrect": false
        },
        {
          "id": "java-c1455",
          "text": "Lock degradation",
          "isCorrect": false
        },
        {
          "id": "java-c1456",
          "text": "Lock splitting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q365",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is biased locking?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1457",
          "text": "Optimization for locks acquired by same thread repeatedly",
          "isCorrect": true
        },
        {
          "id": "java-c1458",
          "text": "Lock preference",
          "isCorrect": false
        },
        {
          "id": "java-c1459",
          "text": "Unfair locking",
          "isCorrect": false
        },
        {
          "id": "java-c1460",
          "text": "Lock priority",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q366",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CAS operation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1461",
          "text": "Compare-And-Swap, atomic lock-free operation",
          "isCorrect": true
        },
        {
          "id": "java-c1462",
          "text": "Conditional Assignment",
          "isCorrect": false
        },
        {
          "id": "java-c1463",
          "text": "Cache Synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1464",
          "text": "Concurrent Addressing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q367",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the benefits of ReentrantLock over synchronized?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1465",
          "text": "tryLock() with timeout",
          "isCorrect": true
        },
        {
          "id": "java-c1466",
          "text": "lockInterruptibly()",
          "isCorrect": true
        },
        {
          "id": "java-c1467",
          "text": "Multiple condition variables",
          "isCorrect": true
        },
        {
          "id": "java-c1468",
          "text": "Always faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q368",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Phaser?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1469",
          "text": "Flexible synchronization barrier for phases, like CyclicBarrier but reusable",
          "isCorrect": true
        },
        {
          "id": "java-c1470",
          "text": "Thread phase manager",
          "isCorrect": false
        },
        {
          "id": "java-c1471",
          "text": "Performance profiler",
          "isCorrect": false
        },
        {
          "id": "java-c1472",
          "text": "Resource allocator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q369",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Semaphore used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1473",
          "text": "Controls access to resource with permit count",
          "isCorrect": true
        },
        {
          "id": "java-c1474",
          "text": "Signal handling",
          "isCorrect": false
        },
        {
          "id": "java-c1475",
          "text": "Memory synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1476",
          "text": "Thread communication",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q370",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between await() and wait()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1477",
          "text": "await: Condition; wait: Object monitor",
          "isCorrect": true
        },
        {
          "id": "java-c1478",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1479",
          "text": "await is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1480",
          "text": "wait is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q371",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the Java Memory Model (JMM)?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1481",
          "text": "Specifies how threads interact through memory, visibility rules",
          "isCorrect": true
        },
        {
          "id": "java-c1482",
          "text": "Memory allocation model",
          "isCorrect": false
        },
        {
          "id": "java-c1483",
          "text": "GC model",
          "isCorrect": false
        },
        {
          "id": "java-c1484",
          "text": "Heap structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q372",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are happens-before relationships?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1485",
          "text": "Synchronized block entry/exit",
          "isCorrect": true
        },
        {
          "id": "java-c1486",
          "text": "Volatile variable write/read",
          "isCorrect": true
        },
        {
          "id": "java-c1487",
          "text": "Thread start/join",
          "isCorrect": true
        },
        {
          "id": "java-c1488",
          "text": "Regular field access",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q373",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the double-checked locking problem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1489",
          "text": "Broken without volatile due to reordering, partial construction",
          "isCorrect": true
        },
        {
          "id": "java-c1490",
          "text": "Always works correctly",
          "isCorrect": false
        },
        {
          "id": "java-c1491",
          "text": "Performance issue only",
          "isCorrect": false
        },
        {
          "id": "java-c1492",
          "text": "Threading issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q374",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is lock coarsening?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1493",
          "text": "JVM optimization merging adjacent synchronized blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1494",
          "text": "Lock expansion",
          "isCorrect": false
        },
        {
          "id": "java-c1495",
          "text": "Lock degradation",
          "isCorrect": false
        },
        {
          "id": "java-c1496",
          "text": "Lock splitting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q375",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is biased locking?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1497",
          "text": "Optimization for locks acquired by same thread repeatedly",
          "isCorrect": true
        },
        {
          "id": "java-c1498",
          "text": "Lock preference",
          "isCorrect": false
        },
        {
          "id": "java-c1499",
          "text": "Unfair locking",
          "isCorrect": false
        },
        {
          "id": "java-c1500",
          "text": "Lock priority",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q376",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CAS operation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1501",
          "text": "Compare-And-Swap, atomic lock-free operation",
          "isCorrect": true
        },
        {
          "id": "java-c1502",
          "text": "Conditional Assignment",
          "isCorrect": false
        },
        {
          "id": "java-c1503",
          "text": "Cache Synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1504",
          "text": "Concurrent Addressing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q377",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the benefits of ReentrantLock over synchronized?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1505",
          "text": "tryLock() with timeout",
          "isCorrect": true
        },
        {
          "id": "java-c1506",
          "text": "lockInterruptibly()",
          "isCorrect": true
        },
        {
          "id": "java-c1507",
          "text": "Multiple condition variables",
          "isCorrect": true
        },
        {
          "id": "java-c1508",
          "text": "Always faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q378",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Phaser?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1509",
          "text": "Flexible synchronization barrier for phases, like CyclicBarrier but reusable",
          "isCorrect": true
        },
        {
          "id": "java-c1510",
          "text": "Thread phase manager",
          "isCorrect": false
        },
        {
          "id": "java-c1511",
          "text": "Performance profiler",
          "isCorrect": false
        },
        {
          "id": "java-c1512",
          "text": "Resource allocator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q379",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Semaphore used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1513",
          "text": "Controls access to resource with permit count",
          "isCorrect": true
        },
        {
          "id": "java-c1514",
          "text": "Signal handling",
          "isCorrect": false
        },
        {
          "id": "java-c1515",
          "text": "Memory synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1516",
          "text": "Thread communication",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q380",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between await() and wait()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1517",
          "text": "await: Condition; wait: Object monitor",
          "isCorrect": true
        },
        {
          "id": "java-c1518",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1519",
          "text": "await is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1520",
          "text": "wait is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q381",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the Java Memory Model (JMM)?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1521",
          "text": "Specifies how threads interact through memory, visibility rules",
          "isCorrect": true
        },
        {
          "id": "java-c1522",
          "text": "Memory allocation model",
          "isCorrect": false
        },
        {
          "id": "java-c1523",
          "text": "GC model",
          "isCorrect": false
        },
        {
          "id": "java-c1524",
          "text": "Heap structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q382",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are happens-before relationships?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1525",
          "text": "Synchronized block entry/exit",
          "isCorrect": true
        },
        {
          "id": "java-c1526",
          "text": "Volatile variable write/read",
          "isCorrect": true
        },
        {
          "id": "java-c1527",
          "text": "Thread start/join",
          "isCorrect": true
        },
        {
          "id": "java-c1528",
          "text": "Regular field access",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q383",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the double-checked locking problem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1529",
          "text": "Broken without volatile due to reordering, partial construction",
          "isCorrect": true
        },
        {
          "id": "java-c1530",
          "text": "Always works correctly",
          "isCorrect": false
        },
        {
          "id": "java-c1531",
          "text": "Performance issue only",
          "isCorrect": false
        },
        {
          "id": "java-c1532",
          "text": "Threading issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q384",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is lock coarsening?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1533",
          "text": "JVM optimization merging adjacent synchronized blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1534",
          "text": "Lock expansion",
          "isCorrect": false
        },
        {
          "id": "java-c1535",
          "text": "Lock degradation",
          "isCorrect": false
        },
        {
          "id": "java-c1536",
          "text": "Lock splitting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q385",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is biased locking?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1537",
          "text": "Optimization for locks acquired by same thread repeatedly",
          "isCorrect": true
        },
        {
          "id": "java-c1538",
          "text": "Lock preference",
          "isCorrect": false
        },
        {
          "id": "java-c1539",
          "text": "Unfair locking",
          "isCorrect": false
        },
        {
          "id": "java-c1540",
          "text": "Lock priority",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q386",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CAS operation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1541",
          "text": "Compare-And-Swap, atomic lock-free operation",
          "isCorrect": true
        },
        {
          "id": "java-c1542",
          "text": "Conditional Assignment",
          "isCorrect": false
        },
        {
          "id": "java-c1543",
          "text": "Cache Synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1544",
          "text": "Concurrent Addressing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q387",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the benefits of ReentrantLock over synchronized?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1545",
          "text": "tryLock() with timeout",
          "isCorrect": true
        },
        {
          "id": "java-c1546",
          "text": "lockInterruptibly()",
          "isCorrect": true
        },
        {
          "id": "java-c1547",
          "text": "Multiple condition variables",
          "isCorrect": true
        },
        {
          "id": "java-c1548",
          "text": "Always faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q388",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Phaser?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1549",
          "text": "Flexible synchronization barrier for phases, like CyclicBarrier but reusable",
          "isCorrect": true
        },
        {
          "id": "java-c1550",
          "text": "Thread phase manager",
          "isCorrect": false
        },
        {
          "id": "java-c1551",
          "text": "Performance profiler",
          "isCorrect": false
        },
        {
          "id": "java-c1552",
          "text": "Resource allocator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q389",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Semaphore used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1553",
          "text": "Controls access to resource with permit count",
          "isCorrect": true
        },
        {
          "id": "java-c1554",
          "text": "Signal handling",
          "isCorrect": false
        },
        {
          "id": "java-c1555",
          "text": "Memory synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1556",
          "text": "Thread communication",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q390",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between await() and wait()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1557",
          "text": "await: Condition; wait: Object monitor",
          "isCorrect": true
        },
        {
          "id": "java-c1558",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1559",
          "text": "await is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1560",
          "text": "wait is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q391",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the Java Memory Model (JMM)?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1561",
          "text": "Specifies how threads interact through memory, visibility rules",
          "isCorrect": true
        },
        {
          "id": "java-c1562",
          "text": "Memory allocation model",
          "isCorrect": false
        },
        {
          "id": "java-c1563",
          "text": "GC model",
          "isCorrect": false
        },
        {
          "id": "java-c1564",
          "text": "Heap structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q392",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are happens-before relationships?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1565",
          "text": "Synchronized block entry/exit",
          "isCorrect": true
        },
        {
          "id": "java-c1566",
          "text": "Volatile variable write/read",
          "isCorrect": true
        },
        {
          "id": "java-c1567",
          "text": "Thread start/join",
          "isCorrect": true
        },
        {
          "id": "java-c1568",
          "text": "Regular field access",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q393",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the double-checked locking problem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1569",
          "text": "Broken without volatile due to reordering, partial construction",
          "isCorrect": true
        },
        {
          "id": "java-c1570",
          "text": "Always works correctly",
          "isCorrect": false
        },
        {
          "id": "java-c1571",
          "text": "Performance issue only",
          "isCorrect": false
        },
        {
          "id": "java-c1572",
          "text": "Threading issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q394",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is lock coarsening?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1573",
          "text": "JVM optimization merging adjacent synchronized blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1574",
          "text": "Lock expansion",
          "isCorrect": false
        },
        {
          "id": "java-c1575",
          "text": "Lock degradation",
          "isCorrect": false
        },
        {
          "id": "java-c1576",
          "text": "Lock splitting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q395",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is biased locking?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1577",
          "text": "Optimization for locks acquired by same thread repeatedly",
          "isCorrect": true
        },
        {
          "id": "java-c1578",
          "text": "Lock preference",
          "isCorrect": false
        },
        {
          "id": "java-c1579",
          "text": "Unfair locking",
          "isCorrect": false
        },
        {
          "id": "java-c1580",
          "text": "Lock priority",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q396",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CAS operation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1581",
          "text": "Compare-And-Swap, atomic lock-free operation",
          "isCorrect": true
        },
        {
          "id": "java-c1582",
          "text": "Conditional Assignment",
          "isCorrect": false
        },
        {
          "id": "java-c1583",
          "text": "Cache Synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1584",
          "text": "Concurrent Addressing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q397",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the benefits of ReentrantLock over synchronized?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1585",
          "text": "tryLock() with timeout",
          "isCorrect": true
        },
        {
          "id": "java-c1586",
          "text": "lockInterruptibly()",
          "isCorrect": true
        },
        {
          "id": "java-c1587",
          "text": "Multiple condition variables",
          "isCorrect": true
        },
        {
          "id": "java-c1588",
          "text": "Always faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q398",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Phaser?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1589",
          "text": "Flexible synchronization barrier for phases, like CyclicBarrier but reusable",
          "isCorrect": true
        },
        {
          "id": "java-c1590",
          "text": "Thread phase manager",
          "isCorrect": false
        },
        {
          "id": "java-c1591",
          "text": "Performance profiler",
          "isCorrect": false
        },
        {
          "id": "java-c1592",
          "text": "Resource allocator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q399",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Semaphore used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1593",
          "text": "Controls access to resource with permit count",
          "isCorrect": true
        },
        {
          "id": "java-c1594",
          "text": "Signal handling",
          "isCorrect": false
        },
        {
          "id": "java-c1595",
          "text": "Memory synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1596",
          "text": "Thread communication",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q400",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between await() and wait()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1597",
          "text": "await: Condition; wait: Object monitor",
          "isCorrect": true
        },
        {
          "id": "java-c1598",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1599",
          "text": "await is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1600",
          "text": "wait is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q401",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the Java Memory Model (JMM)?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1601",
          "text": "Specifies how threads interact through memory, visibility rules",
          "isCorrect": true
        },
        {
          "id": "java-c1602",
          "text": "Memory allocation model",
          "isCorrect": false
        },
        {
          "id": "java-c1603",
          "text": "GC model",
          "isCorrect": false
        },
        {
          "id": "java-c1604",
          "text": "Heap structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q402",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are happens-before relationships?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1605",
          "text": "Synchronized block entry/exit",
          "isCorrect": true
        },
        {
          "id": "java-c1606",
          "text": "Volatile variable write/read",
          "isCorrect": true
        },
        {
          "id": "java-c1607",
          "text": "Thread start/join",
          "isCorrect": true
        },
        {
          "id": "java-c1608",
          "text": "Regular field access",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q403",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the double-checked locking problem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1609",
          "text": "Broken without volatile due to reordering, partial construction",
          "isCorrect": true
        },
        {
          "id": "java-c1610",
          "text": "Always works correctly",
          "isCorrect": false
        },
        {
          "id": "java-c1611",
          "text": "Performance issue only",
          "isCorrect": false
        },
        {
          "id": "java-c1612",
          "text": "Threading issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q404",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is lock coarsening?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1613",
          "text": "JVM optimization merging adjacent synchronized blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1614",
          "text": "Lock expansion",
          "isCorrect": false
        },
        {
          "id": "java-c1615",
          "text": "Lock degradation",
          "isCorrect": false
        },
        {
          "id": "java-c1616",
          "text": "Lock splitting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q405",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is biased locking?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1617",
          "text": "Optimization for locks acquired by same thread repeatedly",
          "isCorrect": true
        },
        {
          "id": "java-c1618",
          "text": "Lock preference",
          "isCorrect": false
        },
        {
          "id": "java-c1619",
          "text": "Unfair locking",
          "isCorrect": false
        },
        {
          "id": "java-c1620",
          "text": "Lock priority",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q406",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CAS operation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1621",
          "text": "Compare-And-Swap, atomic lock-free operation",
          "isCorrect": true
        },
        {
          "id": "java-c1622",
          "text": "Conditional Assignment",
          "isCorrect": false
        },
        {
          "id": "java-c1623",
          "text": "Cache Synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1624",
          "text": "Concurrent Addressing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q407",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the benefits of ReentrantLock over synchronized?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1625",
          "text": "tryLock() with timeout",
          "isCorrect": true
        },
        {
          "id": "java-c1626",
          "text": "lockInterruptibly()",
          "isCorrect": true
        },
        {
          "id": "java-c1627",
          "text": "Multiple condition variables",
          "isCorrect": true
        },
        {
          "id": "java-c1628",
          "text": "Always faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q408",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Phaser?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1629",
          "text": "Flexible synchronization barrier for phases, like CyclicBarrier but reusable",
          "isCorrect": true
        },
        {
          "id": "java-c1630",
          "text": "Thread phase manager",
          "isCorrect": false
        },
        {
          "id": "java-c1631",
          "text": "Performance profiler",
          "isCorrect": false
        },
        {
          "id": "java-c1632",
          "text": "Resource allocator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q409",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Semaphore used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1633",
          "text": "Controls access to resource with permit count",
          "isCorrect": true
        },
        {
          "id": "java-c1634",
          "text": "Signal handling",
          "isCorrect": false
        },
        {
          "id": "java-c1635",
          "text": "Memory synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1636",
          "text": "Thread communication",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q410",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between await() and wait()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1637",
          "text": "await: Condition; wait: Object monitor",
          "isCorrect": true
        },
        {
          "id": "java-c1638",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1639",
          "text": "await is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1640",
          "text": "wait is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q411",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the Java Memory Model (JMM)?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1641",
          "text": "Specifies how threads interact through memory, visibility rules",
          "isCorrect": true
        },
        {
          "id": "java-c1642",
          "text": "Memory allocation model",
          "isCorrect": false
        },
        {
          "id": "java-c1643",
          "text": "GC model",
          "isCorrect": false
        },
        {
          "id": "java-c1644",
          "text": "Heap structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q412",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are happens-before relationships?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1645",
          "text": "Synchronized block entry/exit",
          "isCorrect": true
        },
        {
          "id": "java-c1646",
          "text": "Volatile variable write/read",
          "isCorrect": true
        },
        {
          "id": "java-c1647",
          "text": "Thread start/join",
          "isCorrect": true
        },
        {
          "id": "java-c1648",
          "text": "Regular field access",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q413",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the double-checked locking problem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1649",
          "text": "Broken without volatile due to reordering, partial construction",
          "isCorrect": true
        },
        {
          "id": "java-c1650",
          "text": "Always works correctly",
          "isCorrect": false
        },
        {
          "id": "java-c1651",
          "text": "Performance issue only",
          "isCorrect": false
        },
        {
          "id": "java-c1652",
          "text": "Threading issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q414",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is lock coarsening?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1653",
          "text": "JVM optimization merging adjacent synchronized blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1654",
          "text": "Lock expansion",
          "isCorrect": false
        },
        {
          "id": "java-c1655",
          "text": "Lock degradation",
          "isCorrect": false
        },
        {
          "id": "java-c1656",
          "text": "Lock splitting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q415",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is biased locking?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1657",
          "text": "Optimization for locks acquired by same thread repeatedly",
          "isCorrect": true
        },
        {
          "id": "java-c1658",
          "text": "Lock preference",
          "isCorrect": false
        },
        {
          "id": "java-c1659",
          "text": "Unfair locking",
          "isCorrect": false
        },
        {
          "id": "java-c1660",
          "text": "Lock priority",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q416",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CAS operation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1661",
          "text": "Compare-And-Swap, atomic lock-free operation",
          "isCorrect": true
        },
        {
          "id": "java-c1662",
          "text": "Conditional Assignment",
          "isCorrect": false
        },
        {
          "id": "java-c1663",
          "text": "Cache Synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1664",
          "text": "Concurrent Addressing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q417",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the benefits of ReentrantLock over synchronized?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1665",
          "text": "tryLock() with timeout",
          "isCorrect": true
        },
        {
          "id": "java-c1666",
          "text": "lockInterruptibly()",
          "isCorrect": true
        },
        {
          "id": "java-c1667",
          "text": "Multiple condition variables",
          "isCorrect": true
        },
        {
          "id": "java-c1668",
          "text": "Always faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q418",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Phaser?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1669",
          "text": "Flexible synchronization barrier for phases, like CyclicBarrier but reusable",
          "isCorrect": true
        },
        {
          "id": "java-c1670",
          "text": "Thread phase manager",
          "isCorrect": false
        },
        {
          "id": "java-c1671",
          "text": "Performance profiler",
          "isCorrect": false
        },
        {
          "id": "java-c1672",
          "text": "Resource allocator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q419",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Semaphore used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1673",
          "text": "Controls access to resource with permit count",
          "isCorrect": true
        },
        {
          "id": "java-c1674",
          "text": "Signal handling",
          "isCorrect": false
        },
        {
          "id": "java-c1675",
          "text": "Memory synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1676",
          "text": "Thread communication",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q420",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between await() and wait()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1677",
          "text": "await: Condition; wait: Object monitor",
          "isCorrect": true
        },
        {
          "id": "java-c1678",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1679",
          "text": "await is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1680",
          "text": "wait is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q421",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the Java Memory Model (JMM)?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1681",
          "text": "Specifies how threads interact through memory, visibility rules",
          "isCorrect": true
        },
        {
          "id": "java-c1682",
          "text": "Memory allocation model",
          "isCorrect": false
        },
        {
          "id": "java-c1683",
          "text": "GC model",
          "isCorrect": false
        },
        {
          "id": "java-c1684",
          "text": "Heap structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q422",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are happens-before relationships?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1685",
          "text": "Synchronized block entry/exit",
          "isCorrect": true
        },
        {
          "id": "java-c1686",
          "text": "Volatile variable write/read",
          "isCorrect": true
        },
        {
          "id": "java-c1687",
          "text": "Thread start/join",
          "isCorrect": true
        },
        {
          "id": "java-c1688",
          "text": "Regular field access",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q423",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the double-checked locking problem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1689",
          "text": "Broken without volatile due to reordering, partial construction",
          "isCorrect": true
        },
        {
          "id": "java-c1690",
          "text": "Always works correctly",
          "isCorrect": false
        },
        {
          "id": "java-c1691",
          "text": "Performance issue only",
          "isCorrect": false
        },
        {
          "id": "java-c1692",
          "text": "Threading issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q424",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is lock coarsening?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1693",
          "text": "JVM optimization merging adjacent synchronized blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1694",
          "text": "Lock expansion",
          "isCorrect": false
        },
        {
          "id": "java-c1695",
          "text": "Lock degradation",
          "isCorrect": false
        },
        {
          "id": "java-c1696",
          "text": "Lock splitting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q425",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is biased locking?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1697",
          "text": "Optimization for locks acquired by same thread repeatedly",
          "isCorrect": true
        },
        {
          "id": "java-c1698",
          "text": "Lock preference",
          "isCorrect": false
        },
        {
          "id": "java-c1699",
          "text": "Unfair locking",
          "isCorrect": false
        },
        {
          "id": "java-c1700",
          "text": "Lock priority",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q426",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CAS operation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1701",
          "text": "Compare-And-Swap, atomic lock-free operation",
          "isCorrect": true
        },
        {
          "id": "java-c1702",
          "text": "Conditional Assignment",
          "isCorrect": false
        },
        {
          "id": "java-c1703",
          "text": "Cache Synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1704",
          "text": "Concurrent Addressing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q427",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the benefits of ReentrantLock over synchronized?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1705",
          "text": "tryLock() with timeout",
          "isCorrect": true
        },
        {
          "id": "java-c1706",
          "text": "lockInterruptibly()",
          "isCorrect": true
        },
        {
          "id": "java-c1707",
          "text": "Multiple condition variables",
          "isCorrect": true
        },
        {
          "id": "java-c1708",
          "text": "Always faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q428",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Phaser?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1709",
          "text": "Flexible synchronization barrier for phases, like CyclicBarrier but reusable",
          "isCorrect": true
        },
        {
          "id": "java-c1710",
          "text": "Thread phase manager",
          "isCorrect": false
        },
        {
          "id": "java-c1711",
          "text": "Performance profiler",
          "isCorrect": false
        },
        {
          "id": "java-c1712",
          "text": "Resource allocator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q429",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Semaphore used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1713",
          "text": "Controls access to resource with permit count",
          "isCorrect": true
        },
        {
          "id": "java-c1714",
          "text": "Signal handling",
          "isCorrect": false
        },
        {
          "id": "java-c1715",
          "text": "Memory synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1716",
          "text": "Thread communication",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q430",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between await() and wait()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1717",
          "text": "await: Condition; wait: Object monitor",
          "isCorrect": true
        },
        {
          "id": "java-c1718",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1719",
          "text": "await is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1720",
          "text": "wait is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q431",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the Java Memory Model (JMM)?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1721",
          "text": "Specifies how threads interact through memory, visibility rules",
          "isCorrect": true
        },
        {
          "id": "java-c1722",
          "text": "Memory allocation model",
          "isCorrect": false
        },
        {
          "id": "java-c1723",
          "text": "GC model",
          "isCorrect": false
        },
        {
          "id": "java-c1724",
          "text": "Heap structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q432",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are happens-before relationships?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1725",
          "text": "Synchronized block entry/exit",
          "isCorrect": true
        },
        {
          "id": "java-c1726",
          "text": "Volatile variable write/read",
          "isCorrect": true
        },
        {
          "id": "java-c1727",
          "text": "Thread start/join",
          "isCorrect": true
        },
        {
          "id": "java-c1728",
          "text": "Regular field access",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q433",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the double-checked locking problem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1729",
          "text": "Broken without volatile due to reordering, partial construction",
          "isCorrect": true
        },
        {
          "id": "java-c1730",
          "text": "Always works correctly",
          "isCorrect": false
        },
        {
          "id": "java-c1731",
          "text": "Performance issue only",
          "isCorrect": false
        },
        {
          "id": "java-c1732",
          "text": "Threading issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q434",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is lock coarsening?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1733",
          "text": "JVM optimization merging adjacent synchronized blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1734",
          "text": "Lock expansion",
          "isCorrect": false
        },
        {
          "id": "java-c1735",
          "text": "Lock degradation",
          "isCorrect": false
        },
        {
          "id": "java-c1736",
          "text": "Lock splitting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q435",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is biased locking?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1737",
          "text": "Optimization for locks acquired by same thread repeatedly",
          "isCorrect": true
        },
        {
          "id": "java-c1738",
          "text": "Lock preference",
          "isCorrect": false
        },
        {
          "id": "java-c1739",
          "text": "Unfair locking",
          "isCorrect": false
        },
        {
          "id": "java-c1740",
          "text": "Lock priority",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q436",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CAS operation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1741",
          "text": "Compare-And-Swap, atomic lock-free operation",
          "isCorrect": true
        },
        {
          "id": "java-c1742",
          "text": "Conditional Assignment",
          "isCorrect": false
        },
        {
          "id": "java-c1743",
          "text": "Cache Synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1744",
          "text": "Concurrent Addressing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q437",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the benefits of ReentrantLock over synchronized?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1745",
          "text": "tryLock() with timeout",
          "isCorrect": true
        },
        {
          "id": "java-c1746",
          "text": "lockInterruptibly()",
          "isCorrect": true
        },
        {
          "id": "java-c1747",
          "text": "Multiple condition variables",
          "isCorrect": true
        },
        {
          "id": "java-c1748",
          "text": "Always faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q438",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Phaser?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1749",
          "text": "Flexible synchronization barrier for phases, like CyclicBarrier but reusable",
          "isCorrect": true
        },
        {
          "id": "java-c1750",
          "text": "Thread phase manager",
          "isCorrect": false
        },
        {
          "id": "java-c1751",
          "text": "Performance profiler",
          "isCorrect": false
        },
        {
          "id": "java-c1752",
          "text": "Resource allocator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q439",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Semaphore used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1753",
          "text": "Controls access to resource with permit count",
          "isCorrect": true
        },
        {
          "id": "java-c1754",
          "text": "Signal handling",
          "isCorrect": false
        },
        {
          "id": "java-c1755",
          "text": "Memory synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1756",
          "text": "Thread communication",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q440",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between await() and wait()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1757",
          "text": "await: Condition; wait: Object monitor",
          "isCorrect": true
        },
        {
          "id": "java-c1758",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1759",
          "text": "await is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1760",
          "text": "wait is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q441",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the Java Memory Model (JMM)?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1761",
          "text": "Specifies how threads interact through memory, visibility rules",
          "isCorrect": true
        },
        {
          "id": "java-c1762",
          "text": "Memory allocation model",
          "isCorrect": false
        },
        {
          "id": "java-c1763",
          "text": "GC model",
          "isCorrect": false
        },
        {
          "id": "java-c1764",
          "text": "Heap structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q442",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are happens-before relationships?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1765",
          "text": "Synchronized block entry/exit",
          "isCorrect": true
        },
        {
          "id": "java-c1766",
          "text": "Volatile variable write/read",
          "isCorrect": true
        },
        {
          "id": "java-c1767",
          "text": "Thread start/join",
          "isCorrect": true
        },
        {
          "id": "java-c1768",
          "text": "Regular field access",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q443",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the double-checked locking problem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1769",
          "text": "Broken without volatile due to reordering, partial construction",
          "isCorrect": true
        },
        {
          "id": "java-c1770",
          "text": "Always works correctly",
          "isCorrect": false
        },
        {
          "id": "java-c1771",
          "text": "Performance issue only",
          "isCorrect": false
        },
        {
          "id": "java-c1772",
          "text": "Threading issue",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q444",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is lock coarsening?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1773",
          "text": "JVM optimization merging adjacent synchronized blocks",
          "isCorrect": true
        },
        {
          "id": "java-c1774",
          "text": "Lock expansion",
          "isCorrect": false
        },
        {
          "id": "java-c1775",
          "text": "Lock degradation",
          "isCorrect": false
        },
        {
          "id": "java-c1776",
          "text": "Lock splitting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q445",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is biased locking?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1777",
          "text": "Optimization for locks acquired by same thread repeatedly",
          "isCorrect": true
        },
        {
          "id": "java-c1778",
          "text": "Lock preference",
          "isCorrect": false
        },
        {
          "id": "java-c1779",
          "text": "Unfair locking",
          "isCorrect": false
        },
        {
          "id": "java-c1780",
          "text": "Lock priority",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q446",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CAS operation?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1781",
          "text": "Compare-And-Swap, atomic lock-free operation",
          "isCorrect": true
        },
        {
          "id": "java-c1782",
          "text": "Conditional Assignment",
          "isCorrect": false
        },
        {
          "id": "java-c1783",
          "text": "Cache Synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1784",
          "text": "Concurrent Addressing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q447",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are the benefits of ReentrantLock over synchronized?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1785",
          "text": "tryLock() with timeout",
          "isCorrect": true
        },
        {
          "id": "java-c1786",
          "text": "lockInterruptibly()",
          "isCorrect": true
        },
        {
          "id": "java-c1787",
          "text": "Multiple condition variables",
          "isCorrect": true
        },
        {
          "id": "java-c1788",
          "text": "Always faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q448",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Phaser?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1789",
          "text": "Flexible synchronization barrier for phases, like CyclicBarrier but reusable",
          "isCorrect": true
        },
        {
          "id": "java-c1790",
          "text": "Thread phase manager",
          "isCorrect": false
        },
        {
          "id": "java-c1791",
          "text": "Performance profiler",
          "isCorrect": false
        },
        {
          "id": "java-c1792",
          "text": "Resource allocator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q449",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a Semaphore used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1793",
          "text": "Controls access to resource with permit count",
          "isCorrect": true
        },
        {
          "id": "java-c1794",
          "text": "Signal handling",
          "isCorrect": false
        },
        {
          "id": "java-c1795",
          "text": "Memory synchronization",
          "isCorrect": false
        },
        {
          "id": "java-c1796",
          "text": "Thread communication",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q450",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between await() and wait()?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1797",
          "text": "await: Condition; wait: Object monitor",
          "isCorrect": true
        },
        {
          "id": "java-c1798",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1799",
          "text": "await is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1800",
          "text": "wait is faster",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q451",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Boot auto-configuration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1801",
          "text": "Automatically configures beans based on classpath and properties",
          "isCorrect": true
        },
        {
          "id": "java-c1802",
          "text": "Manual configuration",
          "isCorrect": false
        },
        {
          "id": "java-c1803",
          "text": "XML configuration",
          "isCorrect": false
        },
        {
          "id": "java-c1804",
          "text": "Annotation processing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q452",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What are Spring Boot starters?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1805",
          "text": "Dependency descriptors with related dependencies grouped",
          "isCorrect": true
        },
        {
          "id": "java-c1806",
          "text": "Application starters",
          "isCorrect": false
        },
        {
          "id": "java-c1807",
          "text": "Boot scripts",
          "isCorrect": false
        },
        {
          "id": "java-c1808",
          "text": "Configuration files",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q453",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What is @SpringBootApplication composed of?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1809",
          "text": "@Configuration",
          "isCorrect": true
        },
        {
          "id": "java-c1810",
          "text": "@EnableAutoConfiguration",
          "isCorrect": true
        },
        {
          "id": "java-c1811",
          "text": "@ComponentScan",
          "isCorrect": true
        },
        {
          "id": "java-c1812",
          "text": "@Repository",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q454",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of application.properties vs application.yml?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1813",
          "text": "Different formats for same configuration, YAML more readable",
          "isCorrect": true
        },
        {
          "id": "java-c1814",
          "text": "Properties is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1815",
          "text": "YAML is faster",
          "isCorrect": false
        },
        {
          "id": "java-c1816",
          "text": "Properties is required",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q455",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring profiles used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1817",
          "text": "Environment-specific configuration (dev, test, prod)",
          "isCorrect": true
        },
        {
          "id": "java-c1818",
          "text": "User profiles",
          "isCorrect": false
        },
        {
          "id": "java-c1819",
          "text": "Performance profiling",
          "isCorrect": false
        },
        {
          "id": "java-c1820",
          "text": "Security profiles",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q456",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is @ConditionalOnProperty?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1821",
          "text": "Bean created only if property exists/matches value",
          "isCorrect": true
        },
        {
          "id": "java-c1822",
          "text": "Property validation",
          "isCorrect": false
        },
        {
          "id": "java-c1823",
          "text": "Property encryption",
          "isCorrect": false
        },
        {
          "id": "java-c1824",
          "text": "Property binding",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q457",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Data JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1825",
          "text": "Abstraction over JPA with repository pattern",
          "isCorrect": true
        },
        {
          "id": "java-c1826",
          "text": "Database driver",
          "isCorrect": false
        },
        {
          "id": "java-c1827",
          "text": "ORM implementation",
          "isCorrect": false
        },
        {
          "id": "java-c1828",
          "text": "SQL generator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q458",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between @Entity and @Table?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1829",
          "text": "@Entity: JPA entity class; @Table: customize table mapping",
          "isCorrect": true
        },
        {
          "id": "java-c1830",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1831",
          "text": "@Entity is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1832",
          "text": "@Table is for views only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q459",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is pessimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1833",
          "text": "Database-level lock acquired during transaction",
          "isCorrect": true
        },
        {
          "id": "java-c1834",
          "text": "Optimistic locking",
          "isCorrect": false
        },
        {
          "id": "java-c1835",
          "text": "Application-level lock",
          "isCorrect": false
        },
        {
          "id": "java-c1836",
          "text": "Read-only lock",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q460",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is optimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1837",
          "text": "Version-based concurrency control, checked at commit",
          "isCorrect": true
        },
        {
          "id": "java-c1838",
          "text": "Database lock",
          "isCorrect": false
        },
        {
          "id": "java-c1839",
          "text": "No locking",
          "isCorrect": false
        },
        {
          "id": "java-c1840",
          "text": "Pessimistic locking",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q461",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Boot auto-configuration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1841",
          "text": "Automatically configures beans based on classpath and properties",
          "isCorrect": true
        },
        {
          "id": "java-c1842",
          "text": "Manual configuration",
          "isCorrect": false
        },
        {
          "id": "java-c1843",
          "text": "XML configuration",
          "isCorrect": false
        },
        {
          "id": "java-c1844",
          "text": "Annotation processing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q462",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What are Spring Boot starters?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1845",
          "text": "Dependency descriptors with related dependencies grouped",
          "isCorrect": true
        },
        {
          "id": "java-c1846",
          "text": "Application starters",
          "isCorrect": false
        },
        {
          "id": "java-c1847",
          "text": "Boot scripts",
          "isCorrect": false
        },
        {
          "id": "java-c1848",
          "text": "Configuration files",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q463",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What is @SpringBootApplication composed of?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1849",
          "text": "@Configuration",
          "isCorrect": true
        },
        {
          "id": "java-c1850",
          "text": "@EnableAutoConfiguration",
          "isCorrect": true
        },
        {
          "id": "java-c1851",
          "text": "@ComponentScan",
          "isCorrect": true
        },
        {
          "id": "java-c1852",
          "text": "@Repository",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q464",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of application.properties vs application.yml?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1853",
          "text": "Different formats for same configuration, YAML more readable",
          "isCorrect": true
        },
        {
          "id": "java-c1854",
          "text": "Properties is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1855",
          "text": "YAML is faster",
          "isCorrect": false
        },
        {
          "id": "java-c1856",
          "text": "Properties is required",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q465",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring profiles used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1857",
          "text": "Environment-specific configuration (dev, test, prod)",
          "isCorrect": true
        },
        {
          "id": "java-c1858",
          "text": "User profiles",
          "isCorrect": false
        },
        {
          "id": "java-c1859",
          "text": "Performance profiling",
          "isCorrect": false
        },
        {
          "id": "java-c1860",
          "text": "Security profiles",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q466",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is @ConditionalOnProperty?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1861",
          "text": "Bean created only if property exists/matches value",
          "isCorrect": true
        },
        {
          "id": "java-c1862",
          "text": "Property validation",
          "isCorrect": false
        },
        {
          "id": "java-c1863",
          "text": "Property encryption",
          "isCorrect": false
        },
        {
          "id": "java-c1864",
          "text": "Property binding",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q467",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Data JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1865",
          "text": "Abstraction over JPA with repository pattern",
          "isCorrect": true
        },
        {
          "id": "java-c1866",
          "text": "Database driver",
          "isCorrect": false
        },
        {
          "id": "java-c1867",
          "text": "ORM implementation",
          "isCorrect": false
        },
        {
          "id": "java-c1868",
          "text": "SQL generator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q468",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between @Entity and @Table?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1869",
          "text": "@Entity: JPA entity class; @Table: customize table mapping",
          "isCorrect": true
        },
        {
          "id": "java-c1870",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1871",
          "text": "@Entity is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1872",
          "text": "@Table is for views only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q469",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is pessimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1873",
          "text": "Database-level lock acquired during transaction",
          "isCorrect": true
        },
        {
          "id": "java-c1874",
          "text": "Optimistic locking",
          "isCorrect": false
        },
        {
          "id": "java-c1875",
          "text": "Application-level lock",
          "isCorrect": false
        },
        {
          "id": "java-c1876",
          "text": "Read-only lock",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q470",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is optimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1877",
          "text": "Version-based concurrency control, checked at commit",
          "isCorrect": true
        },
        {
          "id": "java-c1878",
          "text": "Database lock",
          "isCorrect": false
        },
        {
          "id": "java-c1879",
          "text": "No locking",
          "isCorrect": false
        },
        {
          "id": "java-c1880",
          "text": "Pessimistic locking",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q471",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Boot auto-configuration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1881",
          "text": "Automatically configures beans based on classpath and properties",
          "isCorrect": true
        },
        {
          "id": "java-c1882",
          "text": "Manual configuration",
          "isCorrect": false
        },
        {
          "id": "java-c1883",
          "text": "XML configuration",
          "isCorrect": false
        },
        {
          "id": "java-c1884",
          "text": "Annotation processing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q472",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What are Spring Boot starters?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1885",
          "text": "Dependency descriptors with related dependencies grouped",
          "isCorrect": true
        },
        {
          "id": "java-c1886",
          "text": "Application starters",
          "isCorrect": false
        },
        {
          "id": "java-c1887",
          "text": "Boot scripts",
          "isCorrect": false
        },
        {
          "id": "java-c1888",
          "text": "Configuration files",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q473",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What is @SpringBootApplication composed of?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1889",
          "text": "@Configuration",
          "isCorrect": true
        },
        {
          "id": "java-c1890",
          "text": "@EnableAutoConfiguration",
          "isCorrect": true
        },
        {
          "id": "java-c1891",
          "text": "@ComponentScan",
          "isCorrect": true
        },
        {
          "id": "java-c1892",
          "text": "@Repository",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q474",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of application.properties vs application.yml?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1893",
          "text": "Different formats for same configuration, YAML more readable",
          "isCorrect": true
        },
        {
          "id": "java-c1894",
          "text": "Properties is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1895",
          "text": "YAML is faster",
          "isCorrect": false
        },
        {
          "id": "java-c1896",
          "text": "Properties is required",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q475",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring profiles used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1897",
          "text": "Environment-specific configuration (dev, test, prod)",
          "isCorrect": true
        },
        {
          "id": "java-c1898",
          "text": "User profiles",
          "isCorrect": false
        },
        {
          "id": "java-c1899",
          "text": "Performance profiling",
          "isCorrect": false
        },
        {
          "id": "java-c1900",
          "text": "Security profiles",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q476",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is @ConditionalOnProperty?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1901",
          "text": "Bean created only if property exists/matches value",
          "isCorrect": true
        },
        {
          "id": "java-c1902",
          "text": "Property validation",
          "isCorrect": false
        },
        {
          "id": "java-c1903",
          "text": "Property encryption",
          "isCorrect": false
        },
        {
          "id": "java-c1904",
          "text": "Property binding",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q477",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Data JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1905",
          "text": "Abstraction over JPA with repository pattern",
          "isCorrect": true
        },
        {
          "id": "java-c1906",
          "text": "Database driver",
          "isCorrect": false
        },
        {
          "id": "java-c1907",
          "text": "ORM implementation",
          "isCorrect": false
        },
        {
          "id": "java-c1908",
          "text": "SQL generator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q478",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between @Entity and @Table?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1909",
          "text": "@Entity: JPA entity class; @Table: customize table mapping",
          "isCorrect": true
        },
        {
          "id": "java-c1910",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1911",
          "text": "@Entity is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1912",
          "text": "@Table is for views only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q479",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is pessimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1913",
          "text": "Database-level lock acquired during transaction",
          "isCorrect": true
        },
        {
          "id": "java-c1914",
          "text": "Optimistic locking",
          "isCorrect": false
        },
        {
          "id": "java-c1915",
          "text": "Application-level lock",
          "isCorrect": false
        },
        {
          "id": "java-c1916",
          "text": "Read-only lock",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q480",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is optimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1917",
          "text": "Version-based concurrency control, checked at commit",
          "isCorrect": true
        },
        {
          "id": "java-c1918",
          "text": "Database lock",
          "isCorrect": false
        },
        {
          "id": "java-c1919",
          "text": "No locking",
          "isCorrect": false
        },
        {
          "id": "java-c1920",
          "text": "Pessimistic locking",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q481",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Boot auto-configuration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1921",
          "text": "Automatically configures beans based on classpath and properties",
          "isCorrect": true
        },
        {
          "id": "java-c1922",
          "text": "Manual configuration",
          "isCorrect": false
        },
        {
          "id": "java-c1923",
          "text": "XML configuration",
          "isCorrect": false
        },
        {
          "id": "java-c1924",
          "text": "Annotation processing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q482",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What are Spring Boot starters?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1925",
          "text": "Dependency descriptors with related dependencies grouped",
          "isCorrect": true
        },
        {
          "id": "java-c1926",
          "text": "Application starters",
          "isCorrect": false
        },
        {
          "id": "java-c1927",
          "text": "Boot scripts",
          "isCorrect": false
        },
        {
          "id": "java-c1928",
          "text": "Configuration files",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q483",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What is @SpringBootApplication composed of?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1929",
          "text": "@Configuration",
          "isCorrect": true
        },
        {
          "id": "java-c1930",
          "text": "@EnableAutoConfiguration",
          "isCorrect": true
        },
        {
          "id": "java-c1931",
          "text": "@ComponentScan",
          "isCorrect": true
        },
        {
          "id": "java-c1932",
          "text": "@Repository",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q484",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of application.properties vs application.yml?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1933",
          "text": "Different formats for same configuration, YAML more readable",
          "isCorrect": true
        },
        {
          "id": "java-c1934",
          "text": "Properties is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1935",
          "text": "YAML is faster",
          "isCorrect": false
        },
        {
          "id": "java-c1936",
          "text": "Properties is required",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q485",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring profiles used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1937",
          "text": "Environment-specific configuration (dev, test, prod)",
          "isCorrect": true
        },
        {
          "id": "java-c1938",
          "text": "User profiles",
          "isCorrect": false
        },
        {
          "id": "java-c1939",
          "text": "Performance profiling",
          "isCorrect": false
        },
        {
          "id": "java-c1940",
          "text": "Security profiles",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q486",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is @ConditionalOnProperty?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1941",
          "text": "Bean created only if property exists/matches value",
          "isCorrect": true
        },
        {
          "id": "java-c1942",
          "text": "Property validation",
          "isCorrect": false
        },
        {
          "id": "java-c1943",
          "text": "Property encryption",
          "isCorrect": false
        },
        {
          "id": "java-c1944",
          "text": "Property binding",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q487",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Data JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1945",
          "text": "Abstraction over JPA with repository pattern",
          "isCorrect": true
        },
        {
          "id": "java-c1946",
          "text": "Database driver",
          "isCorrect": false
        },
        {
          "id": "java-c1947",
          "text": "ORM implementation",
          "isCorrect": false
        },
        {
          "id": "java-c1948",
          "text": "SQL generator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q488",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between @Entity and @Table?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1949",
          "text": "@Entity: JPA entity class; @Table: customize table mapping",
          "isCorrect": true
        },
        {
          "id": "java-c1950",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1951",
          "text": "@Entity is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1952",
          "text": "@Table is for views only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q489",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is pessimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1953",
          "text": "Database-level lock acquired during transaction",
          "isCorrect": true
        },
        {
          "id": "java-c1954",
          "text": "Optimistic locking",
          "isCorrect": false
        },
        {
          "id": "java-c1955",
          "text": "Application-level lock",
          "isCorrect": false
        },
        {
          "id": "java-c1956",
          "text": "Read-only lock",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q490",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is optimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1957",
          "text": "Version-based concurrency control, checked at commit",
          "isCorrect": true
        },
        {
          "id": "java-c1958",
          "text": "Database lock",
          "isCorrect": false
        },
        {
          "id": "java-c1959",
          "text": "No locking",
          "isCorrect": false
        },
        {
          "id": "java-c1960",
          "text": "Pessimistic locking",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q491",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Boot auto-configuration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1961",
          "text": "Automatically configures beans based on classpath and properties",
          "isCorrect": true
        },
        {
          "id": "java-c1962",
          "text": "Manual configuration",
          "isCorrect": false
        },
        {
          "id": "java-c1963",
          "text": "XML configuration",
          "isCorrect": false
        },
        {
          "id": "java-c1964",
          "text": "Annotation processing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q492",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What are Spring Boot starters?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1965",
          "text": "Dependency descriptors with related dependencies grouped",
          "isCorrect": true
        },
        {
          "id": "java-c1966",
          "text": "Application starters",
          "isCorrect": false
        },
        {
          "id": "java-c1967",
          "text": "Boot scripts",
          "isCorrect": false
        },
        {
          "id": "java-c1968",
          "text": "Configuration files",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q493",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What is @SpringBootApplication composed of?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1969",
          "text": "@Configuration",
          "isCorrect": true
        },
        {
          "id": "java-c1970",
          "text": "@EnableAutoConfiguration",
          "isCorrect": true
        },
        {
          "id": "java-c1971",
          "text": "@ComponentScan",
          "isCorrect": true
        },
        {
          "id": "java-c1972",
          "text": "@Repository",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q494",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of application.properties vs application.yml?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1973",
          "text": "Different formats for same configuration, YAML more readable",
          "isCorrect": true
        },
        {
          "id": "java-c1974",
          "text": "Properties is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1975",
          "text": "YAML is faster",
          "isCorrect": false
        },
        {
          "id": "java-c1976",
          "text": "Properties is required",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q495",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring profiles used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1977",
          "text": "Environment-specific configuration (dev, test, prod)",
          "isCorrect": true
        },
        {
          "id": "java-c1978",
          "text": "User profiles",
          "isCorrect": false
        },
        {
          "id": "java-c1979",
          "text": "Performance profiling",
          "isCorrect": false
        },
        {
          "id": "java-c1980",
          "text": "Security profiles",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q496",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is @ConditionalOnProperty?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1981",
          "text": "Bean created only if property exists/matches value",
          "isCorrect": true
        },
        {
          "id": "java-c1982",
          "text": "Property validation",
          "isCorrect": false
        },
        {
          "id": "java-c1983",
          "text": "Property encryption",
          "isCorrect": false
        },
        {
          "id": "java-c1984",
          "text": "Property binding",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q497",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Data JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1985",
          "text": "Abstraction over JPA with repository pattern",
          "isCorrect": true
        },
        {
          "id": "java-c1986",
          "text": "Database driver",
          "isCorrect": false
        },
        {
          "id": "java-c1987",
          "text": "ORM implementation",
          "isCorrect": false
        },
        {
          "id": "java-c1988",
          "text": "SQL generator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q498",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between @Entity and @Table?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1989",
          "text": "@Entity: JPA entity class; @Table: customize table mapping",
          "isCorrect": true
        },
        {
          "id": "java-c1990",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c1991",
          "text": "@Entity is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c1992",
          "text": "@Table is for views only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q499",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is pessimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1993",
          "text": "Database-level lock acquired during transaction",
          "isCorrect": true
        },
        {
          "id": "java-c1994",
          "text": "Optimistic locking",
          "isCorrect": false
        },
        {
          "id": "java-c1995",
          "text": "Application-level lock",
          "isCorrect": false
        },
        {
          "id": "java-c1996",
          "text": "Read-only lock",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q500",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is optimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c1997",
          "text": "Version-based concurrency control, checked at commit",
          "isCorrect": true
        },
        {
          "id": "java-c1998",
          "text": "Database lock",
          "isCorrect": false
        },
        {
          "id": "java-c1999",
          "text": "No locking",
          "isCorrect": false
        },
        {
          "id": "java-c2000",
          "text": "Pessimistic locking",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q501",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Boot auto-configuration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2001",
          "text": "Automatically configures beans based on classpath and properties",
          "isCorrect": true
        },
        {
          "id": "java-c2002",
          "text": "Manual configuration",
          "isCorrect": false
        },
        {
          "id": "java-c2003",
          "text": "XML configuration",
          "isCorrect": false
        },
        {
          "id": "java-c2004",
          "text": "Annotation processing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q502",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What are Spring Boot starters?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2005",
          "text": "Dependency descriptors with related dependencies grouped",
          "isCorrect": true
        },
        {
          "id": "java-c2006",
          "text": "Application starters",
          "isCorrect": false
        },
        {
          "id": "java-c2007",
          "text": "Boot scripts",
          "isCorrect": false
        },
        {
          "id": "java-c2008",
          "text": "Configuration files",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q503",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What is @SpringBootApplication composed of?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2009",
          "text": "@Configuration",
          "isCorrect": true
        },
        {
          "id": "java-c2010",
          "text": "@EnableAutoConfiguration",
          "isCorrect": true
        },
        {
          "id": "java-c2011",
          "text": "@ComponentScan",
          "isCorrect": true
        },
        {
          "id": "java-c2012",
          "text": "@Repository",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q504",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of application.properties vs application.yml?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2013",
          "text": "Different formats for same configuration, YAML more readable",
          "isCorrect": true
        },
        {
          "id": "java-c2014",
          "text": "Properties is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c2015",
          "text": "YAML is faster",
          "isCorrect": false
        },
        {
          "id": "java-c2016",
          "text": "Properties is required",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q505",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring profiles used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2017",
          "text": "Environment-specific configuration (dev, test, prod)",
          "isCorrect": true
        },
        {
          "id": "java-c2018",
          "text": "User profiles",
          "isCorrect": false
        },
        {
          "id": "java-c2019",
          "text": "Performance profiling",
          "isCorrect": false
        },
        {
          "id": "java-c2020",
          "text": "Security profiles",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q506",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is @ConditionalOnProperty?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2021",
          "text": "Bean created only if property exists/matches value",
          "isCorrect": true
        },
        {
          "id": "java-c2022",
          "text": "Property validation",
          "isCorrect": false
        },
        {
          "id": "java-c2023",
          "text": "Property encryption",
          "isCorrect": false
        },
        {
          "id": "java-c2024",
          "text": "Property binding",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q507",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Data JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2025",
          "text": "Abstraction over JPA with repository pattern",
          "isCorrect": true
        },
        {
          "id": "java-c2026",
          "text": "Database driver",
          "isCorrect": false
        },
        {
          "id": "java-c2027",
          "text": "ORM implementation",
          "isCorrect": false
        },
        {
          "id": "java-c2028",
          "text": "SQL generator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q508",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between @Entity and @Table?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2029",
          "text": "@Entity: JPA entity class; @Table: customize table mapping",
          "isCorrect": true
        },
        {
          "id": "java-c2030",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c2031",
          "text": "@Entity is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c2032",
          "text": "@Table is for views only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q509",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is pessimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2033",
          "text": "Database-level lock acquired during transaction",
          "isCorrect": true
        },
        {
          "id": "java-c2034",
          "text": "Optimistic locking",
          "isCorrect": false
        },
        {
          "id": "java-c2035",
          "text": "Application-level lock",
          "isCorrect": false
        },
        {
          "id": "java-c2036",
          "text": "Read-only lock",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q510",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is optimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2037",
          "text": "Version-based concurrency control, checked at commit",
          "isCorrect": true
        },
        {
          "id": "java-c2038",
          "text": "Database lock",
          "isCorrect": false
        },
        {
          "id": "java-c2039",
          "text": "No locking",
          "isCorrect": false
        },
        {
          "id": "java-c2040",
          "text": "Pessimistic locking",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q511",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Boot auto-configuration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2041",
          "text": "Automatically configures beans based on classpath and properties",
          "isCorrect": true
        },
        {
          "id": "java-c2042",
          "text": "Manual configuration",
          "isCorrect": false
        },
        {
          "id": "java-c2043",
          "text": "XML configuration",
          "isCorrect": false
        },
        {
          "id": "java-c2044",
          "text": "Annotation processing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q512",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What are Spring Boot starters?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2045",
          "text": "Dependency descriptors with related dependencies grouped",
          "isCorrect": true
        },
        {
          "id": "java-c2046",
          "text": "Application starters",
          "isCorrect": false
        },
        {
          "id": "java-c2047",
          "text": "Boot scripts",
          "isCorrect": false
        },
        {
          "id": "java-c2048",
          "text": "Configuration files",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q513",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What is @SpringBootApplication composed of?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2049",
          "text": "@Configuration",
          "isCorrect": true
        },
        {
          "id": "java-c2050",
          "text": "@EnableAutoConfiguration",
          "isCorrect": true
        },
        {
          "id": "java-c2051",
          "text": "@ComponentScan",
          "isCorrect": true
        },
        {
          "id": "java-c2052",
          "text": "@Repository",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q514",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of application.properties vs application.yml?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2053",
          "text": "Different formats for same configuration, YAML more readable",
          "isCorrect": true
        },
        {
          "id": "java-c2054",
          "text": "Properties is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c2055",
          "text": "YAML is faster",
          "isCorrect": false
        },
        {
          "id": "java-c2056",
          "text": "Properties is required",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q515",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring profiles used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2057",
          "text": "Environment-specific configuration (dev, test, prod)",
          "isCorrect": true
        },
        {
          "id": "java-c2058",
          "text": "User profiles",
          "isCorrect": false
        },
        {
          "id": "java-c2059",
          "text": "Performance profiling",
          "isCorrect": false
        },
        {
          "id": "java-c2060",
          "text": "Security profiles",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q516",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is @ConditionalOnProperty?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2061",
          "text": "Bean created only if property exists/matches value",
          "isCorrect": true
        },
        {
          "id": "java-c2062",
          "text": "Property validation",
          "isCorrect": false
        },
        {
          "id": "java-c2063",
          "text": "Property encryption",
          "isCorrect": false
        },
        {
          "id": "java-c2064",
          "text": "Property binding",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q517",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Data JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2065",
          "text": "Abstraction over JPA with repository pattern",
          "isCorrect": true
        },
        {
          "id": "java-c2066",
          "text": "Database driver",
          "isCorrect": false
        },
        {
          "id": "java-c2067",
          "text": "ORM implementation",
          "isCorrect": false
        },
        {
          "id": "java-c2068",
          "text": "SQL generator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q518",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between @Entity and @Table?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2069",
          "text": "@Entity: JPA entity class; @Table: customize table mapping",
          "isCorrect": true
        },
        {
          "id": "java-c2070",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c2071",
          "text": "@Entity is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c2072",
          "text": "@Table is for views only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q519",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is pessimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2073",
          "text": "Database-level lock acquired during transaction",
          "isCorrect": true
        },
        {
          "id": "java-c2074",
          "text": "Optimistic locking",
          "isCorrect": false
        },
        {
          "id": "java-c2075",
          "text": "Application-level lock",
          "isCorrect": false
        },
        {
          "id": "java-c2076",
          "text": "Read-only lock",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q520",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is optimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2077",
          "text": "Version-based concurrency control, checked at commit",
          "isCorrect": true
        },
        {
          "id": "java-c2078",
          "text": "Database lock",
          "isCorrect": false
        },
        {
          "id": "java-c2079",
          "text": "No locking",
          "isCorrect": false
        },
        {
          "id": "java-c2080",
          "text": "Pessimistic locking",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q521",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Boot auto-configuration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2081",
          "text": "Automatically configures beans based on classpath and properties",
          "isCorrect": true
        },
        {
          "id": "java-c2082",
          "text": "Manual configuration",
          "isCorrect": false
        },
        {
          "id": "java-c2083",
          "text": "XML configuration",
          "isCorrect": false
        },
        {
          "id": "java-c2084",
          "text": "Annotation processing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q522",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What are Spring Boot starters?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2085",
          "text": "Dependency descriptors with related dependencies grouped",
          "isCorrect": true
        },
        {
          "id": "java-c2086",
          "text": "Application starters",
          "isCorrect": false
        },
        {
          "id": "java-c2087",
          "text": "Boot scripts",
          "isCorrect": false
        },
        {
          "id": "java-c2088",
          "text": "Configuration files",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q523",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What is @SpringBootApplication composed of?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2089",
          "text": "@Configuration",
          "isCorrect": true
        },
        {
          "id": "java-c2090",
          "text": "@EnableAutoConfiguration",
          "isCorrect": true
        },
        {
          "id": "java-c2091",
          "text": "@ComponentScan",
          "isCorrect": true
        },
        {
          "id": "java-c2092",
          "text": "@Repository",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q524",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of application.properties vs application.yml?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2093",
          "text": "Different formats for same configuration, YAML more readable",
          "isCorrect": true
        },
        {
          "id": "java-c2094",
          "text": "Properties is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c2095",
          "text": "YAML is faster",
          "isCorrect": false
        },
        {
          "id": "java-c2096",
          "text": "Properties is required",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q525",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring profiles used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2097",
          "text": "Environment-specific configuration (dev, test, prod)",
          "isCorrect": true
        },
        {
          "id": "java-c2098",
          "text": "User profiles",
          "isCorrect": false
        },
        {
          "id": "java-c2099",
          "text": "Performance profiling",
          "isCorrect": false
        },
        {
          "id": "java-c2100",
          "text": "Security profiles",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q526",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is @ConditionalOnProperty?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2101",
          "text": "Bean created only if property exists/matches value",
          "isCorrect": true
        },
        {
          "id": "java-c2102",
          "text": "Property validation",
          "isCorrect": false
        },
        {
          "id": "java-c2103",
          "text": "Property encryption",
          "isCorrect": false
        },
        {
          "id": "java-c2104",
          "text": "Property binding",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q527",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Data JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2105",
          "text": "Abstraction over JPA with repository pattern",
          "isCorrect": true
        },
        {
          "id": "java-c2106",
          "text": "Database driver",
          "isCorrect": false
        },
        {
          "id": "java-c2107",
          "text": "ORM implementation",
          "isCorrect": false
        },
        {
          "id": "java-c2108",
          "text": "SQL generator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q528",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between @Entity and @Table?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2109",
          "text": "@Entity: JPA entity class; @Table: customize table mapping",
          "isCorrect": true
        },
        {
          "id": "java-c2110",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c2111",
          "text": "@Entity is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c2112",
          "text": "@Table is for views only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q529",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is pessimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2113",
          "text": "Database-level lock acquired during transaction",
          "isCorrect": true
        },
        {
          "id": "java-c2114",
          "text": "Optimistic locking",
          "isCorrect": false
        },
        {
          "id": "java-c2115",
          "text": "Application-level lock",
          "isCorrect": false
        },
        {
          "id": "java-c2116",
          "text": "Read-only lock",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q530",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is optimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2117",
          "text": "Version-based concurrency control, checked at commit",
          "isCorrect": true
        },
        {
          "id": "java-c2118",
          "text": "Database lock",
          "isCorrect": false
        },
        {
          "id": "java-c2119",
          "text": "No locking",
          "isCorrect": false
        },
        {
          "id": "java-c2120",
          "text": "Pessimistic locking",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q531",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Boot auto-configuration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2121",
          "text": "Automatically configures beans based on classpath and properties",
          "isCorrect": true
        },
        {
          "id": "java-c2122",
          "text": "Manual configuration",
          "isCorrect": false
        },
        {
          "id": "java-c2123",
          "text": "XML configuration",
          "isCorrect": false
        },
        {
          "id": "java-c2124",
          "text": "Annotation processing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q532",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What are Spring Boot starters?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2125",
          "text": "Dependency descriptors with related dependencies grouped",
          "isCorrect": true
        },
        {
          "id": "java-c2126",
          "text": "Application starters",
          "isCorrect": false
        },
        {
          "id": "java-c2127",
          "text": "Boot scripts",
          "isCorrect": false
        },
        {
          "id": "java-c2128",
          "text": "Configuration files",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q533",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What is @SpringBootApplication composed of?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2129",
          "text": "@Configuration",
          "isCorrect": true
        },
        {
          "id": "java-c2130",
          "text": "@EnableAutoConfiguration",
          "isCorrect": true
        },
        {
          "id": "java-c2131",
          "text": "@ComponentScan",
          "isCorrect": true
        },
        {
          "id": "java-c2132",
          "text": "@Repository",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q534",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of application.properties vs application.yml?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2133",
          "text": "Different formats for same configuration, YAML more readable",
          "isCorrect": true
        },
        {
          "id": "java-c2134",
          "text": "Properties is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c2135",
          "text": "YAML is faster",
          "isCorrect": false
        },
        {
          "id": "java-c2136",
          "text": "Properties is required",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q535",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring profiles used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2137",
          "text": "Environment-specific configuration (dev, test, prod)",
          "isCorrect": true
        },
        {
          "id": "java-c2138",
          "text": "User profiles",
          "isCorrect": false
        },
        {
          "id": "java-c2139",
          "text": "Performance profiling",
          "isCorrect": false
        },
        {
          "id": "java-c2140",
          "text": "Security profiles",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q536",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is @ConditionalOnProperty?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2141",
          "text": "Bean created only if property exists/matches value",
          "isCorrect": true
        },
        {
          "id": "java-c2142",
          "text": "Property validation",
          "isCorrect": false
        },
        {
          "id": "java-c2143",
          "text": "Property encryption",
          "isCorrect": false
        },
        {
          "id": "java-c2144",
          "text": "Property binding",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q537",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Data JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2145",
          "text": "Abstraction over JPA with repository pattern",
          "isCorrect": true
        },
        {
          "id": "java-c2146",
          "text": "Database driver",
          "isCorrect": false
        },
        {
          "id": "java-c2147",
          "text": "ORM implementation",
          "isCorrect": false
        },
        {
          "id": "java-c2148",
          "text": "SQL generator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q538",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between @Entity and @Table?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2149",
          "text": "@Entity: JPA entity class; @Table: customize table mapping",
          "isCorrect": true
        },
        {
          "id": "java-c2150",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c2151",
          "text": "@Entity is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c2152",
          "text": "@Table is for views only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q539",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is pessimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2153",
          "text": "Database-level lock acquired during transaction",
          "isCorrect": true
        },
        {
          "id": "java-c2154",
          "text": "Optimistic locking",
          "isCorrect": false
        },
        {
          "id": "java-c2155",
          "text": "Application-level lock",
          "isCorrect": false
        },
        {
          "id": "java-c2156",
          "text": "Read-only lock",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q540",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is optimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2157",
          "text": "Version-based concurrency control, checked at commit",
          "isCorrect": true
        },
        {
          "id": "java-c2158",
          "text": "Database lock",
          "isCorrect": false
        },
        {
          "id": "java-c2159",
          "text": "No locking",
          "isCorrect": false
        },
        {
          "id": "java-c2160",
          "text": "Pessimistic locking",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q541",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Boot auto-configuration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2161",
          "text": "Automatically configures beans based on classpath and properties",
          "isCorrect": true
        },
        {
          "id": "java-c2162",
          "text": "Manual configuration",
          "isCorrect": false
        },
        {
          "id": "java-c2163",
          "text": "XML configuration",
          "isCorrect": false
        },
        {
          "id": "java-c2164",
          "text": "Annotation processing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q542",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What are Spring Boot starters?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2165",
          "text": "Dependency descriptors with related dependencies grouped",
          "isCorrect": true
        },
        {
          "id": "java-c2166",
          "text": "Application starters",
          "isCorrect": false
        },
        {
          "id": "java-c2167",
          "text": "Boot scripts",
          "isCorrect": false
        },
        {
          "id": "java-c2168",
          "text": "Configuration files",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q543",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What is @SpringBootApplication composed of?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2169",
          "text": "@Configuration",
          "isCorrect": true
        },
        {
          "id": "java-c2170",
          "text": "@EnableAutoConfiguration",
          "isCorrect": true
        },
        {
          "id": "java-c2171",
          "text": "@ComponentScan",
          "isCorrect": true
        },
        {
          "id": "java-c2172",
          "text": "@Repository",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q544",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of application.properties vs application.yml?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2173",
          "text": "Different formats for same configuration, YAML more readable",
          "isCorrect": true
        },
        {
          "id": "java-c2174",
          "text": "Properties is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c2175",
          "text": "YAML is faster",
          "isCorrect": false
        },
        {
          "id": "java-c2176",
          "text": "Properties is required",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q545",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring profiles used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2177",
          "text": "Environment-specific configuration (dev, test, prod)",
          "isCorrect": true
        },
        {
          "id": "java-c2178",
          "text": "User profiles",
          "isCorrect": false
        },
        {
          "id": "java-c2179",
          "text": "Performance profiling",
          "isCorrect": false
        },
        {
          "id": "java-c2180",
          "text": "Security profiles",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q546",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is @ConditionalOnProperty?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2181",
          "text": "Bean created only if property exists/matches value",
          "isCorrect": true
        },
        {
          "id": "java-c2182",
          "text": "Property validation",
          "isCorrect": false
        },
        {
          "id": "java-c2183",
          "text": "Property encryption",
          "isCorrect": false
        },
        {
          "id": "java-c2184",
          "text": "Property binding",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q547",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Data JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2185",
          "text": "Abstraction over JPA with repository pattern",
          "isCorrect": true
        },
        {
          "id": "java-c2186",
          "text": "Database driver",
          "isCorrect": false
        },
        {
          "id": "java-c2187",
          "text": "ORM implementation",
          "isCorrect": false
        },
        {
          "id": "java-c2188",
          "text": "SQL generator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q548",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between @Entity and @Table?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2189",
          "text": "@Entity: JPA entity class; @Table: customize table mapping",
          "isCorrect": true
        },
        {
          "id": "java-c2190",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c2191",
          "text": "@Entity is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c2192",
          "text": "@Table is for views only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q549",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is pessimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2193",
          "text": "Database-level lock acquired during transaction",
          "isCorrect": true
        },
        {
          "id": "java-c2194",
          "text": "Optimistic locking",
          "isCorrect": false
        },
        {
          "id": "java-c2195",
          "text": "Application-level lock",
          "isCorrect": false
        },
        {
          "id": "java-c2196",
          "text": "Read-only lock",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q550",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is optimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2197",
          "text": "Version-based concurrency control, checked at commit",
          "isCorrect": true
        },
        {
          "id": "java-c2198",
          "text": "Database lock",
          "isCorrect": false
        },
        {
          "id": "java-c2199",
          "text": "No locking",
          "isCorrect": false
        },
        {
          "id": "java-c2200",
          "text": "Pessimistic locking",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q551",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Boot auto-configuration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2201",
          "text": "Automatically configures beans based on classpath and properties",
          "isCorrect": true
        },
        {
          "id": "java-c2202",
          "text": "Manual configuration",
          "isCorrect": false
        },
        {
          "id": "java-c2203",
          "text": "XML configuration",
          "isCorrect": false
        },
        {
          "id": "java-c2204",
          "text": "Annotation processing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q552",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What are Spring Boot starters?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2205",
          "text": "Dependency descriptors with related dependencies grouped",
          "isCorrect": true
        },
        {
          "id": "java-c2206",
          "text": "Application starters",
          "isCorrect": false
        },
        {
          "id": "java-c2207",
          "text": "Boot scripts",
          "isCorrect": false
        },
        {
          "id": "java-c2208",
          "text": "Configuration files",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q553",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What is @SpringBootApplication composed of?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2209",
          "text": "@Configuration",
          "isCorrect": true
        },
        {
          "id": "java-c2210",
          "text": "@EnableAutoConfiguration",
          "isCorrect": true
        },
        {
          "id": "java-c2211",
          "text": "@ComponentScan",
          "isCorrect": true
        },
        {
          "id": "java-c2212",
          "text": "@Repository",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q554",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of application.properties vs application.yml?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2213",
          "text": "Different formats for same configuration, YAML more readable",
          "isCorrect": true
        },
        {
          "id": "java-c2214",
          "text": "Properties is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c2215",
          "text": "YAML is faster",
          "isCorrect": false
        },
        {
          "id": "java-c2216",
          "text": "Properties is required",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q555",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring profiles used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2217",
          "text": "Environment-specific configuration (dev, test, prod)",
          "isCorrect": true
        },
        {
          "id": "java-c2218",
          "text": "User profiles",
          "isCorrect": false
        },
        {
          "id": "java-c2219",
          "text": "Performance profiling",
          "isCorrect": false
        },
        {
          "id": "java-c2220",
          "text": "Security profiles",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q556",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is @ConditionalOnProperty?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2221",
          "text": "Bean created only if property exists/matches value",
          "isCorrect": true
        },
        {
          "id": "java-c2222",
          "text": "Property validation",
          "isCorrect": false
        },
        {
          "id": "java-c2223",
          "text": "Property encryption",
          "isCorrect": false
        },
        {
          "id": "java-c2224",
          "text": "Property binding",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q557",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Data JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2225",
          "text": "Abstraction over JPA with repository pattern",
          "isCorrect": true
        },
        {
          "id": "java-c2226",
          "text": "Database driver",
          "isCorrect": false
        },
        {
          "id": "java-c2227",
          "text": "ORM implementation",
          "isCorrect": false
        },
        {
          "id": "java-c2228",
          "text": "SQL generator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q558",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between @Entity and @Table?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2229",
          "text": "@Entity: JPA entity class; @Table: customize table mapping",
          "isCorrect": true
        },
        {
          "id": "java-c2230",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c2231",
          "text": "@Entity is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c2232",
          "text": "@Table is for views only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q559",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is pessimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2233",
          "text": "Database-level lock acquired during transaction",
          "isCorrect": true
        },
        {
          "id": "java-c2234",
          "text": "Optimistic locking",
          "isCorrect": false
        },
        {
          "id": "java-c2235",
          "text": "Application-level lock",
          "isCorrect": false
        },
        {
          "id": "java-c2236",
          "text": "Read-only lock",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q560",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is optimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2237",
          "text": "Version-based concurrency control, checked at commit",
          "isCorrect": true
        },
        {
          "id": "java-c2238",
          "text": "Database lock",
          "isCorrect": false
        },
        {
          "id": "java-c2239",
          "text": "No locking",
          "isCorrect": false
        },
        {
          "id": "java-c2240",
          "text": "Pessimistic locking",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q561",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Boot auto-configuration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2241",
          "text": "Automatically configures beans based on classpath and properties",
          "isCorrect": true
        },
        {
          "id": "java-c2242",
          "text": "Manual configuration",
          "isCorrect": false
        },
        {
          "id": "java-c2243",
          "text": "XML configuration",
          "isCorrect": false
        },
        {
          "id": "java-c2244",
          "text": "Annotation processing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q562",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What are Spring Boot starters?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2245",
          "text": "Dependency descriptors with related dependencies grouped",
          "isCorrect": true
        },
        {
          "id": "java-c2246",
          "text": "Application starters",
          "isCorrect": false
        },
        {
          "id": "java-c2247",
          "text": "Boot scripts",
          "isCorrect": false
        },
        {
          "id": "java-c2248",
          "text": "Configuration files",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q563",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What is @SpringBootApplication composed of?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2249",
          "text": "@Configuration",
          "isCorrect": true
        },
        {
          "id": "java-c2250",
          "text": "@EnableAutoConfiguration",
          "isCorrect": true
        },
        {
          "id": "java-c2251",
          "text": "@ComponentScan",
          "isCorrect": true
        },
        {
          "id": "java-c2252",
          "text": "@Repository",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q564",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of application.properties vs application.yml?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2253",
          "text": "Different formats for same configuration, YAML more readable",
          "isCorrect": true
        },
        {
          "id": "java-c2254",
          "text": "Properties is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c2255",
          "text": "YAML is faster",
          "isCorrect": false
        },
        {
          "id": "java-c2256",
          "text": "Properties is required",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q565",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring profiles used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2257",
          "text": "Environment-specific configuration (dev, test, prod)",
          "isCorrect": true
        },
        {
          "id": "java-c2258",
          "text": "User profiles",
          "isCorrect": false
        },
        {
          "id": "java-c2259",
          "text": "Performance profiling",
          "isCorrect": false
        },
        {
          "id": "java-c2260",
          "text": "Security profiles",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q566",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is @ConditionalOnProperty?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2261",
          "text": "Bean created only if property exists/matches value",
          "isCorrect": true
        },
        {
          "id": "java-c2262",
          "text": "Property validation",
          "isCorrect": false
        },
        {
          "id": "java-c2263",
          "text": "Property encryption",
          "isCorrect": false
        },
        {
          "id": "java-c2264",
          "text": "Property binding",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q567",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Data JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2265",
          "text": "Abstraction over JPA with repository pattern",
          "isCorrect": true
        },
        {
          "id": "java-c2266",
          "text": "Database driver",
          "isCorrect": false
        },
        {
          "id": "java-c2267",
          "text": "ORM implementation",
          "isCorrect": false
        },
        {
          "id": "java-c2268",
          "text": "SQL generator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q568",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between @Entity and @Table?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2269",
          "text": "@Entity: JPA entity class; @Table: customize table mapping",
          "isCorrect": true
        },
        {
          "id": "java-c2270",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c2271",
          "text": "@Entity is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c2272",
          "text": "@Table is for views only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q569",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is pessimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2273",
          "text": "Database-level lock acquired during transaction",
          "isCorrect": true
        },
        {
          "id": "java-c2274",
          "text": "Optimistic locking",
          "isCorrect": false
        },
        {
          "id": "java-c2275",
          "text": "Application-level lock",
          "isCorrect": false
        },
        {
          "id": "java-c2276",
          "text": "Read-only lock",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q570",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is optimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2277",
          "text": "Version-based concurrency control, checked at commit",
          "isCorrect": true
        },
        {
          "id": "java-c2278",
          "text": "Database lock",
          "isCorrect": false
        },
        {
          "id": "java-c2279",
          "text": "No locking",
          "isCorrect": false
        },
        {
          "id": "java-c2280",
          "text": "Pessimistic locking",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q571",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Boot auto-configuration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2281",
          "text": "Automatically configures beans based on classpath and properties",
          "isCorrect": true
        },
        {
          "id": "java-c2282",
          "text": "Manual configuration",
          "isCorrect": false
        },
        {
          "id": "java-c2283",
          "text": "XML configuration",
          "isCorrect": false
        },
        {
          "id": "java-c2284",
          "text": "Annotation processing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q572",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What are Spring Boot starters?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2285",
          "text": "Dependency descriptors with related dependencies grouped",
          "isCorrect": true
        },
        {
          "id": "java-c2286",
          "text": "Application starters",
          "isCorrect": false
        },
        {
          "id": "java-c2287",
          "text": "Boot scripts",
          "isCorrect": false
        },
        {
          "id": "java-c2288",
          "text": "Configuration files",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q573",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What is @SpringBootApplication composed of?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2289",
          "text": "@Configuration",
          "isCorrect": true
        },
        {
          "id": "java-c2290",
          "text": "@EnableAutoConfiguration",
          "isCorrect": true
        },
        {
          "id": "java-c2291",
          "text": "@ComponentScan",
          "isCorrect": true
        },
        {
          "id": "java-c2292",
          "text": "@Repository",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q574",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of application.properties vs application.yml?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2293",
          "text": "Different formats for same configuration, YAML more readable",
          "isCorrect": true
        },
        {
          "id": "java-c2294",
          "text": "Properties is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c2295",
          "text": "YAML is faster",
          "isCorrect": false
        },
        {
          "id": "java-c2296",
          "text": "Properties is required",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q575",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring profiles used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2297",
          "text": "Environment-specific configuration (dev, test, prod)",
          "isCorrect": true
        },
        {
          "id": "java-c2298",
          "text": "User profiles",
          "isCorrect": false
        },
        {
          "id": "java-c2299",
          "text": "Performance profiling",
          "isCorrect": false
        },
        {
          "id": "java-c2300",
          "text": "Security profiles",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q576",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is @ConditionalOnProperty?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2301",
          "text": "Bean created only if property exists/matches value",
          "isCorrect": true
        },
        {
          "id": "java-c2302",
          "text": "Property validation",
          "isCorrect": false
        },
        {
          "id": "java-c2303",
          "text": "Property encryption",
          "isCorrect": false
        },
        {
          "id": "java-c2304",
          "text": "Property binding",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q577",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Data JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2305",
          "text": "Abstraction over JPA with repository pattern",
          "isCorrect": true
        },
        {
          "id": "java-c2306",
          "text": "Database driver",
          "isCorrect": false
        },
        {
          "id": "java-c2307",
          "text": "ORM implementation",
          "isCorrect": false
        },
        {
          "id": "java-c2308",
          "text": "SQL generator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q578",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between @Entity and @Table?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2309",
          "text": "@Entity: JPA entity class; @Table: customize table mapping",
          "isCorrect": true
        },
        {
          "id": "java-c2310",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c2311",
          "text": "@Entity is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c2312",
          "text": "@Table is for views only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q579",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is pessimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2313",
          "text": "Database-level lock acquired during transaction",
          "isCorrect": true
        },
        {
          "id": "java-c2314",
          "text": "Optimistic locking",
          "isCorrect": false
        },
        {
          "id": "java-c2315",
          "text": "Application-level lock",
          "isCorrect": false
        },
        {
          "id": "java-c2316",
          "text": "Read-only lock",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q580",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is optimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2317",
          "text": "Version-based concurrency control, checked at commit",
          "isCorrect": true
        },
        {
          "id": "java-c2318",
          "text": "Database lock",
          "isCorrect": false
        },
        {
          "id": "java-c2319",
          "text": "No locking",
          "isCorrect": false
        },
        {
          "id": "java-c2320",
          "text": "Pessimistic locking",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q581",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Boot auto-configuration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2321",
          "text": "Automatically configures beans based on classpath and properties",
          "isCorrect": true
        },
        {
          "id": "java-c2322",
          "text": "Manual configuration",
          "isCorrect": false
        },
        {
          "id": "java-c2323",
          "text": "XML configuration",
          "isCorrect": false
        },
        {
          "id": "java-c2324",
          "text": "Annotation processing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q582",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What are Spring Boot starters?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2325",
          "text": "Dependency descriptors with related dependencies grouped",
          "isCorrect": true
        },
        {
          "id": "java-c2326",
          "text": "Application starters",
          "isCorrect": false
        },
        {
          "id": "java-c2327",
          "text": "Boot scripts",
          "isCorrect": false
        },
        {
          "id": "java-c2328",
          "text": "Configuration files",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q583",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What is @SpringBootApplication composed of?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2329",
          "text": "@Configuration",
          "isCorrect": true
        },
        {
          "id": "java-c2330",
          "text": "@EnableAutoConfiguration",
          "isCorrect": true
        },
        {
          "id": "java-c2331",
          "text": "@ComponentScan",
          "isCorrect": true
        },
        {
          "id": "java-c2332",
          "text": "@Repository",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q584",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of application.properties vs application.yml?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2333",
          "text": "Different formats for same configuration, YAML more readable",
          "isCorrect": true
        },
        {
          "id": "java-c2334",
          "text": "Properties is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c2335",
          "text": "YAML is faster",
          "isCorrect": false
        },
        {
          "id": "java-c2336",
          "text": "Properties is required",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q585",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring profiles used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2337",
          "text": "Environment-specific configuration (dev, test, prod)",
          "isCorrect": true
        },
        {
          "id": "java-c2338",
          "text": "User profiles",
          "isCorrect": false
        },
        {
          "id": "java-c2339",
          "text": "Performance profiling",
          "isCorrect": false
        },
        {
          "id": "java-c2340",
          "text": "Security profiles",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q586",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is @ConditionalOnProperty?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2341",
          "text": "Bean created only if property exists/matches value",
          "isCorrect": true
        },
        {
          "id": "java-c2342",
          "text": "Property validation",
          "isCorrect": false
        },
        {
          "id": "java-c2343",
          "text": "Property encryption",
          "isCorrect": false
        },
        {
          "id": "java-c2344",
          "text": "Property binding",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q587",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Data JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2345",
          "text": "Abstraction over JPA with repository pattern",
          "isCorrect": true
        },
        {
          "id": "java-c2346",
          "text": "Database driver",
          "isCorrect": false
        },
        {
          "id": "java-c2347",
          "text": "ORM implementation",
          "isCorrect": false
        },
        {
          "id": "java-c2348",
          "text": "SQL generator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q588",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between @Entity and @Table?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2349",
          "text": "@Entity: JPA entity class; @Table: customize table mapping",
          "isCorrect": true
        },
        {
          "id": "java-c2350",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c2351",
          "text": "@Entity is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c2352",
          "text": "@Table is for views only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q589",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is pessimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2353",
          "text": "Database-level lock acquired during transaction",
          "isCorrect": true
        },
        {
          "id": "java-c2354",
          "text": "Optimistic locking",
          "isCorrect": false
        },
        {
          "id": "java-c2355",
          "text": "Application-level lock",
          "isCorrect": false
        },
        {
          "id": "java-c2356",
          "text": "Read-only lock",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q590",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is optimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2357",
          "text": "Version-based concurrency control, checked at commit",
          "isCorrect": true
        },
        {
          "id": "java-c2358",
          "text": "Database lock",
          "isCorrect": false
        },
        {
          "id": "java-c2359",
          "text": "No locking",
          "isCorrect": false
        },
        {
          "id": "java-c2360",
          "text": "Pessimistic locking",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q591",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Boot auto-configuration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2361",
          "text": "Automatically configures beans based on classpath and properties",
          "isCorrect": true
        },
        {
          "id": "java-c2362",
          "text": "Manual configuration",
          "isCorrect": false
        },
        {
          "id": "java-c2363",
          "text": "XML configuration",
          "isCorrect": false
        },
        {
          "id": "java-c2364",
          "text": "Annotation processing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q592",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What are Spring Boot starters?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2365",
          "text": "Dependency descriptors with related dependencies grouped",
          "isCorrect": true
        },
        {
          "id": "java-c2366",
          "text": "Application starters",
          "isCorrect": false
        },
        {
          "id": "java-c2367",
          "text": "Boot scripts",
          "isCorrect": false
        },
        {
          "id": "java-c2368",
          "text": "Configuration files",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q593",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What is @SpringBootApplication composed of?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2369",
          "text": "@Configuration",
          "isCorrect": true
        },
        {
          "id": "java-c2370",
          "text": "@EnableAutoConfiguration",
          "isCorrect": true
        },
        {
          "id": "java-c2371",
          "text": "@ComponentScan",
          "isCorrect": true
        },
        {
          "id": "java-c2372",
          "text": "@Repository",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q594",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the purpose of application.properties vs application.yml?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2373",
          "text": "Different formats for same configuration, YAML more readable",
          "isCorrect": true
        },
        {
          "id": "java-c2374",
          "text": "Properties is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c2375",
          "text": "YAML is faster",
          "isCorrect": false
        },
        {
          "id": "java-c2376",
          "text": "Properties is required",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q595",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring profiles used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2377",
          "text": "Environment-specific configuration (dev, test, prod)",
          "isCorrect": true
        },
        {
          "id": "java-c2378",
          "text": "User profiles",
          "isCorrect": false
        },
        {
          "id": "java-c2379",
          "text": "Performance profiling",
          "isCorrect": false
        },
        {
          "id": "java-c2380",
          "text": "Security profiles",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q596",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is @ConditionalOnProperty?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2381",
          "text": "Bean created only if property exists/matches value",
          "isCorrect": true
        },
        {
          "id": "java-c2382",
          "text": "Property validation",
          "isCorrect": false
        },
        {
          "id": "java-c2383",
          "text": "Property encryption",
          "isCorrect": false
        },
        {
          "id": "java-c2384",
          "text": "Property binding",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q597",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Spring Data JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2385",
          "text": "Abstraction over JPA with repository pattern",
          "isCorrect": true
        },
        {
          "id": "java-c2386",
          "text": "Database driver",
          "isCorrect": false
        },
        {
          "id": "java-c2387",
          "text": "ORM implementation",
          "isCorrect": false
        },
        {
          "id": "java-c2388",
          "text": "SQL generator",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q598",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between @Entity and @Table?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2389",
          "text": "@Entity: JPA entity class; @Table: customize table mapping",
          "isCorrect": true
        },
        {
          "id": "java-c2390",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c2391",
          "text": "@Entity is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c2392",
          "text": "@Table is for views only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q599",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is pessimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2393",
          "text": "Database-level lock acquired during transaction",
          "isCorrect": true
        },
        {
          "id": "java-c2394",
          "text": "Optimistic locking",
          "isCorrect": false
        },
        {
          "id": "java-c2395",
          "text": "Application-level lock",
          "isCorrect": false
        },
        {
          "id": "java-c2396",
          "text": "Read-only lock",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q600",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is optimistic locking in JPA?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2397",
          "text": "Version-based concurrency control, checked at commit",
          "isCorrect": true
        },
        {
          "id": "java-c2398",
          "text": "Database lock",
          "isCorrect": false
        },
        {
          "id": "java-c2399",
          "text": "No locking",
          "isCorrect": false
        },
        {
          "id": "java-c2400",
          "text": "Pessimistic locking",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q601",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is service discovery?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2401",
          "text": "Dynamic registration and lookup of service instances",
          "isCorrect": true
        },
        {
          "id": "java-c2402",
          "text": "Service deployment",
          "isCorrect": false
        },
        {
          "id": "java-c2403",
          "text": "Service monitoring",
          "isCorrect": false
        },
        {
          "id": "java-c2404",
          "text": "Service testing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q602",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is circuit breaker pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2405",
          "text": "Prevents cascading failures by failing fast when service down",
          "isCorrect": true
        },
        {
          "id": "java-c2406",
          "text": "Electrical circuit",
          "isCorrect": false
        },
        {
          "id": "java-c2407",
          "text": "Load balancing",
          "isCorrect": false
        },
        {
          "id": "java-c2408",
          "text": "Retry mechanism",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q603",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is API Gateway pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2409",
          "text": "Single entry point routing requests to microservices",
          "isCorrect": true
        },
        {
          "id": "java-c2410",
          "text": "Database gateway",
          "isCorrect": false
        },
        {
          "id": "java-c2411",
          "text": "Security gateway only",
          "isCorrect": false
        },
        {
          "id": "java-c2412",
          "text": "Load balancer",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q604",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is saga pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2413",
          "text": "Distributed transaction pattern with compensating transactions",
          "isCorrect": true
        },
        {
          "id": "java-c2414",
          "text": "Story pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2415",
          "text": "Sequence pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2416",
          "text": "Transaction script",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q605",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is CQRS?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2417",
          "text": "Command Query Responsibility Segregation, separate read/write models",
          "isCorrect": true
        },
        {
          "id": "java-c2418",
          "text": "Database pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2419",
          "text": "Security pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2420",
          "text": "Testing pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q606",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is event sourcing?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2421",
          "text": "Stores state changes as events, rebuild state by replaying",
          "isCorrect": true
        },
        {
          "id": "java-c2422",
          "text": "Event handling",
          "isCorrect": false
        },
        {
          "id": "java-c2423",
          "text": "Event logging",
          "isCorrect": false
        },
        {
          "id": "java-c2424",
          "text": "Event monitoring",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q607",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is eventual consistency?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2425",
          "text": "Data becomes consistent over time, not immediately",
          "isCorrect": true
        },
        {
          "id": "java-c2426",
          "text": "Immediate consistency",
          "isCorrect": false
        },
        {
          "id": "java-c2427",
          "text": "No consistency",
          "isCorrect": false
        },
        {
          "id": "java-c2428",
          "text": "Strong consistency",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q608",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the strangler fig pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2429",
          "text": "Gradually migrate legacy system by replacing piece by piece",
          "isCorrect": true
        },
        {
          "id": "java-c2430",
          "text": "Tree pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2431",
          "text": "Deployment pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2432",
          "text": "Testing pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q609",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Docker containerization?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2433",
          "text": "Packages application with dependencies in isolated container",
          "isCorrect": true
        },
        {
          "id": "java-c2434",
          "text": "Virtual machine",
          "isCorrect": false
        },
        {
          "id": "java-c2435",
          "text": "Cloud platform",
          "isCorrect": false
        },
        {
          "id": "java-c2436",
          "text": "Deployment tool only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q610",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Kubernetes orchestration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2437",
          "text": "Automates deployment, scaling, and management of containers",
          "isCorrect": true
        },
        {
          "id": "java-c2438",
          "text": "Container creation",
          "isCorrect": false
        },
        {
          "id": "java-c2439",
          "text": "Image building",
          "isCorrect": false
        },
        {
          "id": "java-c2440",
          "text": "Code deployment",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q611",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is service discovery?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2441",
          "text": "Dynamic registration and lookup of service instances",
          "isCorrect": true
        },
        {
          "id": "java-c2442",
          "text": "Service deployment",
          "isCorrect": false
        },
        {
          "id": "java-c2443",
          "text": "Service monitoring",
          "isCorrect": false
        },
        {
          "id": "java-c2444",
          "text": "Service testing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q612",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is circuit breaker pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2445",
          "text": "Prevents cascading failures by failing fast when service down",
          "isCorrect": true
        },
        {
          "id": "java-c2446",
          "text": "Electrical circuit",
          "isCorrect": false
        },
        {
          "id": "java-c2447",
          "text": "Load balancing",
          "isCorrect": false
        },
        {
          "id": "java-c2448",
          "text": "Retry mechanism",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q613",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is API Gateway pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2449",
          "text": "Single entry point routing requests to microservices",
          "isCorrect": true
        },
        {
          "id": "java-c2450",
          "text": "Database gateway",
          "isCorrect": false
        },
        {
          "id": "java-c2451",
          "text": "Security gateway only",
          "isCorrect": false
        },
        {
          "id": "java-c2452",
          "text": "Load balancer",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q614",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is saga pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2453",
          "text": "Distributed transaction pattern with compensating transactions",
          "isCorrect": true
        },
        {
          "id": "java-c2454",
          "text": "Story pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2455",
          "text": "Sequence pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2456",
          "text": "Transaction script",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q615",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is CQRS?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2457",
          "text": "Command Query Responsibility Segregation, separate read/write models",
          "isCorrect": true
        },
        {
          "id": "java-c2458",
          "text": "Database pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2459",
          "text": "Security pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2460",
          "text": "Testing pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q616",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is event sourcing?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2461",
          "text": "Stores state changes as events, rebuild state by replaying",
          "isCorrect": true
        },
        {
          "id": "java-c2462",
          "text": "Event handling",
          "isCorrect": false
        },
        {
          "id": "java-c2463",
          "text": "Event logging",
          "isCorrect": false
        },
        {
          "id": "java-c2464",
          "text": "Event monitoring",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q617",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is eventual consistency?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2465",
          "text": "Data becomes consistent over time, not immediately",
          "isCorrect": true
        },
        {
          "id": "java-c2466",
          "text": "Immediate consistency",
          "isCorrect": false
        },
        {
          "id": "java-c2467",
          "text": "No consistency",
          "isCorrect": false
        },
        {
          "id": "java-c2468",
          "text": "Strong consistency",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q618",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the strangler fig pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2469",
          "text": "Gradually migrate legacy system by replacing piece by piece",
          "isCorrect": true
        },
        {
          "id": "java-c2470",
          "text": "Tree pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2471",
          "text": "Deployment pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2472",
          "text": "Testing pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q619",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Docker containerization?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2473",
          "text": "Packages application with dependencies in isolated container",
          "isCorrect": true
        },
        {
          "id": "java-c2474",
          "text": "Virtual machine",
          "isCorrect": false
        },
        {
          "id": "java-c2475",
          "text": "Cloud platform",
          "isCorrect": false
        },
        {
          "id": "java-c2476",
          "text": "Deployment tool only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q620",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Kubernetes orchestration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2477",
          "text": "Automates deployment, scaling, and management of containers",
          "isCorrect": true
        },
        {
          "id": "java-c2478",
          "text": "Container creation",
          "isCorrect": false
        },
        {
          "id": "java-c2479",
          "text": "Image building",
          "isCorrect": false
        },
        {
          "id": "java-c2480",
          "text": "Code deployment",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q621",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is service discovery?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2481",
          "text": "Dynamic registration and lookup of service instances",
          "isCorrect": true
        },
        {
          "id": "java-c2482",
          "text": "Service deployment",
          "isCorrect": false
        },
        {
          "id": "java-c2483",
          "text": "Service monitoring",
          "isCorrect": false
        },
        {
          "id": "java-c2484",
          "text": "Service testing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q622",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is circuit breaker pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2485",
          "text": "Prevents cascading failures by failing fast when service down",
          "isCorrect": true
        },
        {
          "id": "java-c2486",
          "text": "Electrical circuit",
          "isCorrect": false
        },
        {
          "id": "java-c2487",
          "text": "Load balancing",
          "isCorrect": false
        },
        {
          "id": "java-c2488",
          "text": "Retry mechanism",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q623",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is API Gateway pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2489",
          "text": "Single entry point routing requests to microservices",
          "isCorrect": true
        },
        {
          "id": "java-c2490",
          "text": "Database gateway",
          "isCorrect": false
        },
        {
          "id": "java-c2491",
          "text": "Security gateway only",
          "isCorrect": false
        },
        {
          "id": "java-c2492",
          "text": "Load balancer",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q624",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is saga pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2493",
          "text": "Distributed transaction pattern with compensating transactions",
          "isCorrect": true
        },
        {
          "id": "java-c2494",
          "text": "Story pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2495",
          "text": "Sequence pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2496",
          "text": "Transaction script",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q625",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is CQRS?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2497",
          "text": "Command Query Responsibility Segregation, separate read/write models",
          "isCorrect": true
        },
        {
          "id": "java-c2498",
          "text": "Database pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2499",
          "text": "Security pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2500",
          "text": "Testing pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q626",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is event sourcing?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2501",
          "text": "Stores state changes as events, rebuild state by replaying",
          "isCorrect": true
        },
        {
          "id": "java-c2502",
          "text": "Event handling",
          "isCorrect": false
        },
        {
          "id": "java-c2503",
          "text": "Event logging",
          "isCorrect": false
        },
        {
          "id": "java-c2504",
          "text": "Event monitoring",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q627",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is eventual consistency?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2505",
          "text": "Data becomes consistent over time, not immediately",
          "isCorrect": true
        },
        {
          "id": "java-c2506",
          "text": "Immediate consistency",
          "isCorrect": false
        },
        {
          "id": "java-c2507",
          "text": "No consistency",
          "isCorrect": false
        },
        {
          "id": "java-c2508",
          "text": "Strong consistency",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q628",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the strangler fig pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2509",
          "text": "Gradually migrate legacy system by replacing piece by piece",
          "isCorrect": true
        },
        {
          "id": "java-c2510",
          "text": "Tree pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2511",
          "text": "Deployment pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2512",
          "text": "Testing pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q629",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Docker containerization?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2513",
          "text": "Packages application with dependencies in isolated container",
          "isCorrect": true
        },
        {
          "id": "java-c2514",
          "text": "Virtual machine",
          "isCorrect": false
        },
        {
          "id": "java-c2515",
          "text": "Cloud platform",
          "isCorrect": false
        },
        {
          "id": "java-c2516",
          "text": "Deployment tool only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q630",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Kubernetes orchestration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2517",
          "text": "Automates deployment, scaling, and management of containers",
          "isCorrect": true
        },
        {
          "id": "java-c2518",
          "text": "Container creation",
          "isCorrect": false
        },
        {
          "id": "java-c2519",
          "text": "Image building",
          "isCorrect": false
        },
        {
          "id": "java-c2520",
          "text": "Code deployment",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q631",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is service discovery?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2521",
          "text": "Dynamic registration and lookup of service instances",
          "isCorrect": true
        },
        {
          "id": "java-c2522",
          "text": "Service deployment",
          "isCorrect": false
        },
        {
          "id": "java-c2523",
          "text": "Service monitoring",
          "isCorrect": false
        },
        {
          "id": "java-c2524",
          "text": "Service testing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q632",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is circuit breaker pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2525",
          "text": "Prevents cascading failures by failing fast when service down",
          "isCorrect": true
        },
        {
          "id": "java-c2526",
          "text": "Electrical circuit",
          "isCorrect": false
        },
        {
          "id": "java-c2527",
          "text": "Load balancing",
          "isCorrect": false
        },
        {
          "id": "java-c2528",
          "text": "Retry mechanism",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q633",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is API Gateway pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2529",
          "text": "Single entry point routing requests to microservices",
          "isCorrect": true
        },
        {
          "id": "java-c2530",
          "text": "Database gateway",
          "isCorrect": false
        },
        {
          "id": "java-c2531",
          "text": "Security gateway only",
          "isCorrect": false
        },
        {
          "id": "java-c2532",
          "text": "Load balancer",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q634",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is saga pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2533",
          "text": "Distributed transaction pattern with compensating transactions",
          "isCorrect": true
        },
        {
          "id": "java-c2534",
          "text": "Story pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2535",
          "text": "Sequence pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2536",
          "text": "Transaction script",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q635",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is CQRS?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2537",
          "text": "Command Query Responsibility Segregation, separate read/write models",
          "isCorrect": true
        },
        {
          "id": "java-c2538",
          "text": "Database pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2539",
          "text": "Security pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2540",
          "text": "Testing pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q636",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is event sourcing?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2541",
          "text": "Stores state changes as events, rebuild state by replaying",
          "isCorrect": true
        },
        {
          "id": "java-c2542",
          "text": "Event handling",
          "isCorrect": false
        },
        {
          "id": "java-c2543",
          "text": "Event logging",
          "isCorrect": false
        },
        {
          "id": "java-c2544",
          "text": "Event monitoring",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q637",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is eventual consistency?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2545",
          "text": "Data becomes consistent over time, not immediately",
          "isCorrect": true
        },
        {
          "id": "java-c2546",
          "text": "Immediate consistency",
          "isCorrect": false
        },
        {
          "id": "java-c2547",
          "text": "No consistency",
          "isCorrect": false
        },
        {
          "id": "java-c2548",
          "text": "Strong consistency",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q638",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the strangler fig pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2549",
          "text": "Gradually migrate legacy system by replacing piece by piece",
          "isCorrect": true
        },
        {
          "id": "java-c2550",
          "text": "Tree pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2551",
          "text": "Deployment pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2552",
          "text": "Testing pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q639",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Docker containerization?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2553",
          "text": "Packages application with dependencies in isolated container",
          "isCorrect": true
        },
        {
          "id": "java-c2554",
          "text": "Virtual machine",
          "isCorrect": false
        },
        {
          "id": "java-c2555",
          "text": "Cloud platform",
          "isCorrect": false
        },
        {
          "id": "java-c2556",
          "text": "Deployment tool only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q640",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Kubernetes orchestration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2557",
          "text": "Automates deployment, scaling, and management of containers",
          "isCorrect": true
        },
        {
          "id": "java-c2558",
          "text": "Container creation",
          "isCorrect": false
        },
        {
          "id": "java-c2559",
          "text": "Image building",
          "isCorrect": false
        },
        {
          "id": "java-c2560",
          "text": "Code deployment",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q641",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is service discovery?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2561",
          "text": "Dynamic registration and lookup of service instances",
          "isCorrect": true
        },
        {
          "id": "java-c2562",
          "text": "Service deployment",
          "isCorrect": false
        },
        {
          "id": "java-c2563",
          "text": "Service monitoring",
          "isCorrect": false
        },
        {
          "id": "java-c2564",
          "text": "Service testing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q642",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is circuit breaker pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2565",
          "text": "Prevents cascading failures by failing fast when service down",
          "isCorrect": true
        },
        {
          "id": "java-c2566",
          "text": "Electrical circuit",
          "isCorrect": false
        },
        {
          "id": "java-c2567",
          "text": "Load balancing",
          "isCorrect": false
        },
        {
          "id": "java-c2568",
          "text": "Retry mechanism",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q643",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is API Gateway pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2569",
          "text": "Single entry point routing requests to microservices",
          "isCorrect": true
        },
        {
          "id": "java-c2570",
          "text": "Database gateway",
          "isCorrect": false
        },
        {
          "id": "java-c2571",
          "text": "Security gateway only",
          "isCorrect": false
        },
        {
          "id": "java-c2572",
          "text": "Load balancer",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q644",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is saga pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2573",
          "text": "Distributed transaction pattern with compensating transactions",
          "isCorrect": true
        },
        {
          "id": "java-c2574",
          "text": "Story pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2575",
          "text": "Sequence pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2576",
          "text": "Transaction script",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q645",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is CQRS?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2577",
          "text": "Command Query Responsibility Segregation, separate read/write models",
          "isCorrect": true
        },
        {
          "id": "java-c2578",
          "text": "Database pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2579",
          "text": "Security pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2580",
          "text": "Testing pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q646",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is event sourcing?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2581",
          "text": "Stores state changes as events, rebuild state by replaying",
          "isCorrect": true
        },
        {
          "id": "java-c2582",
          "text": "Event handling",
          "isCorrect": false
        },
        {
          "id": "java-c2583",
          "text": "Event logging",
          "isCorrect": false
        },
        {
          "id": "java-c2584",
          "text": "Event monitoring",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q647",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is eventual consistency?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2585",
          "text": "Data becomes consistent over time, not immediately",
          "isCorrect": true
        },
        {
          "id": "java-c2586",
          "text": "Immediate consistency",
          "isCorrect": false
        },
        {
          "id": "java-c2587",
          "text": "No consistency",
          "isCorrect": false
        },
        {
          "id": "java-c2588",
          "text": "Strong consistency",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q648",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the strangler fig pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2589",
          "text": "Gradually migrate legacy system by replacing piece by piece",
          "isCorrect": true
        },
        {
          "id": "java-c2590",
          "text": "Tree pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2591",
          "text": "Deployment pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2592",
          "text": "Testing pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q649",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Docker containerization?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2593",
          "text": "Packages application with dependencies in isolated container",
          "isCorrect": true
        },
        {
          "id": "java-c2594",
          "text": "Virtual machine",
          "isCorrect": false
        },
        {
          "id": "java-c2595",
          "text": "Cloud platform",
          "isCorrect": false
        },
        {
          "id": "java-c2596",
          "text": "Deployment tool only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q650",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Kubernetes orchestration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2597",
          "text": "Automates deployment, scaling, and management of containers",
          "isCorrect": true
        },
        {
          "id": "java-c2598",
          "text": "Container creation",
          "isCorrect": false
        },
        {
          "id": "java-c2599",
          "text": "Image building",
          "isCorrect": false
        },
        {
          "id": "java-c2600",
          "text": "Code deployment",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q651",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is service discovery?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2601",
          "text": "Dynamic registration and lookup of service instances",
          "isCorrect": true
        },
        {
          "id": "java-c2602",
          "text": "Service deployment",
          "isCorrect": false
        },
        {
          "id": "java-c2603",
          "text": "Service monitoring",
          "isCorrect": false
        },
        {
          "id": "java-c2604",
          "text": "Service testing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q652",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is circuit breaker pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2605",
          "text": "Prevents cascading failures by failing fast when service down",
          "isCorrect": true
        },
        {
          "id": "java-c2606",
          "text": "Electrical circuit",
          "isCorrect": false
        },
        {
          "id": "java-c2607",
          "text": "Load balancing",
          "isCorrect": false
        },
        {
          "id": "java-c2608",
          "text": "Retry mechanism",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q653",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is API Gateway pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2609",
          "text": "Single entry point routing requests to microservices",
          "isCorrect": true
        },
        {
          "id": "java-c2610",
          "text": "Database gateway",
          "isCorrect": false
        },
        {
          "id": "java-c2611",
          "text": "Security gateway only",
          "isCorrect": false
        },
        {
          "id": "java-c2612",
          "text": "Load balancer",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q654",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is saga pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2613",
          "text": "Distributed transaction pattern with compensating transactions",
          "isCorrect": true
        },
        {
          "id": "java-c2614",
          "text": "Story pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2615",
          "text": "Sequence pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2616",
          "text": "Transaction script",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q655",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is CQRS?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2617",
          "text": "Command Query Responsibility Segregation, separate read/write models",
          "isCorrect": true
        },
        {
          "id": "java-c2618",
          "text": "Database pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2619",
          "text": "Security pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2620",
          "text": "Testing pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q656",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is event sourcing?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2621",
          "text": "Stores state changes as events, rebuild state by replaying",
          "isCorrect": true
        },
        {
          "id": "java-c2622",
          "text": "Event handling",
          "isCorrect": false
        },
        {
          "id": "java-c2623",
          "text": "Event logging",
          "isCorrect": false
        },
        {
          "id": "java-c2624",
          "text": "Event monitoring",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q657",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is eventual consistency?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2625",
          "text": "Data becomes consistent over time, not immediately",
          "isCorrect": true
        },
        {
          "id": "java-c2626",
          "text": "Immediate consistency",
          "isCorrect": false
        },
        {
          "id": "java-c2627",
          "text": "No consistency",
          "isCorrect": false
        },
        {
          "id": "java-c2628",
          "text": "Strong consistency",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q658",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the strangler fig pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2629",
          "text": "Gradually migrate legacy system by replacing piece by piece",
          "isCorrect": true
        },
        {
          "id": "java-c2630",
          "text": "Tree pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2631",
          "text": "Deployment pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2632",
          "text": "Testing pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q659",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Docker containerization?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2633",
          "text": "Packages application with dependencies in isolated container",
          "isCorrect": true
        },
        {
          "id": "java-c2634",
          "text": "Virtual machine",
          "isCorrect": false
        },
        {
          "id": "java-c2635",
          "text": "Cloud platform",
          "isCorrect": false
        },
        {
          "id": "java-c2636",
          "text": "Deployment tool only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q660",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Kubernetes orchestration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2637",
          "text": "Automates deployment, scaling, and management of containers",
          "isCorrect": true
        },
        {
          "id": "java-c2638",
          "text": "Container creation",
          "isCorrect": false
        },
        {
          "id": "java-c2639",
          "text": "Image building",
          "isCorrect": false
        },
        {
          "id": "java-c2640",
          "text": "Code deployment",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q661",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is service discovery?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2641",
          "text": "Dynamic registration and lookup of service instances",
          "isCorrect": true
        },
        {
          "id": "java-c2642",
          "text": "Service deployment",
          "isCorrect": false
        },
        {
          "id": "java-c2643",
          "text": "Service monitoring",
          "isCorrect": false
        },
        {
          "id": "java-c2644",
          "text": "Service testing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q662",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is circuit breaker pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2645",
          "text": "Prevents cascading failures by failing fast when service down",
          "isCorrect": true
        },
        {
          "id": "java-c2646",
          "text": "Electrical circuit",
          "isCorrect": false
        },
        {
          "id": "java-c2647",
          "text": "Load balancing",
          "isCorrect": false
        },
        {
          "id": "java-c2648",
          "text": "Retry mechanism",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q663",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is API Gateway pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2649",
          "text": "Single entry point routing requests to microservices",
          "isCorrect": true
        },
        {
          "id": "java-c2650",
          "text": "Database gateway",
          "isCorrect": false
        },
        {
          "id": "java-c2651",
          "text": "Security gateway only",
          "isCorrect": false
        },
        {
          "id": "java-c2652",
          "text": "Load balancer",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q664",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is saga pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2653",
          "text": "Distributed transaction pattern with compensating transactions",
          "isCorrect": true
        },
        {
          "id": "java-c2654",
          "text": "Story pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2655",
          "text": "Sequence pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2656",
          "text": "Transaction script",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q665",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is CQRS?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2657",
          "text": "Command Query Responsibility Segregation, separate read/write models",
          "isCorrect": true
        },
        {
          "id": "java-c2658",
          "text": "Database pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2659",
          "text": "Security pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2660",
          "text": "Testing pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q666",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is event sourcing?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2661",
          "text": "Stores state changes as events, rebuild state by replaying",
          "isCorrect": true
        },
        {
          "id": "java-c2662",
          "text": "Event handling",
          "isCorrect": false
        },
        {
          "id": "java-c2663",
          "text": "Event logging",
          "isCorrect": false
        },
        {
          "id": "java-c2664",
          "text": "Event monitoring",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q667",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is eventual consistency?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2665",
          "text": "Data becomes consistent over time, not immediately",
          "isCorrect": true
        },
        {
          "id": "java-c2666",
          "text": "Immediate consistency",
          "isCorrect": false
        },
        {
          "id": "java-c2667",
          "text": "No consistency",
          "isCorrect": false
        },
        {
          "id": "java-c2668",
          "text": "Strong consistency",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q668",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the strangler fig pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2669",
          "text": "Gradually migrate legacy system by replacing piece by piece",
          "isCorrect": true
        },
        {
          "id": "java-c2670",
          "text": "Tree pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2671",
          "text": "Deployment pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2672",
          "text": "Testing pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q669",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Docker containerization?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2673",
          "text": "Packages application with dependencies in isolated container",
          "isCorrect": true
        },
        {
          "id": "java-c2674",
          "text": "Virtual machine",
          "isCorrect": false
        },
        {
          "id": "java-c2675",
          "text": "Cloud platform",
          "isCorrect": false
        },
        {
          "id": "java-c2676",
          "text": "Deployment tool only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q670",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Kubernetes orchestration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2677",
          "text": "Automates deployment, scaling, and management of containers",
          "isCorrect": true
        },
        {
          "id": "java-c2678",
          "text": "Container creation",
          "isCorrect": false
        },
        {
          "id": "java-c2679",
          "text": "Image building",
          "isCorrect": false
        },
        {
          "id": "java-c2680",
          "text": "Code deployment",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q671",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is service discovery?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2681",
          "text": "Dynamic registration and lookup of service instances",
          "isCorrect": true
        },
        {
          "id": "java-c2682",
          "text": "Service deployment",
          "isCorrect": false
        },
        {
          "id": "java-c2683",
          "text": "Service monitoring",
          "isCorrect": false
        },
        {
          "id": "java-c2684",
          "text": "Service testing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q672",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is circuit breaker pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2685",
          "text": "Prevents cascading failures by failing fast when service down",
          "isCorrect": true
        },
        {
          "id": "java-c2686",
          "text": "Electrical circuit",
          "isCorrect": false
        },
        {
          "id": "java-c2687",
          "text": "Load balancing",
          "isCorrect": false
        },
        {
          "id": "java-c2688",
          "text": "Retry mechanism",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q673",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is API Gateway pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2689",
          "text": "Single entry point routing requests to microservices",
          "isCorrect": true
        },
        {
          "id": "java-c2690",
          "text": "Database gateway",
          "isCorrect": false
        },
        {
          "id": "java-c2691",
          "text": "Security gateway only",
          "isCorrect": false
        },
        {
          "id": "java-c2692",
          "text": "Load balancer",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q674",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is saga pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2693",
          "text": "Distributed transaction pattern with compensating transactions",
          "isCorrect": true
        },
        {
          "id": "java-c2694",
          "text": "Story pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2695",
          "text": "Sequence pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2696",
          "text": "Transaction script",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q675",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is CQRS?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2697",
          "text": "Command Query Responsibility Segregation, separate read/write models",
          "isCorrect": true
        },
        {
          "id": "java-c2698",
          "text": "Database pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2699",
          "text": "Security pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2700",
          "text": "Testing pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q676",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is event sourcing?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2701",
          "text": "Stores state changes as events, rebuild state by replaying",
          "isCorrect": true
        },
        {
          "id": "java-c2702",
          "text": "Event handling",
          "isCorrect": false
        },
        {
          "id": "java-c2703",
          "text": "Event logging",
          "isCorrect": false
        },
        {
          "id": "java-c2704",
          "text": "Event monitoring",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q677",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is eventual consistency?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2705",
          "text": "Data becomes consistent over time, not immediately",
          "isCorrect": true
        },
        {
          "id": "java-c2706",
          "text": "Immediate consistency",
          "isCorrect": false
        },
        {
          "id": "java-c2707",
          "text": "No consistency",
          "isCorrect": false
        },
        {
          "id": "java-c2708",
          "text": "Strong consistency",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q678",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the strangler fig pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2709",
          "text": "Gradually migrate legacy system by replacing piece by piece",
          "isCorrect": true
        },
        {
          "id": "java-c2710",
          "text": "Tree pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2711",
          "text": "Deployment pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2712",
          "text": "Testing pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q679",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Docker containerization?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2713",
          "text": "Packages application with dependencies in isolated container",
          "isCorrect": true
        },
        {
          "id": "java-c2714",
          "text": "Virtual machine",
          "isCorrect": false
        },
        {
          "id": "java-c2715",
          "text": "Cloud platform",
          "isCorrect": false
        },
        {
          "id": "java-c2716",
          "text": "Deployment tool only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q680",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Kubernetes orchestration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2717",
          "text": "Automates deployment, scaling, and management of containers",
          "isCorrect": true
        },
        {
          "id": "java-c2718",
          "text": "Container creation",
          "isCorrect": false
        },
        {
          "id": "java-c2719",
          "text": "Image building",
          "isCorrect": false
        },
        {
          "id": "java-c2720",
          "text": "Code deployment",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q681",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is service discovery?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2721",
          "text": "Dynamic registration and lookup of service instances",
          "isCorrect": true
        },
        {
          "id": "java-c2722",
          "text": "Service deployment",
          "isCorrect": false
        },
        {
          "id": "java-c2723",
          "text": "Service monitoring",
          "isCorrect": false
        },
        {
          "id": "java-c2724",
          "text": "Service testing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q682",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is circuit breaker pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2725",
          "text": "Prevents cascading failures by failing fast when service down",
          "isCorrect": true
        },
        {
          "id": "java-c2726",
          "text": "Electrical circuit",
          "isCorrect": false
        },
        {
          "id": "java-c2727",
          "text": "Load balancing",
          "isCorrect": false
        },
        {
          "id": "java-c2728",
          "text": "Retry mechanism",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q683",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is API Gateway pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2729",
          "text": "Single entry point routing requests to microservices",
          "isCorrect": true
        },
        {
          "id": "java-c2730",
          "text": "Database gateway",
          "isCorrect": false
        },
        {
          "id": "java-c2731",
          "text": "Security gateway only",
          "isCorrect": false
        },
        {
          "id": "java-c2732",
          "text": "Load balancer",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q684",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is saga pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2733",
          "text": "Distributed transaction pattern with compensating transactions",
          "isCorrect": true
        },
        {
          "id": "java-c2734",
          "text": "Story pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2735",
          "text": "Sequence pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2736",
          "text": "Transaction script",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q685",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is CQRS?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2737",
          "text": "Command Query Responsibility Segregation, separate read/write models",
          "isCorrect": true
        },
        {
          "id": "java-c2738",
          "text": "Database pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2739",
          "text": "Security pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2740",
          "text": "Testing pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q686",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is event sourcing?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2741",
          "text": "Stores state changes as events, rebuild state by replaying",
          "isCorrect": true
        },
        {
          "id": "java-c2742",
          "text": "Event handling",
          "isCorrect": false
        },
        {
          "id": "java-c2743",
          "text": "Event logging",
          "isCorrect": false
        },
        {
          "id": "java-c2744",
          "text": "Event monitoring",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q687",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is eventual consistency?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2745",
          "text": "Data becomes consistent over time, not immediately",
          "isCorrect": true
        },
        {
          "id": "java-c2746",
          "text": "Immediate consistency",
          "isCorrect": false
        },
        {
          "id": "java-c2747",
          "text": "No consistency",
          "isCorrect": false
        },
        {
          "id": "java-c2748",
          "text": "Strong consistency",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q688",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the strangler fig pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2749",
          "text": "Gradually migrate legacy system by replacing piece by piece",
          "isCorrect": true
        },
        {
          "id": "java-c2750",
          "text": "Tree pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2751",
          "text": "Deployment pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2752",
          "text": "Testing pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q689",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Docker containerization?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2753",
          "text": "Packages application with dependencies in isolated container",
          "isCorrect": true
        },
        {
          "id": "java-c2754",
          "text": "Virtual machine",
          "isCorrect": false
        },
        {
          "id": "java-c2755",
          "text": "Cloud platform",
          "isCorrect": false
        },
        {
          "id": "java-c2756",
          "text": "Deployment tool only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q690",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Kubernetes orchestration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2757",
          "text": "Automates deployment, scaling, and management of containers",
          "isCorrect": true
        },
        {
          "id": "java-c2758",
          "text": "Container creation",
          "isCorrect": false
        },
        {
          "id": "java-c2759",
          "text": "Image building",
          "isCorrect": false
        },
        {
          "id": "java-c2760",
          "text": "Code deployment",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q691",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is service discovery?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2761",
          "text": "Dynamic registration and lookup of service instances",
          "isCorrect": true
        },
        {
          "id": "java-c2762",
          "text": "Service deployment",
          "isCorrect": false
        },
        {
          "id": "java-c2763",
          "text": "Service monitoring",
          "isCorrect": false
        },
        {
          "id": "java-c2764",
          "text": "Service testing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q692",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is circuit breaker pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2765",
          "text": "Prevents cascading failures by failing fast when service down",
          "isCorrect": true
        },
        {
          "id": "java-c2766",
          "text": "Electrical circuit",
          "isCorrect": false
        },
        {
          "id": "java-c2767",
          "text": "Load balancing",
          "isCorrect": false
        },
        {
          "id": "java-c2768",
          "text": "Retry mechanism",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q693",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is API Gateway pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2769",
          "text": "Single entry point routing requests to microservices",
          "isCorrect": true
        },
        {
          "id": "java-c2770",
          "text": "Database gateway",
          "isCorrect": false
        },
        {
          "id": "java-c2771",
          "text": "Security gateway only",
          "isCorrect": false
        },
        {
          "id": "java-c2772",
          "text": "Load balancer",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q694",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is saga pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2773",
          "text": "Distributed transaction pattern with compensating transactions",
          "isCorrect": true
        },
        {
          "id": "java-c2774",
          "text": "Story pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2775",
          "text": "Sequence pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2776",
          "text": "Transaction script",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q695",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is CQRS?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2777",
          "text": "Command Query Responsibility Segregation, separate read/write models",
          "isCorrect": true
        },
        {
          "id": "java-c2778",
          "text": "Database pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2779",
          "text": "Security pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2780",
          "text": "Testing pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q696",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is event sourcing?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2781",
          "text": "Stores state changes as events, rebuild state by replaying",
          "isCorrect": true
        },
        {
          "id": "java-c2782",
          "text": "Event handling",
          "isCorrect": false
        },
        {
          "id": "java-c2783",
          "text": "Event logging",
          "isCorrect": false
        },
        {
          "id": "java-c2784",
          "text": "Event monitoring",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q697",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is eventual consistency?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2785",
          "text": "Data becomes consistent over time, not immediately",
          "isCorrect": true
        },
        {
          "id": "java-c2786",
          "text": "Immediate consistency",
          "isCorrect": false
        },
        {
          "id": "java-c2787",
          "text": "No consistency",
          "isCorrect": false
        },
        {
          "id": "java-c2788",
          "text": "Strong consistency",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q698",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the strangler fig pattern?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2789",
          "text": "Gradually migrate legacy system by replacing piece by piece",
          "isCorrect": true
        },
        {
          "id": "java-c2790",
          "text": "Tree pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2791",
          "text": "Deployment pattern",
          "isCorrect": false
        },
        {
          "id": "java-c2792",
          "text": "Testing pattern",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q699",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Docker containerization?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2793",
          "text": "Packages application with dependencies in isolated container",
          "isCorrect": true
        },
        {
          "id": "java-c2794",
          "text": "Virtual machine",
          "isCorrect": false
        },
        {
          "id": "java-c2795",
          "text": "Cloud platform",
          "isCorrect": false
        },
        {
          "id": "java-c2796",
          "text": "Deployment tool only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q700",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Kubernetes orchestration?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2797",
          "text": "Automates deployment, scaling, and management of containers",
          "isCorrect": true
        },
        {
          "id": "java-c2798",
          "text": "Container creation",
          "isCorrect": false
        },
        {
          "id": "java-c2799",
          "text": "Image building",
          "isCorrect": false
        },
        {
          "id": "java-c2800",
          "text": "Code deployment",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q701",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the time complexity of binary search?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2801",
          "text": "O(log n)",
          "isCorrect": true
        },
        {
          "id": "java-c2802",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c2803",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c2804",
          "text": "O(n log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q702",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the worst-case time complexity of quicksort?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2805",
          "text": "O(n²)",
          "isCorrect": true
        },
        {
          "id": "java-c2806",
          "text": "O(n log n)",
          "isCorrect": false
        },
        {
          "id": "java-c2807",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c2808",
          "text": "O(log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q703",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which sorting algorithms are stable?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2809",
          "text": "Merge sort",
          "isCorrect": true
        },
        {
          "id": "java-c2810",
          "text": "Insertion sort",
          "isCorrect": true
        },
        {
          "id": "java-c2811",
          "text": "Bubble sort",
          "isCorrect": true
        },
        {
          "id": "java-c2812",
          "text": "Quicksort",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q704",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a trie used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2813",
          "text": "Efficient string searching and prefix matching",
          "isCorrect": true
        },
        {
          "id": "java-c2814",
          "text": "Number sorting",
          "isCorrect": false
        },
        {
          "id": "java-c2815",
          "text": "Graph traversal",
          "isCorrect": false
        },
        {
          "id": "java-c2816",
          "text": "Binary search",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q705",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the space complexity of merge sort?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2817",
          "text": "O(n)",
          "isCorrect": true
        },
        {
          "id": "java-c2818",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c2819",
          "text": "O(log n)",
          "isCorrect": false
        },
        {
          "id": "java-c2820",
          "text": "O(n²)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q706",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is dynamic programming?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2821",
          "text": "Optimization technique using memoization/tabulation to avoid recomputation",
          "isCorrect": true
        },
        {
          "id": "java-c2822",
          "text": "Runtime programming",
          "isCorrect": false
        },
        {
          "id": "java-c2823",
          "text": "Multi-threading",
          "isCorrect": false
        },
        {
          "id": "java-c2824",
          "text": "Code generation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q707",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between DFS and BFS?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2825",
          "text": "DFS uses stack/recursion, BFS uses queue; different traversal order",
          "isCorrect": true
        },
        {
          "id": "java-c2826",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c2827",
          "text": "DFS is always faster",
          "isCorrect": false
        },
        {
          "id": "java-c2828",
          "text": "BFS is for trees only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q708",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a heap data structure?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2829",
          "text": "Complete binary tree with heap property (min/max)",
          "isCorrect": true
        },
        {
          "id": "java-c2830",
          "text": "Memory heap",
          "isCorrect": false
        },
        {
          "id": "java-c2831",
          "text": "Stack structure",
          "isCorrect": false
        },
        {
          "id": "java-c2832",
          "text": "Hash table",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q709",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the time complexity of heap insertion?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2833",
          "text": "O(log n)",
          "isCorrect": true
        },
        {
          "id": "java-c2834",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c2835",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c2836",
          "text": "O(n log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q710",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a bloom filter?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2837",
          "text": "Probabilistic data structure for set membership, may have false positives",
          "isCorrect": true
        },
        {
          "id": "java-c2838",
          "text": "Image filter",
          "isCorrect": false
        },
        {
          "id": "java-c2839",
          "text": "Sorting algorithm",
          "isCorrect": false
        },
        {
          "id": "java-c2840",
          "text": "Tree structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q711",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the time complexity of binary search?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2841",
          "text": "O(log n)",
          "isCorrect": true
        },
        {
          "id": "java-c2842",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c2843",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c2844",
          "text": "O(n log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q712",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the worst-case time complexity of quicksort?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2845",
          "text": "O(n²)",
          "isCorrect": true
        },
        {
          "id": "java-c2846",
          "text": "O(n log n)",
          "isCorrect": false
        },
        {
          "id": "java-c2847",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c2848",
          "text": "O(log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q713",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which sorting algorithms are stable?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2849",
          "text": "Merge sort",
          "isCorrect": true
        },
        {
          "id": "java-c2850",
          "text": "Insertion sort",
          "isCorrect": true
        },
        {
          "id": "java-c2851",
          "text": "Bubble sort",
          "isCorrect": true
        },
        {
          "id": "java-c2852",
          "text": "Quicksort",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q714",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a trie used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2853",
          "text": "Efficient string searching and prefix matching",
          "isCorrect": true
        },
        {
          "id": "java-c2854",
          "text": "Number sorting",
          "isCorrect": false
        },
        {
          "id": "java-c2855",
          "text": "Graph traversal",
          "isCorrect": false
        },
        {
          "id": "java-c2856",
          "text": "Binary search",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q715",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the space complexity of merge sort?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2857",
          "text": "O(n)",
          "isCorrect": true
        },
        {
          "id": "java-c2858",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c2859",
          "text": "O(log n)",
          "isCorrect": false
        },
        {
          "id": "java-c2860",
          "text": "O(n²)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q716",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is dynamic programming?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2861",
          "text": "Optimization technique using memoization/tabulation to avoid recomputation",
          "isCorrect": true
        },
        {
          "id": "java-c2862",
          "text": "Runtime programming",
          "isCorrect": false
        },
        {
          "id": "java-c2863",
          "text": "Multi-threading",
          "isCorrect": false
        },
        {
          "id": "java-c2864",
          "text": "Code generation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q717",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between DFS and BFS?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2865",
          "text": "DFS uses stack/recursion, BFS uses queue; different traversal order",
          "isCorrect": true
        },
        {
          "id": "java-c2866",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c2867",
          "text": "DFS is always faster",
          "isCorrect": false
        },
        {
          "id": "java-c2868",
          "text": "BFS is for trees only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q718",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a heap data structure?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2869",
          "text": "Complete binary tree with heap property (min/max)",
          "isCorrect": true
        },
        {
          "id": "java-c2870",
          "text": "Memory heap",
          "isCorrect": false
        },
        {
          "id": "java-c2871",
          "text": "Stack structure",
          "isCorrect": false
        },
        {
          "id": "java-c2872",
          "text": "Hash table",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q719",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the time complexity of heap insertion?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2873",
          "text": "O(log n)",
          "isCorrect": true
        },
        {
          "id": "java-c2874",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c2875",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c2876",
          "text": "O(n log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q720",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a bloom filter?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2877",
          "text": "Probabilistic data structure for set membership, may have false positives",
          "isCorrect": true
        },
        {
          "id": "java-c2878",
          "text": "Image filter",
          "isCorrect": false
        },
        {
          "id": "java-c2879",
          "text": "Sorting algorithm",
          "isCorrect": false
        },
        {
          "id": "java-c2880",
          "text": "Tree structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q721",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the time complexity of binary search?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2881",
          "text": "O(log n)",
          "isCorrect": true
        },
        {
          "id": "java-c2882",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c2883",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c2884",
          "text": "O(n log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q722",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the worst-case time complexity of quicksort?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2885",
          "text": "O(n²)",
          "isCorrect": true
        },
        {
          "id": "java-c2886",
          "text": "O(n log n)",
          "isCorrect": false
        },
        {
          "id": "java-c2887",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c2888",
          "text": "O(log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q723",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which sorting algorithms are stable?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2889",
          "text": "Merge sort",
          "isCorrect": true
        },
        {
          "id": "java-c2890",
          "text": "Insertion sort",
          "isCorrect": true
        },
        {
          "id": "java-c2891",
          "text": "Bubble sort",
          "isCorrect": true
        },
        {
          "id": "java-c2892",
          "text": "Quicksort",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q724",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a trie used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2893",
          "text": "Efficient string searching and prefix matching",
          "isCorrect": true
        },
        {
          "id": "java-c2894",
          "text": "Number sorting",
          "isCorrect": false
        },
        {
          "id": "java-c2895",
          "text": "Graph traversal",
          "isCorrect": false
        },
        {
          "id": "java-c2896",
          "text": "Binary search",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q725",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the space complexity of merge sort?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2897",
          "text": "O(n)",
          "isCorrect": true
        },
        {
          "id": "java-c2898",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c2899",
          "text": "O(log n)",
          "isCorrect": false
        },
        {
          "id": "java-c2900",
          "text": "O(n²)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q726",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is dynamic programming?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2901",
          "text": "Optimization technique using memoization/tabulation to avoid recomputation",
          "isCorrect": true
        },
        {
          "id": "java-c2902",
          "text": "Runtime programming",
          "isCorrect": false
        },
        {
          "id": "java-c2903",
          "text": "Multi-threading",
          "isCorrect": false
        },
        {
          "id": "java-c2904",
          "text": "Code generation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q727",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between DFS and BFS?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2905",
          "text": "DFS uses stack/recursion, BFS uses queue; different traversal order",
          "isCorrect": true
        },
        {
          "id": "java-c2906",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c2907",
          "text": "DFS is always faster",
          "isCorrect": false
        },
        {
          "id": "java-c2908",
          "text": "BFS is for trees only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q728",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a heap data structure?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2909",
          "text": "Complete binary tree with heap property (min/max)",
          "isCorrect": true
        },
        {
          "id": "java-c2910",
          "text": "Memory heap",
          "isCorrect": false
        },
        {
          "id": "java-c2911",
          "text": "Stack structure",
          "isCorrect": false
        },
        {
          "id": "java-c2912",
          "text": "Hash table",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q729",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the time complexity of heap insertion?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2913",
          "text": "O(log n)",
          "isCorrect": true
        },
        {
          "id": "java-c2914",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c2915",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c2916",
          "text": "O(n log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q730",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a bloom filter?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2917",
          "text": "Probabilistic data structure for set membership, may have false positives",
          "isCorrect": true
        },
        {
          "id": "java-c2918",
          "text": "Image filter",
          "isCorrect": false
        },
        {
          "id": "java-c2919",
          "text": "Sorting algorithm",
          "isCorrect": false
        },
        {
          "id": "java-c2920",
          "text": "Tree structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q731",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the time complexity of binary search?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2921",
          "text": "O(log n)",
          "isCorrect": true
        },
        {
          "id": "java-c2922",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c2923",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c2924",
          "text": "O(n log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q732",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the worst-case time complexity of quicksort?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2925",
          "text": "O(n²)",
          "isCorrect": true
        },
        {
          "id": "java-c2926",
          "text": "O(n log n)",
          "isCorrect": false
        },
        {
          "id": "java-c2927",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c2928",
          "text": "O(log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q733",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which sorting algorithms are stable?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2929",
          "text": "Merge sort",
          "isCorrect": true
        },
        {
          "id": "java-c2930",
          "text": "Insertion sort",
          "isCorrect": true
        },
        {
          "id": "java-c2931",
          "text": "Bubble sort",
          "isCorrect": true
        },
        {
          "id": "java-c2932",
          "text": "Quicksort",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q734",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a trie used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2933",
          "text": "Efficient string searching and prefix matching",
          "isCorrect": true
        },
        {
          "id": "java-c2934",
          "text": "Number sorting",
          "isCorrect": false
        },
        {
          "id": "java-c2935",
          "text": "Graph traversal",
          "isCorrect": false
        },
        {
          "id": "java-c2936",
          "text": "Binary search",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q735",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the space complexity of merge sort?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2937",
          "text": "O(n)",
          "isCorrect": true
        },
        {
          "id": "java-c2938",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c2939",
          "text": "O(log n)",
          "isCorrect": false
        },
        {
          "id": "java-c2940",
          "text": "O(n²)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q736",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is dynamic programming?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2941",
          "text": "Optimization technique using memoization/tabulation to avoid recomputation",
          "isCorrect": true
        },
        {
          "id": "java-c2942",
          "text": "Runtime programming",
          "isCorrect": false
        },
        {
          "id": "java-c2943",
          "text": "Multi-threading",
          "isCorrect": false
        },
        {
          "id": "java-c2944",
          "text": "Code generation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q737",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between DFS and BFS?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2945",
          "text": "DFS uses stack/recursion, BFS uses queue; different traversal order",
          "isCorrect": true
        },
        {
          "id": "java-c2946",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c2947",
          "text": "DFS is always faster",
          "isCorrect": false
        },
        {
          "id": "java-c2948",
          "text": "BFS is for trees only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q738",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a heap data structure?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2949",
          "text": "Complete binary tree with heap property (min/max)",
          "isCorrect": true
        },
        {
          "id": "java-c2950",
          "text": "Memory heap",
          "isCorrect": false
        },
        {
          "id": "java-c2951",
          "text": "Stack structure",
          "isCorrect": false
        },
        {
          "id": "java-c2952",
          "text": "Hash table",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q739",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the time complexity of heap insertion?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2953",
          "text": "O(log n)",
          "isCorrect": true
        },
        {
          "id": "java-c2954",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c2955",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c2956",
          "text": "O(n log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q740",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a bloom filter?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2957",
          "text": "Probabilistic data structure for set membership, may have false positives",
          "isCorrect": true
        },
        {
          "id": "java-c2958",
          "text": "Image filter",
          "isCorrect": false
        },
        {
          "id": "java-c2959",
          "text": "Sorting algorithm",
          "isCorrect": false
        },
        {
          "id": "java-c2960",
          "text": "Tree structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q741",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the time complexity of binary search?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2961",
          "text": "O(log n)",
          "isCorrect": true
        },
        {
          "id": "java-c2962",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c2963",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c2964",
          "text": "O(n log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q742",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the worst-case time complexity of quicksort?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2965",
          "text": "O(n²)",
          "isCorrect": true
        },
        {
          "id": "java-c2966",
          "text": "O(n log n)",
          "isCorrect": false
        },
        {
          "id": "java-c2967",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c2968",
          "text": "O(log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q743",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which sorting algorithms are stable?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2969",
          "text": "Merge sort",
          "isCorrect": true
        },
        {
          "id": "java-c2970",
          "text": "Insertion sort",
          "isCorrect": true
        },
        {
          "id": "java-c2971",
          "text": "Bubble sort",
          "isCorrect": true
        },
        {
          "id": "java-c2972",
          "text": "Quicksort",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q744",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a trie used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2973",
          "text": "Efficient string searching and prefix matching",
          "isCorrect": true
        },
        {
          "id": "java-c2974",
          "text": "Number sorting",
          "isCorrect": false
        },
        {
          "id": "java-c2975",
          "text": "Graph traversal",
          "isCorrect": false
        },
        {
          "id": "java-c2976",
          "text": "Binary search",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q745",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the space complexity of merge sort?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2977",
          "text": "O(n)",
          "isCorrect": true
        },
        {
          "id": "java-c2978",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c2979",
          "text": "O(log n)",
          "isCorrect": false
        },
        {
          "id": "java-c2980",
          "text": "O(n²)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q746",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is dynamic programming?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2981",
          "text": "Optimization technique using memoization/tabulation to avoid recomputation",
          "isCorrect": true
        },
        {
          "id": "java-c2982",
          "text": "Runtime programming",
          "isCorrect": false
        },
        {
          "id": "java-c2983",
          "text": "Multi-threading",
          "isCorrect": false
        },
        {
          "id": "java-c2984",
          "text": "Code generation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q747",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between DFS and BFS?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2985",
          "text": "DFS uses stack/recursion, BFS uses queue; different traversal order",
          "isCorrect": true
        },
        {
          "id": "java-c2986",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c2987",
          "text": "DFS is always faster",
          "isCorrect": false
        },
        {
          "id": "java-c2988",
          "text": "BFS is for trees only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q748",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a heap data structure?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2989",
          "text": "Complete binary tree with heap property (min/max)",
          "isCorrect": true
        },
        {
          "id": "java-c2990",
          "text": "Memory heap",
          "isCorrect": false
        },
        {
          "id": "java-c2991",
          "text": "Stack structure",
          "isCorrect": false
        },
        {
          "id": "java-c2992",
          "text": "Hash table",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q749",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the time complexity of heap insertion?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2993",
          "text": "O(log n)",
          "isCorrect": true
        },
        {
          "id": "java-c2994",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c2995",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c2996",
          "text": "O(n log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q750",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a bloom filter?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c2997",
          "text": "Probabilistic data structure for set membership, may have false positives",
          "isCorrect": true
        },
        {
          "id": "java-c2998",
          "text": "Image filter",
          "isCorrect": false
        },
        {
          "id": "java-c2999",
          "text": "Sorting algorithm",
          "isCorrect": false
        },
        {
          "id": "java-c3000",
          "text": "Tree structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q751",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the time complexity of binary search?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3001",
          "text": "O(log n)",
          "isCorrect": true
        },
        {
          "id": "java-c3002",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c3003",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c3004",
          "text": "O(n log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q752",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the worst-case time complexity of quicksort?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3005",
          "text": "O(n²)",
          "isCorrect": true
        },
        {
          "id": "java-c3006",
          "text": "O(n log n)",
          "isCorrect": false
        },
        {
          "id": "java-c3007",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c3008",
          "text": "O(log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q753",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which sorting algorithms are stable?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3009",
          "text": "Merge sort",
          "isCorrect": true
        },
        {
          "id": "java-c3010",
          "text": "Insertion sort",
          "isCorrect": true
        },
        {
          "id": "java-c3011",
          "text": "Bubble sort",
          "isCorrect": true
        },
        {
          "id": "java-c3012",
          "text": "Quicksort",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q754",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a trie used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3013",
          "text": "Efficient string searching and prefix matching",
          "isCorrect": true
        },
        {
          "id": "java-c3014",
          "text": "Number sorting",
          "isCorrect": false
        },
        {
          "id": "java-c3015",
          "text": "Graph traversal",
          "isCorrect": false
        },
        {
          "id": "java-c3016",
          "text": "Binary search",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q755",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the space complexity of merge sort?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3017",
          "text": "O(n)",
          "isCorrect": true
        },
        {
          "id": "java-c3018",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c3019",
          "text": "O(log n)",
          "isCorrect": false
        },
        {
          "id": "java-c3020",
          "text": "O(n²)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q756",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is dynamic programming?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3021",
          "text": "Optimization technique using memoization/tabulation to avoid recomputation",
          "isCorrect": true
        },
        {
          "id": "java-c3022",
          "text": "Runtime programming",
          "isCorrect": false
        },
        {
          "id": "java-c3023",
          "text": "Multi-threading",
          "isCorrect": false
        },
        {
          "id": "java-c3024",
          "text": "Code generation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q757",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between DFS and BFS?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3025",
          "text": "DFS uses stack/recursion, BFS uses queue; different traversal order",
          "isCorrect": true
        },
        {
          "id": "java-c3026",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3027",
          "text": "DFS is always faster",
          "isCorrect": false
        },
        {
          "id": "java-c3028",
          "text": "BFS is for trees only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q758",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a heap data structure?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3029",
          "text": "Complete binary tree with heap property (min/max)",
          "isCorrect": true
        },
        {
          "id": "java-c3030",
          "text": "Memory heap",
          "isCorrect": false
        },
        {
          "id": "java-c3031",
          "text": "Stack structure",
          "isCorrect": false
        },
        {
          "id": "java-c3032",
          "text": "Hash table",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q759",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the time complexity of heap insertion?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3033",
          "text": "O(log n)",
          "isCorrect": true
        },
        {
          "id": "java-c3034",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c3035",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c3036",
          "text": "O(n log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q760",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a bloom filter?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3037",
          "text": "Probabilistic data structure for set membership, may have false positives",
          "isCorrect": true
        },
        {
          "id": "java-c3038",
          "text": "Image filter",
          "isCorrect": false
        },
        {
          "id": "java-c3039",
          "text": "Sorting algorithm",
          "isCorrect": false
        },
        {
          "id": "java-c3040",
          "text": "Tree structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q761",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the time complexity of binary search?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3041",
          "text": "O(log n)",
          "isCorrect": true
        },
        {
          "id": "java-c3042",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c3043",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c3044",
          "text": "O(n log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q762",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the worst-case time complexity of quicksort?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3045",
          "text": "O(n²)",
          "isCorrect": true
        },
        {
          "id": "java-c3046",
          "text": "O(n log n)",
          "isCorrect": false
        },
        {
          "id": "java-c3047",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c3048",
          "text": "O(log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q763",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which sorting algorithms are stable?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3049",
          "text": "Merge sort",
          "isCorrect": true
        },
        {
          "id": "java-c3050",
          "text": "Insertion sort",
          "isCorrect": true
        },
        {
          "id": "java-c3051",
          "text": "Bubble sort",
          "isCorrect": true
        },
        {
          "id": "java-c3052",
          "text": "Quicksort",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q764",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a trie used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3053",
          "text": "Efficient string searching and prefix matching",
          "isCorrect": true
        },
        {
          "id": "java-c3054",
          "text": "Number sorting",
          "isCorrect": false
        },
        {
          "id": "java-c3055",
          "text": "Graph traversal",
          "isCorrect": false
        },
        {
          "id": "java-c3056",
          "text": "Binary search",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q765",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the space complexity of merge sort?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3057",
          "text": "O(n)",
          "isCorrect": true
        },
        {
          "id": "java-c3058",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c3059",
          "text": "O(log n)",
          "isCorrect": false
        },
        {
          "id": "java-c3060",
          "text": "O(n²)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q766",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is dynamic programming?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3061",
          "text": "Optimization technique using memoization/tabulation to avoid recomputation",
          "isCorrect": true
        },
        {
          "id": "java-c3062",
          "text": "Runtime programming",
          "isCorrect": false
        },
        {
          "id": "java-c3063",
          "text": "Multi-threading",
          "isCorrect": false
        },
        {
          "id": "java-c3064",
          "text": "Code generation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q767",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between DFS and BFS?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3065",
          "text": "DFS uses stack/recursion, BFS uses queue; different traversal order",
          "isCorrect": true
        },
        {
          "id": "java-c3066",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3067",
          "text": "DFS is always faster",
          "isCorrect": false
        },
        {
          "id": "java-c3068",
          "text": "BFS is for trees only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q768",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a heap data structure?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3069",
          "text": "Complete binary tree with heap property (min/max)",
          "isCorrect": true
        },
        {
          "id": "java-c3070",
          "text": "Memory heap",
          "isCorrect": false
        },
        {
          "id": "java-c3071",
          "text": "Stack structure",
          "isCorrect": false
        },
        {
          "id": "java-c3072",
          "text": "Hash table",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q769",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the time complexity of heap insertion?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3073",
          "text": "O(log n)",
          "isCorrect": true
        },
        {
          "id": "java-c3074",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c3075",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c3076",
          "text": "O(n log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q770",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a bloom filter?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3077",
          "text": "Probabilistic data structure for set membership, may have false positives",
          "isCorrect": true
        },
        {
          "id": "java-c3078",
          "text": "Image filter",
          "isCorrect": false
        },
        {
          "id": "java-c3079",
          "text": "Sorting algorithm",
          "isCorrect": false
        },
        {
          "id": "java-c3080",
          "text": "Tree structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q771",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the time complexity of binary search?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3081",
          "text": "O(log n)",
          "isCorrect": true
        },
        {
          "id": "java-c3082",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c3083",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c3084",
          "text": "O(n log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q772",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the worst-case time complexity of quicksort?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3085",
          "text": "O(n²)",
          "isCorrect": true
        },
        {
          "id": "java-c3086",
          "text": "O(n log n)",
          "isCorrect": false
        },
        {
          "id": "java-c3087",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c3088",
          "text": "O(log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q773",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which sorting algorithms are stable?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3089",
          "text": "Merge sort",
          "isCorrect": true
        },
        {
          "id": "java-c3090",
          "text": "Insertion sort",
          "isCorrect": true
        },
        {
          "id": "java-c3091",
          "text": "Bubble sort",
          "isCorrect": true
        },
        {
          "id": "java-c3092",
          "text": "Quicksort",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q774",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a trie used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3093",
          "text": "Efficient string searching and prefix matching",
          "isCorrect": true
        },
        {
          "id": "java-c3094",
          "text": "Number sorting",
          "isCorrect": false
        },
        {
          "id": "java-c3095",
          "text": "Graph traversal",
          "isCorrect": false
        },
        {
          "id": "java-c3096",
          "text": "Binary search",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q775",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the space complexity of merge sort?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3097",
          "text": "O(n)",
          "isCorrect": true
        },
        {
          "id": "java-c3098",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c3099",
          "text": "O(log n)",
          "isCorrect": false
        },
        {
          "id": "java-c3100",
          "text": "O(n²)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q776",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is dynamic programming?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3101",
          "text": "Optimization technique using memoization/tabulation to avoid recomputation",
          "isCorrect": true
        },
        {
          "id": "java-c3102",
          "text": "Runtime programming",
          "isCorrect": false
        },
        {
          "id": "java-c3103",
          "text": "Multi-threading",
          "isCorrect": false
        },
        {
          "id": "java-c3104",
          "text": "Code generation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q777",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between DFS and BFS?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3105",
          "text": "DFS uses stack/recursion, BFS uses queue; different traversal order",
          "isCorrect": true
        },
        {
          "id": "java-c3106",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3107",
          "text": "DFS is always faster",
          "isCorrect": false
        },
        {
          "id": "java-c3108",
          "text": "BFS is for trees only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q778",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a heap data structure?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3109",
          "text": "Complete binary tree with heap property (min/max)",
          "isCorrect": true
        },
        {
          "id": "java-c3110",
          "text": "Memory heap",
          "isCorrect": false
        },
        {
          "id": "java-c3111",
          "text": "Stack structure",
          "isCorrect": false
        },
        {
          "id": "java-c3112",
          "text": "Hash table",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q779",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the time complexity of heap insertion?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3113",
          "text": "O(log n)",
          "isCorrect": true
        },
        {
          "id": "java-c3114",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c3115",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c3116",
          "text": "O(n log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q780",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a bloom filter?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3117",
          "text": "Probabilistic data structure for set membership, may have false positives",
          "isCorrect": true
        },
        {
          "id": "java-c3118",
          "text": "Image filter",
          "isCorrect": false
        },
        {
          "id": "java-c3119",
          "text": "Sorting algorithm",
          "isCorrect": false
        },
        {
          "id": "java-c3120",
          "text": "Tree structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q781",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the time complexity of binary search?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3121",
          "text": "O(log n)",
          "isCorrect": true
        },
        {
          "id": "java-c3122",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c3123",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c3124",
          "text": "O(n log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q782",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the worst-case time complexity of quicksort?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3125",
          "text": "O(n²)",
          "isCorrect": true
        },
        {
          "id": "java-c3126",
          "text": "O(n log n)",
          "isCorrect": false
        },
        {
          "id": "java-c3127",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c3128",
          "text": "O(log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q783",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which sorting algorithms are stable?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3129",
          "text": "Merge sort",
          "isCorrect": true
        },
        {
          "id": "java-c3130",
          "text": "Insertion sort",
          "isCorrect": true
        },
        {
          "id": "java-c3131",
          "text": "Bubble sort",
          "isCorrect": true
        },
        {
          "id": "java-c3132",
          "text": "Quicksort",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q784",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a trie used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3133",
          "text": "Efficient string searching and prefix matching",
          "isCorrect": true
        },
        {
          "id": "java-c3134",
          "text": "Number sorting",
          "isCorrect": false
        },
        {
          "id": "java-c3135",
          "text": "Graph traversal",
          "isCorrect": false
        },
        {
          "id": "java-c3136",
          "text": "Binary search",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q785",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the space complexity of merge sort?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3137",
          "text": "O(n)",
          "isCorrect": true
        },
        {
          "id": "java-c3138",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c3139",
          "text": "O(log n)",
          "isCorrect": false
        },
        {
          "id": "java-c3140",
          "text": "O(n²)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q786",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is dynamic programming?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3141",
          "text": "Optimization technique using memoization/tabulation to avoid recomputation",
          "isCorrect": true
        },
        {
          "id": "java-c3142",
          "text": "Runtime programming",
          "isCorrect": false
        },
        {
          "id": "java-c3143",
          "text": "Multi-threading",
          "isCorrect": false
        },
        {
          "id": "java-c3144",
          "text": "Code generation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q787",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between DFS and BFS?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3145",
          "text": "DFS uses stack/recursion, BFS uses queue; different traversal order",
          "isCorrect": true
        },
        {
          "id": "java-c3146",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3147",
          "text": "DFS is always faster",
          "isCorrect": false
        },
        {
          "id": "java-c3148",
          "text": "BFS is for trees only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q788",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a heap data structure?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3149",
          "text": "Complete binary tree with heap property (min/max)",
          "isCorrect": true
        },
        {
          "id": "java-c3150",
          "text": "Memory heap",
          "isCorrect": false
        },
        {
          "id": "java-c3151",
          "text": "Stack structure",
          "isCorrect": false
        },
        {
          "id": "java-c3152",
          "text": "Hash table",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q789",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the time complexity of heap insertion?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3153",
          "text": "O(log n)",
          "isCorrect": true
        },
        {
          "id": "java-c3154",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c3155",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c3156",
          "text": "O(n log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q790",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a bloom filter?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3157",
          "text": "Probabilistic data structure for set membership, may have false positives",
          "isCorrect": true
        },
        {
          "id": "java-c3158",
          "text": "Image filter",
          "isCorrect": false
        },
        {
          "id": "java-c3159",
          "text": "Sorting algorithm",
          "isCorrect": false
        },
        {
          "id": "java-c3160",
          "text": "Tree structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q791",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the time complexity of binary search?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3161",
          "text": "O(log n)",
          "isCorrect": true
        },
        {
          "id": "java-c3162",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c3163",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c3164",
          "text": "O(n log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q792",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the worst-case time complexity of quicksort?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3165",
          "text": "O(n²)",
          "isCorrect": true
        },
        {
          "id": "java-c3166",
          "text": "O(n log n)",
          "isCorrect": false
        },
        {
          "id": "java-c3167",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c3168",
          "text": "O(log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q793",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "Which sorting algorithms are stable?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3169",
          "text": "Merge sort",
          "isCorrect": true
        },
        {
          "id": "java-c3170",
          "text": "Insertion sort",
          "isCorrect": true
        },
        {
          "id": "java-c3171",
          "text": "Bubble sort",
          "isCorrect": true
        },
        {
          "id": "java-c3172",
          "text": "Quicksort",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q794",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a trie used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3173",
          "text": "Efficient string searching and prefix matching",
          "isCorrect": true
        },
        {
          "id": "java-c3174",
          "text": "Number sorting",
          "isCorrect": false
        },
        {
          "id": "java-c3175",
          "text": "Graph traversal",
          "isCorrect": false
        },
        {
          "id": "java-c3176",
          "text": "Binary search",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q795",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the space complexity of merge sort?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3177",
          "text": "O(n)",
          "isCorrect": true
        },
        {
          "id": "java-c3178",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c3179",
          "text": "O(log n)",
          "isCorrect": false
        },
        {
          "id": "java-c3180",
          "text": "O(n²)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q796",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is dynamic programming?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3181",
          "text": "Optimization technique using memoization/tabulation to avoid recomputation",
          "isCorrect": true
        },
        {
          "id": "java-c3182",
          "text": "Runtime programming",
          "isCorrect": false
        },
        {
          "id": "java-c3183",
          "text": "Multi-threading",
          "isCorrect": false
        },
        {
          "id": "java-c3184",
          "text": "Code generation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q797",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between DFS and BFS?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3185",
          "text": "DFS uses stack/recursion, BFS uses queue; different traversal order",
          "isCorrect": true
        },
        {
          "id": "java-c3186",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3187",
          "text": "DFS is always faster",
          "isCorrect": false
        },
        {
          "id": "java-c3188",
          "text": "BFS is for trees only",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q798",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a heap data structure?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3189",
          "text": "Complete binary tree with heap property (min/max)",
          "isCorrect": true
        },
        {
          "id": "java-c3190",
          "text": "Memory heap",
          "isCorrect": false
        },
        {
          "id": "java-c3191",
          "text": "Stack structure",
          "isCorrect": false
        },
        {
          "id": "java-c3192",
          "text": "Hash table",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q799",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the time complexity of heap insertion?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3193",
          "text": "O(log n)",
          "isCorrect": true
        },
        {
          "id": "java-c3194",
          "text": "O(1)",
          "isCorrect": false
        },
        {
          "id": "java-c3195",
          "text": "O(n)",
          "isCorrect": false
        },
        {
          "id": "java-c3196",
          "text": "O(n log n)",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q800",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a bloom filter?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3197",
          "text": "Probabilistic data structure for set membership, may have false positives",
          "isCorrect": true
        },
        {
          "id": "java-c3198",
          "text": "Image filter",
          "isCorrect": false
        },
        {
          "id": "java-c3199",
          "text": "Sorting algorithm",
          "isCorrect": false
        },
        {
          "id": "java-c3200",
          "text": "Tree structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q801",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the CAP theorem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3201",
          "text": "Can have 2 of 3: Consistency, Availability, Partition tolerance",
          "isCorrect": true
        },
        {
          "id": "java-c3202",
          "text": "Cache Access Protocol",
          "isCorrect": false
        },
        {
          "id": "java-c3203",
          "text": "Concurrent Application Programming",
          "isCorrect": false
        },
        {
          "id": "java-c3204",
          "text": "Cluster Availability Partition",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q802",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is horizontal scaling vs vertical scaling?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3205",
          "text": "Horizontal: add more machines; Vertical: increase machine capacity",
          "isCorrect": true
        },
        {
          "id": "java-c3206",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3207",
          "text": "Horizontal is always better",
          "isCorrect": false
        },
        {
          "id": "java-c3208",
          "text": "Vertical adds machines",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q803",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database sharding?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3209",
          "text": "Horizontal partitioning of data across multiple databases",
          "isCorrect": true
        },
        {
          "id": "java-c3210",
          "text": "Database replication",
          "isCorrect": false
        },
        {
          "id": "java-c3211",
          "text": "Vertical partitioning",
          "isCorrect": false
        },
        {
          "id": "java-c3212",
          "text": "Backup strategy",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q804",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database replication?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3213",
          "text": "Copying data from master to replica databases",
          "isCorrect": true
        },
        {
          "id": "java-c3214",
          "text": "Data sharding",
          "isCorrect": false
        },
        {
          "id": "java-c3215",
          "text": "Database backup",
          "isCorrect": false
        },
        {
          "id": "java-c3216",
          "text": "Schema migration",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q805",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CDN?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3217",
          "text": "Content Delivery Network distributes static content globally",
          "isCorrect": true
        },
        {
          "id": "java-c3218",
          "text": "Content Download Network",
          "isCorrect": false
        },
        {
          "id": "java-c3219",
          "text": "Cloud Distribution Network",
          "isCorrect": false
        },
        {
          "id": "java-c3220",
          "text": "Central Data Network",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q806",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a load balancer?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3221",
          "text": "Distributes incoming traffic across multiple servers",
          "isCorrect": true
        },
        {
          "id": "java-c3222",
          "text": "Database optimizer",
          "isCorrect": false
        },
        {
          "id": "java-c3223",
          "text": "Cache manager",
          "isCorrect": false
        },
        {
          "id": "java-c3224",
          "text": "Security filter",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q807",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Redis used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3225",
          "text": "In-memory data store for caching, pub/sub, sessions",
          "isCorrect": true
        },
        {
          "id": "java-c3226",
          "text": "Database only",
          "isCorrect": false
        },
        {
          "id": "java-c3227",
          "text": "Message queue only",
          "isCorrect": false
        },
        {
          "id": "java-c3228",
          "text": "File storage",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q808",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a message queue?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3229",
          "text": "Asynchronous communication between services via queue",
          "isCorrect": true
        },
        {
          "id": "java-c3230",
          "text": "Database queue",
          "isCorrect": false
        },
        {
          "id": "java-c3231",
          "text": "Priority queue",
          "isCorrect": false
        },
        {
          "id": "java-c3232",
          "text": "Stack structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q809",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is idempotency?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3233",
          "text": "Operation produces same result regardless of repetition",
          "isCorrect": true
        },
        {
          "id": "java-c3234",
          "text": "Unique operation",
          "isCorrect": false
        },
        {
          "id": "java-c3235",
          "text": "One-time operation",
          "isCorrect": false
        },
        {
          "id": "java-c3236",
          "text": "Atomic operation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q810",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is rate limiting?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3237",
          "text": "Controls request rate to prevent abuse and overload",
          "isCorrect": true
        },
        {
          "id": "java-c3238",
          "text": "Speed limiting",
          "isCorrect": false
        },
        {
          "id": "java-c3239",
          "text": "Size limiting",
          "isCorrect": false
        },
        {
          "id": "java-c3240",
          "text": "Time limiting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q811",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the CAP theorem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3241",
          "text": "Can have 2 of 3: Consistency, Availability, Partition tolerance",
          "isCorrect": true
        },
        {
          "id": "java-c3242",
          "text": "Cache Access Protocol",
          "isCorrect": false
        },
        {
          "id": "java-c3243",
          "text": "Concurrent Application Programming",
          "isCorrect": false
        },
        {
          "id": "java-c3244",
          "text": "Cluster Availability Partition",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q812",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is horizontal scaling vs vertical scaling?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3245",
          "text": "Horizontal: add more machines; Vertical: increase machine capacity",
          "isCorrect": true
        },
        {
          "id": "java-c3246",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3247",
          "text": "Horizontal is always better",
          "isCorrect": false
        },
        {
          "id": "java-c3248",
          "text": "Vertical adds machines",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q813",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database sharding?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3249",
          "text": "Horizontal partitioning of data across multiple databases",
          "isCorrect": true
        },
        {
          "id": "java-c3250",
          "text": "Database replication",
          "isCorrect": false
        },
        {
          "id": "java-c3251",
          "text": "Vertical partitioning",
          "isCorrect": false
        },
        {
          "id": "java-c3252",
          "text": "Backup strategy",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q814",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database replication?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3253",
          "text": "Copying data from master to replica databases",
          "isCorrect": true
        },
        {
          "id": "java-c3254",
          "text": "Data sharding",
          "isCorrect": false
        },
        {
          "id": "java-c3255",
          "text": "Database backup",
          "isCorrect": false
        },
        {
          "id": "java-c3256",
          "text": "Schema migration",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q815",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CDN?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3257",
          "text": "Content Delivery Network distributes static content globally",
          "isCorrect": true
        },
        {
          "id": "java-c3258",
          "text": "Content Download Network",
          "isCorrect": false
        },
        {
          "id": "java-c3259",
          "text": "Cloud Distribution Network",
          "isCorrect": false
        },
        {
          "id": "java-c3260",
          "text": "Central Data Network",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q816",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a load balancer?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3261",
          "text": "Distributes incoming traffic across multiple servers",
          "isCorrect": true
        },
        {
          "id": "java-c3262",
          "text": "Database optimizer",
          "isCorrect": false
        },
        {
          "id": "java-c3263",
          "text": "Cache manager",
          "isCorrect": false
        },
        {
          "id": "java-c3264",
          "text": "Security filter",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q817",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Redis used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3265",
          "text": "In-memory data store for caching, pub/sub, sessions",
          "isCorrect": true
        },
        {
          "id": "java-c3266",
          "text": "Database only",
          "isCorrect": false
        },
        {
          "id": "java-c3267",
          "text": "Message queue only",
          "isCorrect": false
        },
        {
          "id": "java-c3268",
          "text": "File storage",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q818",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a message queue?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3269",
          "text": "Asynchronous communication between services via queue",
          "isCorrect": true
        },
        {
          "id": "java-c3270",
          "text": "Database queue",
          "isCorrect": false
        },
        {
          "id": "java-c3271",
          "text": "Priority queue",
          "isCorrect": false
        },
        {
          "id": "java-c3272",
          "text": "Stack structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q819",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is idempotency?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3273",
          "text": "Operation produces same result regardless of repetition",
          "isCorrect": true
        },
        {
          "id": "java-c3274",
          "text": "Unique operation",
          "isCorrect": false
        },
        {
          "id": "java-c3275",
          "text": "One-time operation",
          "isCorrect": false
        },
        {
          "id": "java-c3276",
          "text": "Atomic operation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q820",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is rate limiting?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3277",
          "text": "Controls request rate to prevent abuse and overload",
          "isCorrect": true
        },
        {
          "id": "java-c3278",
          "text": "Speed limiting",
          "isCorrect": false
        },
        {
          "id": "java-c3279",
          "text": "Size limiting",
          "isCorrect": false
        },
        {
          "id": "java-c3280",
          "text": "Time limiting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q821",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the CAP theorem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3281",
          "text": "Can have 2 of 3: Consistency, Availability, Partition tolerance",
          "isCorrect": true
        },
        {
          "id": "java-c3282",
          "text": "Cache Access Protocol",
          "isCorrect": false
        },
        {
          "id": "java-c3283",
          "text": "Concurrent Application Programming",
          "isCorrect": false
        },
        {
          "id": "java-c3284",
          "text": "Cluster Availability Partition",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q822",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is horizontal scaling vs vertical scaling?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3285",
          "text": "Horizontal: add more machines; Vertical: increase machine capacity",
          "isCorrect": true
        },
        {
          "id": "java-c3286",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3287",
          "text": "Horizontal is always better",
          "isCorrect": false
        },
        {
          "id": "java-c3288",
          "text": "Vertical adds machines",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q823",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database sharding?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3289",
          "text": "Horizontal partitioning of data across multiple databases",
          "isCorrect": true
        },
        {
          "id": "java-c3290",
          "text": "Database replication",
          "isCorrect": false
        },
        {
          "id": "java-c3291",
          "text": "Vertical partitioning",
          "isCorrect": false
        },
        {
          "id": "java-c3292",
          "text": "Backup strategy",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q824",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database replication?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3293",
          "text": "Copying data from master to replica databases",
          "isCorrect": true
        },
        {
          "id": "java-c3294",
          "text": "Data sharding",
          "isCorrect": false
        },
        {
          "id": "java-c3295",
          "text": "Database backup",
          "isCorrect": false
        },
        {
          "id": "java-c3296",
          "text": "Schema migration",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q825",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CDN?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3297",
          "text": "Content Delivery Network distributes static content globally",
          "isCorrect": true
        },
        {
          "id": "java-c3298",
          "text": "Content Download Network",
          "isCorrect": false
        },
        {
          "id": "java-c3299",
          "text": "Cloud Distribution Network",
          "isCorrect": false
        },
        {
          "id": "java-c3300",
          "text": "Central Data Network",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q826",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a load balancer?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3301",
          "text": "Distributes incoming traffic across multiple servers",
          "isCorrect": true
        },
        {
          "id": "java-c3302",
          "text": "Database optimizer",
          "isCorrect": false
        },
        {
          "id": "java-c3303",
          "text": "Cache manager",
          "isCorrect": false
        },
        {
          "id": "java-c3304",
          "text": "Security filter",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q827",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Redis used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3305",
          "text": "In-memory data store for caching, pub/sub, sessions",
          "isCorrect": true
        },
        {
          "id": "java-c3306",
          "text": "Database only",
          "isCorrect": false
        },
        {
          "id": "java-c3307",
          "text": "Message queue only",
          "isCorrect": false
        },
        {
          "id": "java-c3308",
          "text": "File storage",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q828",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a message queue?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3309",
          "text": "Asynchronous communication between services via queue",
          "isCorrect": true
        },
        {
          "id": "java-c3310",
          "text": "Database queue",
          "isCorrect": false
        },
        {
          "id": "java-c3311",
          "text": "Priority queue",
          "isCorrect": false
        },
        {
          "id": "java-c3312",
          "text": "Stack structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q829",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is idempotency?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3313",
          "text": "Operation produces same result regardless of repetition",
          "isCorrect": true
        },
        {
          "id": "java-c3314",
          "text": "Unique operation",
          "isCorrect": false
        },
        {
          "id": "java-c3315",
          "text": "One-time operation",
          "isCorrect": false
        },
        {
          "id": "java-c3316",
          "text": "Atomic operation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q830",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is rate limiting?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3317",
          "text": "Controls request rate to prevent abuse and overload",
          "isCorrect": true
        },
        {
          "id": "java-c3318",
          "text": "Speed limiting",
          "isCorrect": false
        },
        {
          "id": "java-c3319",
          "text": "Size limiting",
          "isCorrect": false
        },
        {
          "id": "java-c3320",
          "text": "Time limiting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q831",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the CAP theorem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3321",
          "text": "Can have 2 of 3: Consistency, Availability, Partition tolerance",
          "isCorrect": true
        },
        {
          "id": "java-c3322",
          "text": "Cache Access Protocol",
          "isCorrect": false
        },
        {
          "id": "java-c3323",
          "text": "Concurrent Application Programming",
          "isCorrect": false
        },
        {
          "id": "java-c3324",
          "text": "Cluster Availability Partition",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q832",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is horizontal scaling vs vertical scaling?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3325",
          "text": "Horizontal: add more machines; Vertical: increase machine capacity",
          "isCorrect": true
        },
        {
          "id": "java-c3326",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3327",
          "text": "Horizontal is always better",
          "isCorrect": false
        },
        {
          "id": "java-c3328",
          "text": "Vertical adds machines",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q833",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database sharding?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3329",
          "text": "Horizontal partitioning of data across multiple databases",
          "isCorrect": true
        },
        {
          "id": "java-c3330",
          "text": "Database replication",
          "isCorrect": false
        },
        {
          "id": "java-c3331",
          "text": "Vertical partitioning",
          "isCorrect": false
        },
        {
          "id": "java-c3332",
          "text": "Backup strategy",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q834",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database replication?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3333",
          "text": "Copying data from master to replica databases",
          "isCorrect": true
        },
        {
          "id": "java-c3334",
          "text": "Data sharding",
          "isCorrect": false
        },
        {
          "id": "java-c3335",
          "text": "Database backup",
          "isCorrect": false
        },
        {
          "id": "java-c3336",
          "text": "Schema migration",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q835",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CDN?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3337",
          "text": "Content Delivery Network distributes static content globally",
          "isCorrect": true
        },
        {
          "id": "java-c3338",
          "text": "Content Download Network",
          "isCorrect": false
        },
        {
          "id": "java-c3339",
          "text": "Cloud Distribution Network",
          "isCorrect": false
        },
        {
          "id": "java-c3340",
          "text": "Central Data Network",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q836",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a load balancer?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3341",
          "text": "Distributes incoming traffic across multiple servers",
          "isCorrect": true
        },
        {
          "id": "java-c3342",
          "text": "Database optimizer",
          "isCorrect": false
        },
        {
          "id": "java-c3343",
          "text": "Cache manager",
          "isCorrect": false
        },
        {
          "id": "java-c3344",
          "text": "Security filter",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q837",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Redis used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3345",
          "text": "In-memory data store for caching, pub/sub, sessions",
          "isCorrect": true
        },
        {
          "id": "java-c3346",
          "text": "Database only",
          "isCorrect": false
        },
        {
          "id": "java-c3347",
          "text": "Message queue only",
          "isCorrect": false
        },
        {
          "id": "java-c3348",
          "text": "File storage",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q838",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a message queue?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3349",
          "text": "Asynchronous communication between services via queue",
          "isCorrect": true
        },
        {
          "id": "java-c3350",
          "text": "Database queue",
          "isCorrect": false
        },
        {
          "id": "java-c3351",
          "text": "Priority queue",
          "isCorrect": false
        },
        {
          "id": "java-c3352",
          "text": "Stack structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q839",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is idempotency?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3353",
          "text": "Operation produces same result regardless of repetition",
          "isCorrect": true
        },
        {
          "id": "java-c3354",
          "text": "Unique operation",
          "isCorrect": false
        },
        {
          "id": "java-c3355",
          "text": "One-time operation",
          "isCorrect": false
        },
        {
          "id": "java-c3356",
          "text": "Atomic operation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q840",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is rate limiting?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3357",
          "text": "Controls request rate to prevent abuse and overload",
          "isCorrect": true
        },
        {
          "id": "java-c3358",
          "text": "Speed limiting",
          "isCorrect": false
        },
        {
          "id": "java-c3359",
          "text": "Size limiting",
          "isCorrect": false
        },
        {
          "id": "java-c3360",
          "text": "Time limiting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q841",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the CAP theorem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3361",
          "text": "Can have 2 of 3: Consistency, Availability, Partition tolerance",
          "isCorrect": true
        },
        {
          "id": "java-c3362",
          "text": "Cache Access Protocol",
          "isCorrect": false
        },
        {
          "id": "java-c3363",
          "text": "Concurrent Application Programming",
          "isCorrect": false
        },
        {
          "id": "java-c3364",
          "text": "Cluster Availability Partition",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q842",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is horizontal scaling vs vertical scaling?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3365",
          "text": "Horizontal: add more machines; Vertical: increase machine capacity",
          "isCorrect": true
        },
        {
          "id": "java-c3366",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3367",
          "text": "Horizontal is always better",
          "isCorrect": false
        },
        {
          "id": "java-c3368",
          "text": "Vertical adds machines",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q843",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database sharding?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3369",
          "text": "Horizontal partitioning of data across multiple databases",
          "isCorrect": true
        },
        {
          "id": "java-c3370",
          "text": "Database replication",
          "isCorrect": false
        },
        {
          "id": "java-c3371",
          "text": "Vertical partitioning",
          "isCorrect": false
        },
        {
          "id": "java-c3372",
          "text": "Backup strategy",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q844",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database replication?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3373",
          "text": "Copying data from master to replica databases",
          "isCorrect": true
        },
        {
          "id": "java-c3374",
          "text": "Data sharding",
          "isCorrect": false
        },
        {
          "id": "java-c3375",
          "text": "Database backup",
          "isCorrect": false
        },
        {
          "id": "java-c3376",
          "text": "Schema migration",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q845",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CDN?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3377",
          "text": "Content Delivery Network distributes static content globally",
          "isCorrect": true
        },
        {
          "id": "java-c3378",
          "text": "Content Download Network",
          "isCorrect": false
        },
        {
          "id": "java-c3379",
          "text": "Cloud Distribution Network",
          "isCorrect": false
        },
        {
          "id": "java-c3380",
          "text": "Central Data Network",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q846",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a load balancer?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3381",
          "text": "Distributes incoming traffic across multiple servers",
          "isCorrect": true
        },
        {
          "id": "java-c3382",
          "text": "Database optimizer",
          "isCorrect": false
        },
        {
          "id": "java-c3383",
          "text": "Cache manager",
          "isCorrect": false
        },
        {
          "id": "java-c3384",
          "text": "Security filter",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q847",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Redis used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3385",
          "text": "In-memory data store for caching, pub/sub, sessions",
          "isCorrect": true
        },
        {
          "id": "java-c3386",
          "text": "Database only",
          "isCorrect": false
        },
        {
          "id": "java-c3387",
          "text": "Message queue only",
          "isCorrect": false
        },
        {
          "id": "java-c3388",
          "text": "File storage",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q848",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a message queue?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3389",
          "text": "Asynchronous communication between services via queue",
          "isCorrect": true
        },
        {
          "id": "java-c3390",
          "text": "Database queue",
          "isCorrect": false
        },
        {
          "id": "java-c3391",
          "text": "Priority queue",
          "isCorrect": false
        },
        {
          "id": "java-c3392",
          "text": "Stack structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q849",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is idempotency?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3393",
          "text": "Operation produces same result regardless of repetition",
          "isCorrect": true
        },
        {
          "id": "java-c3394",
          "text": "Unique operation",
          "isCorrect": false
        },
        {
          "id": "java-c3395",
          "text": "One-time operation",
          "isCorrect": false
        },
        {
          "id": "java-c3396",
          "text": "Atomic operation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q850",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is rate limiting?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3397",
          "text": "Controls request rate to prevent abuse and overload",
          "isCorrect": true
        },
        {
          "id": "java-c3398",
          "text": "Speed limiting",
          "isCorrect": false
        },
        {
          "id": "java-c3399",
          "text": "Size limiting",
          "isCorrect": false
        },
        {
          "id": "java-c3400",
          "text": "Time limiting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q851",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the CAP theorem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3401",
          "text": "Can have 2 of 3: Consistency, Availability, Partition tolerance",
          "isCorrect": true
        },
        {
          "id": "java-c3402",
          "text": "Cache Access Protocol",
          "isCorrect": false
        },
        {
          "id": "java-c3403",
          "text": "Concurrent Application Programming",
          "isCorrect": false
        },
        {
          "id": "java-c3404",
          "text": "Cluster Availability Partition",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q852",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is horizontal scaling vs vertical scaling?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3405",
          "text": "Horizontal: add more machines; Vertical: increase machine capacity",
          "isCorrect": true
        },
        {
          "id": "java-c3406",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3407",
          "text": "Horizontal is always better",
          "isCorrect": false
        },
        {
          "id": "java-c3408",
          "text": "Vertical adds machines",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q853",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database sharding?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3409",
          "text": "Horizontal partitioning of data across multiple databases",
          "isCorrect": true
        },
        {
          "id": "java-c3410",
          "text": "Database replication",
          "isCorrect": false
        },
        {
          "id": "java-c3411",
          "text": "Vertical partitioning",
          "isCorrect": false
        },
        {
          "id": "java-c3412",
          "text": "Backup strategy",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q854",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database replication?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3413",
          "text": "Copying data from master to replica databases",
          "isCorrect": true
        },
        {
          "id": "java-c3414",
          "text": "Data sharding",
          "isCorrect": false
        },
        {
          "id": "java-c3415",
          "text": "Database backup",
          "isCorrect": false
        },
        {
          "id": "java-c3416",
          "text": "Schema migration",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q855",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CDN?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3417",
          "text": "Content Delivery Network distributes static content globally",
          "isCorrect": true
        },
        {
          "id": "java-c3418",
          "text": "Content Download Network",
          "isCorrect": false
        },
        {
          "id": "java-c3419",
          "text": "Cloud Distribution Network",
          "isCorrect": false
        },
        {
          "id": "java-c3420",
          "text": "Central Data Network",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q856",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a load balancer?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3421",
          "text": "Distributes incoming traffic across multiple servers",
          "isCorrect": true
        },
        {
          "id": "java-c3422",
          "text": "Database optimizer",
          "isCorrect": false
        },
        {
          "id": "java-c3423",
          "text": "Cache manager",
          "isCorrect": false
        },
        {
          "id": "java-c3424",
          "text": "Security filter",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q857",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Redis used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3425",
          "text": "In-memory data store for caching, pub/sub, sessions",
          "isCorrect": true
        },
        {
          "id": "java-c3426",
          "text": "Database only",
          "isCorrect": false
        },
        {
          "id": "java-c3427",
          "text": "Message queue only",
          "isCorrect": false
        },
        {
          "id": "java-c3428",
          "text": "File storage",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q858",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a message queue?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3429",
          "text": "Asynchronous communication between services via queue",
          "isCorrect": true
        },
        {
          "id": "java-c3430",
          "text": "Database queue",
          "isCorrect": false
        },
        {
          "id": "java-c3431",
          "text": "Priority queue",
          "isCorrect": false
        },
        {
          "id": "java-c3432",
          "text": "Stack structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q859",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is idempotency?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3433",
          "text": "Operation produces same result regardless of repetition",
          "isCorrect": true
        },
        {
          "id": "java-c3434",
          "text": "Unique operation",
          "isCorrect": false
        },
        {
          "id": "java-c3435",
          "text": "One-time operation",
          "isCorrect": false
        },
        {
          "id": "java-c3436",
          "text": "Atomic operation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q860",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is rate limiting?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3437",
          "text": "Controls request rate to prevent abuse and overload",
          "isCorrect": true
        },
        {
          "id": "java-c3438",
          "text": "Speed limiting",
          "isCorrect": false
        },
        {
          "id": "java-c3439",
          "text": "Size limiting",
          "isCorrect": false
        },
        {
          "id": "java-c3440",
          "text": "Time limiting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q861",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the CAP theorem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3441",
          "text": "Can have 2 of 3: Consistency, Availability, Partition tolerance",
          "isCorrect": true
        },
        {
          "id": "java-c3442",
          "text": "Cache Access Protocol",
          "isCorrect": false
        },
        {
          "id": "java-c3443",
          "text": "Concurrent Application Programming",
          "isCorrect": false
        },
        {
          "id": "java-c3444",
          "text": "Cluster Availability Partition",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q862",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is horizontal scaling vs vertical scaling?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3445",
          "text": "Horizontal: add more machines; Vertical: increase machine capacity",
          "isCorrect": true
        },
        {
          "id": "java-c3446",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3447",
          "text": "Horizontal is always better",
          "isCorrect": false
        },
        {
          "id": "java-c3448",
          "text": "Vertical adds machines",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q863",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database sharding?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3449",
          "text": "Horizontal partitioning of data across multiple databases",
          "isCorrect": true
        },
        {
          "id": "java-c3450",
          "text": "Database replication",
          "isCorrect": false
        },
        {
          "id": "java-c3451",
          "text": "Vertical partitioning",
          "isCorrect": false
        },
        {
          "id": "java-c3452",
          "text": "Backup strategy",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q864",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database replication?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3453",
          "text": "Copying data from master to replica databases",
          "isCorrect": true
        },
        {
          "id": "java-c3454",
          "text": "Data sharding",
          "isCorrect": false
        },
        {
          "id": "java-c3455",
          "text": "Database backup",
          "isCorrect": false
        },
        {
          "id": "java-c3456",
          "text": "Schema migration",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q865",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CDN?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3457",
          "text": "Content Delivery Network distributes static content globally",
          "isCorrect": true
        },
        {
          "id": "java-c3458",
          "text": "Content Download Network",
          "isCorrect": false
        },
        {
          "id": "java-c3459",
          "text": "Cloud Distribution Network",
          "isCorrect": false
        },
        {
          "id": "java-c3460",
          "text": "Central Data Network",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q866",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a load balancer?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3461",
          "text": "Distributes incoming traffic across multiple servers",
          "isCorrect": true
        },
        {
          "id": "java-c3462",
          "text": "Database optimizer",
          "isCorrect": false
        },
        {
          "id": "java-c3463",
          "text": "Cache manager",
          "isCorrect": false
        },
        {
          "id": "java-c3464",
          "text": "Security filter",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q867",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Redis used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3465",
          "text": "In-memory data store for caching, pub/sub, sessions",
          "isCorrect": true
        },
        {
          "id": "java-c3466",
          "text": "Database only",
          "isCorrect": false
        },
        {
          "id": "java-c3467",
          "text": "Message queue only",
          "isCorrect": false
        },
        {
          "id": "java-c3468",
          "text": "File storage",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q868",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a message queue?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3469",
          "text": "Asynchronous communication between services via queue",
          "isCorrect": true
        },
        {
          "id": "java-c3470",
          "text": "Database queue",
          "isCorrect": false
        },
        {
          "id": "java-c3471",
          "text": "Priority queue",
          "isCorrect": false
        },
        {
          "id": "java-c3472",
          "text": "Stack structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q869",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is idempotency?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3473",
          "text": "Operation produces same result regardless of repetition",
          "isCorrect": true
        },
        {
          "id": "java-c3474",
          "text": "Unique operation",
          "isCorrect": false
        },
        {
          "id": "java-c3475",
          "text": "One-time operation",
          "isCorrect": false
        },
        {
          "id": "java-c3476",
          "text": "Atomic operation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q870",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is rate limiting?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3477",
          "text": "Controls request rate to prevent abuse and overload",
          "isCorrect": true
        },
        {
          "id": "java-c3478",
          "text": "Speed limiting",
          "isCorrect": false
        },
        {
          "id": "java-c3479",
          "text": "Size limiting",
          "isCorrect": false
        },
        {
          "id": "java-c3480",
          "text": "Time limiting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q871",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the CAP theorem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3481",
          "text": "Can have 2 of 3: Consistency, Availability, Partition tolerance",
          "isCorrect": true
        },
        {
          "id": "java-c3482",
          "text": "Cache Access Protocol",
          "isCorrect": false
        },
        {
          "id": "java-c3483",
          "text": "Concurrent Application Programming",
          "isCorrect": false
        },
        {
          "id": "java-c3484",
          "text": "Cluster Availability Partition",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q872",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is horizontal scaling vs vertical scaling?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3485",
          "text": "Horizontal: add more machines; Vertical: increase machine capacity",
          "isCorrect": true
        },
        {
          "id": "java-c3486",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3487",
          "text": "Horizontal is always better",
          "isCorrect": false
        },
        {
          "id": "java-c3488",
          "text": "Vertical adds machines",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q873",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database sharding?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3489",
          "text": "Horizontal partitioning of data across multiple databases",
          "isCorrect": true
        },
        {
          "id": "java-c3490",
          "text": "Database replication",
          "isCorrect": false
        },
        {
          "id": "java-c3491",
          "text": "Vertical partitioning",
          "isCorrect": false
        },
        {
          "id": "java-c3492",
          "text": "Backup strategy",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q874",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database replication?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3493",
          "text": "Copying data from master to replica databases",
          "isCorrect": true
        },
        {
          "id": "java-c3494",
          "text": "Data sharding",
          "isCorrect": false
        },
        {
          "id": "java-c3495",
          "text": "Database backup",
          "isCorrect": false
        },
        {
          "id": "java-c3496",
          "text": "Schema migration",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q875",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CDN?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3497",
          "text": "Content Delivery Network distributes static content globally",
          "isCorrect": true
        },
        {
          "id": "java-c3498",
          "text": "Content Download Network",
          "isCorrect": false
        },
        {
          "id": "java-c3499",
          "text": "Cloud Distribution Network",
          "isCorrect": false
        },
        {
          "id": "java-c3500",
          "text": "Central Data Network",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q876",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a load balancer?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3501",
          "text": "Distributes incoming traffic across multiple servers",
          "isCorrect": true
        },
        {
          "id": "java-c3502",
          "text": "Database optimizer",
          "isCorrect": false
        },
        {
          "id": "java-c3503",
          "text": "Cache manager",
          "isCorrect": false
        },
        {
          "id": "java-c3504",
          "text": "Security filter",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q877",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Redis used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3505",
          "text": "In-memory data store for caching, pub/sub, sessions",
          "isCorrect": true
        },
        {
          "id": "java-c3506",
          "text": "Database only",
          "isCorrect": false
        },
        {
          "id": "java-c3507",
          "text": "Message queue only",
          "isCorrect": false
        },
        {
          "id": "java-c3508",
          "text": "File storage",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q878",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a message queue?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3509",
          "text": "Asynchronous communication between services via queue",
          "isCorrect": true
        },
        {
          "id": "java-c3510",
          "text": "Database queue",
          "isCorrect": false
        },
        {
          "id": "java-c3511",
          "text": "Priority queue",
          "isCorrect": false
        },
        {
          "id": "java-c3512",
          "text": "Stack structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q879",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is idempotency?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3513",
          "text": "Operation produces same result regardless of repetition",
          "isCorrect": true
        },
        {
          "id": "java-c3514",
          "text": "Unique operation",
          "isCorrect": false
        },
        {
          "id": "java-c3515",
          "text": "One-time operation",
          "isCorrect": false
        },
        {
          "id": "java-c3516",
          "text": "Atomic operation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q880",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is rate limiting?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3517",
          "text": "Controls request rate to prevent abuse and overload",
          "isCorrect": true
        },
        {
          "id": "java-c3518",
          "text": "Speed limiting",
          "isCorrect": false
        },
        {
          "id": "java-c3519",
          "text": "Size limiting",
          "isCorrect": false
        },
        {
          "id": "java-c3520",
          "text": "Time limiting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q881",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the CAP theorem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3521",
          "text": "Can have 2 of 3: Consistency, Availability, Partition tolerance",
          "isCorrect": true
        },
        {
          "id": "java-c3522",
          "text": "Cache Access Protocol",
          "isCorrect": false
        },
        {
          "id": "java-c3523",
          "text": "Concurrent Application Programming",
          "isCorrect": false
        },
        {
          "id": "java-c3524",
          "text": "Cluster Availability Partition",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q882",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is horizontal scaling vs vertical scaling?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3525",
          "text": "Horizontal: add more machines; Vertical: increase machine capacity",
          "isCorrect": true
        },
        {
          "id": "java-c3526",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3527",
          "text": "Horizontal is always better",
          "isCorrect": false
        },
        {
          "id": "java-c3528",
          "text": "Vertical adds machines",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q883",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database sharding?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3529",
          "text": "Horizontal partitioning of data across multiple databases",
          "isCorrect": true
        },
        {
          "id": "java-c3530",
          "text": "Database replication",
          "isCorrect": false
        },
        {
          "id": "java-c3531",
          "text": "Vertical partitioning",
          "isCorrect": false
        },
        {
          "id": "java-c3532",
          "text": "Backup strategy",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q884",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database replication?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3533",
          "text": "Copying data from master to replica databases",
          "isCorrect": true
        },
        {
          "id": "java-c3534",
          "text": "Data sharding",
          "isCorrect": false
        },
        {
          "id": "java-c3535",
          "text": "Database backup",
          "isCorrect": false
        },
        {
          "id": "java-c3536",
          "text": "Schema migration",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q885",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CDN?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3537",
          "text": "Content Delivery Network distributes static content globally",
          "isCorrect": true
        },
        {
          "id": "java-c3538",
          "text": "Content Download Network",
          "isCorrect": false
        },
        {
          "id": "java-c3539",
          "text": "Cloud Distribution Network",
          "isCorrect": false
        },
        {
          "id": "java-c3540",
          "text": "Central Data Network",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q886",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a load balancer?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3541",
          "text": "Distributes incoming traffic across multiple servers",
          "isCorrect": true
        },
        {
          "id": "java-c3542",
          "text": "Database optimizer",
          "isCorrect": false
        },
        {
          "id": "java-c3543",
          "text": "Cache manager",
          "isCorrect": false
        },
        {
          "id": "java-c3544",
          "text": "Security filter",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q887",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Redis used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3545",
          "text": "In-memory data store for caching, pub/sub, sessions",
          "isCorrect": true
        },
        {
          "id": "java-c3546",
          "text": "Database only",
          "isCorrect": false
        },
        {
          "id": "java-c3547",
          "text": "Message queue only",
          "isCorrect": false
        },
        {
          "id": "java-c3548",
          "text": "File storage",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q888",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a message queue?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3549",
          "text": "Asynchronous communication between services via queue",
          "isCorrect": true
        },
        {
          "id": "java-c3550",
          "text": "Database queue",
          "isCorrect": false
        },
        {
          "id": "java-c3551",
          "text": "Priority queue",
          "isCorrect": false
        },
        {
          "id": "java-c3552",
          "text": "Stack structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q889",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is idempotency?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3553",
          "text": "Operation produces same result regardless of repetition",
          "isCorrect": true
        },
        {
          "id": "java-c3554",
          "text": "Unique operation",
          "isCorrect": false
        },
        {
          "id": "java-c3555",
          "text": "One-time operation",
          "isCorrect": false
        },
        {
          "id": "java-c3556",
          "text": "Atomic operation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q890",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is rate limiting?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3557",
          "text": "Controls request rate to prevent abuse and overload",
          "isCorrect": true
        },
        {
          "id": "java-c3558",
          "text": "Speed limiting",
          "isCorrect": false
        },
        {
          "id": "java-c3559",
          "text": "Size limiting",
          "isCorrect": false
        },
        {
          "id": "java-c3560",
          "text": "Time limiting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q891",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the CAP theorem?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3561",
          "text": "Can have 2 of 3: Consistency, Availability, Partition tolerance",
          "isCorrect": true
        },
        {
          "id": "java-c3562",
          "text": "Cache Access Protocol",
          "isCorrect": false
        },
        {
          "id": "java-c3563",
          "text": "Concurrent Application Programming",
          "isCorrect": false
        },
        {
          "id": "java-c3564",
          "text": "Cluster Availability Partition",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q892",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is horizontal scaling vs vertical scaling?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3565",
          "text": "Horizontal: add more machines; Vertical: increase machine capacity",
          "isCorrect": true
        },
        {
          "id": "java-c3566",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3567",
          "text": "Horizontal is always better",
          "isCorrect": false
        },
        {
          "id": "java-c3568",
          "text": "Vertical adds machines",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q893",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database sharding?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3569",
          "text": "Horizontal partitioning of data across multiple databases",
          "isCorrect": true
        },
        {
          "id": "java-c3570",
          "text": "Database replication",
          "isCorrect": false
        },
        {
          "id": "java-c3571",
          "text": "Vertical partitioning",
          "isCorrect": false
        },
        {
          "id": "java-c3572",
          "text": "Backup strategy",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q894",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database replication?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3573",
          "text": "Copying data from master to replica databases",
          "isCorrect": true
        },
        {
          "id": "java-c3574",
          "text": "Data sharding",
          "isCorrect": false
        },
        {
          "id": "java-c3575",
          "text": "Database backup",
          "isCorrect": false
        },
        {
          "id": "java-c3576",
          "text": "Schema migration",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q895",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a CDN?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3577",
          "text": "Content Delivery Network distributes static content globally",
          "isCorrect": true
        },
        {
          "id": "java-c3578",
          "text": "Content Download Network",
          "isCorrect": false
        },
        {
          "id": "java-c3579",
          "text": "Cloud Distribution Network",
          "isCorrect": false
        },
        {
          "id": "java-c3580",
          "text": "Central Data Network",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q896",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a load balancer?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3581",
          "text": "Distributes incoming traffic across multiple servers",
          "isCorrect": true
        },
        {
          "id": "java-c3582",
          "text": "Database optimizer",
          "isCorrect": false
        },
        {
          "id": "java-c3583",
          "text": "Cache manager",
          "isCorrect": false
        },
        {
          "id": "java-c3584",
          "text": "Security filter",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q897",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is Redis used for?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3585",
          "text": "In-memory data store for caching, pub/sub, sessions",
          "isCorrect": true
        },
        {
          "id": "java-c3586",
          "text": "Database only",
          "isCorrect": false
        },
        {
          "id": "java-c3587",
          "text": "Message queue only",
          "isCorrect": false
        },
        {
          "id": "java-c3588",
          "text": "File storage",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q898",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a message queue?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3589",
          "text": "Asynchronous communication between services via queue",
          "isCorrect": true
        },
        {
          "id": "java-c3590",
          "text": "Database queue",
          "isCorrect": false
        },
        {
          "id": "java-c3591",
          "text": "Priority queue",
          "isCorrect": false
        },
        {
          "id": "java-c3592",
          "text": "Stack structure",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q899",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is idempotency?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3593",
          "text": "Operation produces same result regardless of repetition",
          "isCorrect": true
        },
        {
          "id": "java-c3594",
          "text": "Unique operation",
          "isCorrect": false
        },
        {
          "id": "java-c3595",
          "text": "One-time operation",
          "isCorrect": false
        },
        {
          "id": "java-c3596",
          "text": "Atomic operation",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q900",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is rate limiting?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3597",
          "text": "Controls request rate to prevent abuse and overload",
          "isCorrect": true
        },
        {
          "id": "java-c3598",
          "text": "Speed limiting",
          "isCorrect": false
        },
        {
          "id": "java-c3599",
          "text": "Size limiting",
          "isCorrect": false
        },
        {
          "id": "java-c3600",
          "text": "Time limiting",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q901",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database normalization?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3601",
          "text": "Process of organizing data to reduce redundancy",
          "isCorrect": true
        },
        {
          "id": "java-c3602",
          "text": "Performance optimization",
          "isCorrect": false
        },
        {
          "id": "java-c3603",
          "text": "Backup process",
          "isCorrect": false
        },
        {
          "id": "java-c3604",
          "text": "Query optimization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q902",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between UNION and UNION ALL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3605",
          "text": "UNION removes duplicates, UNION ALL keeps all rows",
          "isCorrect": true
        },
        {
          "id": "java-c3606",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3607",
          "text": "UNION is faster",
          "isCorrect": false
        },
        {
          "id": "java-c3608",
          "text": "UNION ALL sorts results",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q903",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are ACID properties?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3609",
          "text": "Atomicity",
          "isCorrect": true
        },
        {
          "id": "java-c3610",
          "text": "Consistency",
          "isCorrect": true
        },
        {
          "id": "java-c3611",
          "text": "Isolation",
          "isCorrect": true
        },
        {
          "id": "java-c3612",
          "text": "Durability",
          "isCorrect": true
        }
      ]
    },
    {
      "id": "java-q904",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a database index?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3613",
          "text": "Data structure improving query speed at cost of write performance",
          "isCorrect": true
        },
        {
          "id": "java-c3614",
          "text": "Table column",
          "isCorrect": false
        },
        {
          "id": "java-c3615",
          "text": "Primary key",
          "isCorrect": false
        },
        {
          "id": "java-c3616",
          "text": "Foreign key",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q905",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between clustered and non-clustered index?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3617",
          "text": "Clustered determines physical order; non-clustered is separate structure",
          "isCorrect": true
        },
        {
          "id": "java-c3618",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3619",
          "text": "Clustered is faster always",
          "isCorrect": false
        },
        {
          "id": "java-c3620",
          "text": "Non-clustered orders data",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q906",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database deadlock?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3621",
          "text": "Two+ transactions waiting for each other to release locks",
          "isCorrect": true
        },
        {
          "id": "java-c3622",
          "text": "Database crash",
          "isCorrect": false
        },
        {
          "id": "java-c3623",
          "text": "Lock timeout",
          "isCorrect": false
        },
        {
          "id": "java-c3624",
          "text": "Connection pool exhaustion",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q907",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is SQL injection?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3625",
          "text": "Security vulnerability allowing malicious SQL execution",
          "isCorrect": true
        },
        {
          "id": "java-c3626",
          "text": "SQL performance issue",
          "isCorrect": false
        },
        {
          "id": "java-c3627",
          "text": "Database error",
          "isCorrect": false
        },
        {
          "id": "java-c3628",
          "text": "Query optimization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q908",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is eventual consistency in NoSQL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3629",
          "text": "Data becomes consistent across nodes over time",
          "isCorrect": true
        },
        {
          "id": "java-c3630",
          "text": "Immediate consistency",
          "isCorrect": false
        },
        {
          "id": "java-c3631",
          "text": "No consistency guarantee",
          "isCorrect": false
        },
        {
          "id": "java-c3632",
          "text": "Strong consistency",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q909",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between SQL and NoSQL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3633",
          "text": "SQL: relational, structured schema; NoSQL: flexible schema, various models",
          "isCorrect": true
        },
        {
          "id": "java-c3634",
          "text": "NoSQL is always faster",
          "isCorrect": false
        },
        {
          "id": "java-c3635",
          "text": "SQL is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c3636",
          "text": "No significant difference",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q910",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database connection pooling?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3637",
          "text": "Reuses database connections to avoid overhead of creating new ones",
          "isCorrect": true
        },
        {
          "id": "java-c3638",
          "text": "Connection backup",
          "isCorrect": false
        },
        {
          "id": "java-c3639",
          "text": "Connection security",
          "isCorrect": false
        },
        {
          "id": "java-c3640",
          "text": "Connection monitoring",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q911",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database normalization?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3641",
          "text": "Process of organizing data to reduce redundancy",
          "isCorrect": true
        },
        {
          "id": "java-c3642",
          "text": "Performance optimization",
          "isCorrect": false
        },
        {
          "id": "java-c3643",
          "text": "Backup process",
          "isCorrect": false
        },
        {
          "id": "java-c3644",
          "text": "Query optimization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q912",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between UNION and UNION ALL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3645",
          "text": "UNION removes duplicates, UNION ALL keeps all rows",
          "isCorrect": true
        },
        {
          "id": "java-c3646",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3647",
          "text": "UNION is faster",
          "isCorrect": false
        },
        {
          "id": "java-c3648",
          "text": "UNION ALL sorts results",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q913",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are ACID properties?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3649",
          "text": "Atomicity",
          "isCorrect": true
        },
        {
          "id": "java-c3650",
          "text": "Consistency",
          "isCorrect": true
        },
        {
          "id": "java-c3651",
          "text": "Isolation",
          "isCorrect": true
        },
        {
          "id": "java-c3652",
          "text": "Durability",
          "isCorrect": true
        }
      ]
    },
    {
      "id": "java-q914",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a database index?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3653",
          "text": "Data structure improving query speed at cost of write performance",
          "isCorrect": true
        },
        {
          "id": "java-c3654",
          "text": "Table column",
          "isCorrect": false
        },
        {
          "id": "java-c3655",
          "text": "Primary key",
          "isCorrect": false
        },
        {
          "id": "java-c3656",
          "text": "Foreign key",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q915",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between clustered and non-clustered index?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3657",
          "text": "Clustered determines physical order; non-clustered is separate structure",
          "isCorrect": true
        },
        {
          "id": "java-c3658",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3659",
          "text": "Clustered is faster always",
          "isCorrect": false
        },
        {
          "id": "java-c3660",
          "text": "Non-clustered orders data",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q916",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database deadlock?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3661",
          "text": "Two+ transactions waiting for each other to release locks",
          "isCorrect": true
        },
        {
          "id": "java-c3662",
          "text": "Database crash",
          "isCorrect": false
        },
        {
          "id": "java-c3663",
          "text": "Lock timeout",
          "isCorrect": false
        },
        {
          "id": "java-c3664",
          "text": "Connection pool exhaustion",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q917",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is SQL injection?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3665",
          "text": "Security vulnerability allowing malicious SQL execution",
          "isCorrect": true
        },
        {
          "id": "java-c3666",
          "text": "SQL performance issue",
          "isCorrect": false
        },
        {
          "id": "java-c3667",
          "text": "Database error",
          "isCorrect": false
        },
        {
          "id": "java-c3668",
          "text": "Query optimization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q918",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is eventual consistency in NoSQL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3669",
          "text": "Data becomes consistent across nodes over time",
          "isCorrect": true
        },
        {
          "id": "java-c3670",
          "text": "Immediate consistency",
          "isCorrect": false
        },
        {
          "id": "java-c3671",
          "text": "No consistency guarantee",
          "isCorrect": false
        },
        {
          "id": "java-c3672",
          "text": "Strong consistency",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q919",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between SQL and NoSQL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3673",
          "text": "SQL: relational, structured schema; NoSQL: flexible schema, various models",
          "isCorrect": true
        },
        {
          "id": "java-c3674",
          "text": "NoSQL is always faster",
          "isCorrect": false
        },
        {
          "id": "java-c3675",
          "text": "SQL is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c3676",
          "text": "No significant difference",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q920",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database connection pooling?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3677",
          "text": "Reuses database connections to avoid overhead of creating new ones",
          "isCorrect": true
        },
        {
          "id": "java-c3678",
          "text": "Connection backup",
          "isCorrect": false
        },
        {
          "id": "java-c3679",
          "text": "Connection security",
          "isCorrect": false
        },
        {
          "id": "java-c3680",
          "text": "Connection monitoring",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q921",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database normalization?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3681",
          "text": "Process of organizing data to reduce redundancy",
          "isCorrect": true
        },
        {
          "id": "java-c3682",
          "text": "Performance optimization",
          "isCorrect": false
        },
        {
          "id": "java-c3683",
          "text": "Backup process",
          "isCorrect": false
        },
        {
          "id": "java-c3684",
          "text": "Query optimization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q922",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between UNION and UNION ALL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3685",
          "text": "UNION removes duplicates, UNION ALL keeps all rows",
          "isCorrect": true
        },
        {
          "id": "java-c3686",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3687",
          "text": "UNION is faster",
          "isCorrect": false
        },
        {
          "id": "java-c3688",
          "text": "UNION ALL sorts results",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q923",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are ACID properties?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3689",
          "text": "Atomicity",
          "isCorrect": true
        },
        {
          "id": "java-c3690",
          "text": "Consistency",
          "isCorrect": true
        },
        {
          "id": "java-c3691",
          "text": "Isolation",
          "isCorrect": true
        },
        {
          "id": "java-c3692",
          "text": "Durability",
          "isCorrect": true
        }
      ]
    },
    {
      "id": "java-q924",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a database index?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3693",
          "text": "Data structure improving query speed at cost of write performance",
          "isCorrect": true
        },
        {
          "id": "java-c3694",
          "text": "Table column",
          "isCorrect": false
        },
        {
          "id": "java-c3695",
          "text": "Primary key",
          "isCorrect": false
        },
        {
          "id": "java-c3696",
          "text": "Foreign key",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q925",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between clustered and non-clustered index?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3697",
          "text": "Clustered determines physical order; non-clustered is separate structure",
          "isCorrect": true
        },
        {
          "id": "java-c3698",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3699",
          "text": "Clustered is faster always",
          "isCorrect": false
        },
        {
          "id": "java-c3700",
          "text": "Non-clustered orders data",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q926",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database deadlock?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3701",
          "text": "Two+ transactions waiting for each other to release locks",
          "isCorrect": true
        },
        {
          "id": "java-c3702",
          "text": "Database crash",
          "isCorrect": false
        },
        {
          "id": "java-c3703",
          "text": "Lock timeout",
          "isCorrect": false
        },
        {
          "id": "java-c3704",
          "text": "Connection pool exhaustion",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q927",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is SQL injection?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3705",
          "text": "Security vulnerability allowing malicious SQL execution",
          "isCorrect": true
        },
        {
          "id": "java-c3706",
          "text": "SQL performance issue",
          "isCorrect": false
        },
        {
          "id": "java-c3707",
          "text": "Database error",
          "isCorrect": false
        },
        {
          "id": "java-c3708",
          "text": "Query optimization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q928",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is eventual consistency in NoSQL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3709",
          "text": "Data becomes consistent across nodes over time",
          "isCorrect": true
        },
        {
          "id": "java-c3710",
          "text": "Immediate consistency",
          "isCorrect": false
        },
        {
          "id": "java-c3711",
          "text": "No consistency guarantee",
          "isCorrect": false
        },
        {
          "id": "java-c3712",
          "text": "Strong consistency",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q929",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between SQL and NoSQL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3713",
          "text": "SQL: relational, structured schema; NoSQL: flexible schema, various models",
          "isCorrect": true
        },
        {
          "id": "java-c3714",
          "text": "NoSQL is always faster",
          "isCorrect": false
        },
        {
          "id": "java-c3715",
          "text": "SQL is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c3716",
          "text": "No significant difference",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q930",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database connection pooling?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3717",
          "text": "Reuses database connections to avoid overhead of creating new ones",
          "isCorrect": true
        },
        {
          "id": "java-c3718",
          "text": "Connection backup",
          "isCorrect": false
        },
        {
          "id": "java-c3719",
          "text": "Connection security",
          "isCorrect": false
        },
        {
          "id": "java-c3720",
          "text": "Connection monitoring",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q931",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database normalization?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3721",
          "text": "Process of organizing data to reduce redundancy",
          "isCorrect": true
        },
        {
          "id": "java-c3722",
          "text": "Performance optimization",
          "isCorrect": false
        },
        {
          "id": "java-c3723",
          "text": "Backup process",
          "isCorrect": false
        },
        {
          "id": "java-c3724",
          "text": "Query optimization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q932",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between UNION and UNION ALL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3725",
          "text": "UNION removes duplicates, UNION ALL keeps all rows",
          "isCorrect": true
        },
        {
          "id": "java-c3726",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3727",
          "text": "UNION is faster",
          "isCorrect": false
        },
        {
          "id": "java-c3728",
          "text": "UNION ALL sorts results",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q933",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are ACID properties?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3729",
          "text": "Atomicity",
          "isCorrect": true
        },
        {
          "id": "java-c3730",
          "text": "Consistency",
          "isCorrect": true
        },
        {
          "id": "java-c3731",
          "text": "Isolation",
          "isCorrect": true
        },
        {
          "id": "java-c3732",
          "text": "Durability",
          "isCorrect": true
        }
      ]
    },
    {
      "id": "java-q934",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a database index?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3733",
          "text": "Data structure improving query speed at cost of write performance",
          "isCorrect": true
        },
        {
          "id": "java-c3734",
          "text": "Table column",
          "isCorrect": false
        },
        {
          "id": "java-c3735",
          "text": "Primary key",
          "isCorrect": false
        },
        {
          "id": "java-c3736",
          "text": "Foreign key",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q935",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between clustered and non-clustered index?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3737",
          "text": "Clustered determines physical order; non-clustered is separate structure",
          "isCorrect": true
        },
        {
          "id": "java-c3738",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3739",
          "text": "Clustered is faster always",
          "isCorrect": false
        },
        {
          "id": "java-c3740",
          "text": "Non-clustered orders data",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q936",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database deadlock?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3741",
          "text": "Two+ transactions waiting for each other to release locks",
          "isCorrect": true
        },
        {
          "id": "java-c3742",
          "text": "Database crash",
          "isCorrect": false
        },
        {
          "id": "java-c3743",
          "text": "Lock timeout",
          "isCorrect": false
        },
        {
          "id": "java-c3744",
          "text": "Connection pool exhaustion",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q937",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is SQL injection?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3745",
          "text": "Security vulnerability allowing malicious SQL execution",
          "isCorrect": true
        },
        {
          "id": "java-c3746",
          "text": "SQL performance issue",
          "isCorrect": false
        },
        {
          "id": "java-c3747",
          "text": "Database error",
          "isCorrect": false
        },
        {
          "id": "java-c3748",
          "text": "Query optimization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q938",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is eventual consistency in NoSQL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3749",
          "text": "Data becomes consistent across nodes over time",
          "isCorrect": true
        },
        {
          "id": "java-c3750",
          "text": "Immediate consistency",
          "isCorrect": false
        },
        {
          "id": "java-c3751",
          "text": "No consistency guarantee",
          "isCorrect": false
        },
        {
          "id": "java-c3752",
          "text": "Strong consistency",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q939",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between SQL and NoSQL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3753",
          "text": "SQL: relational, structured schema; NoSQL: flexible schema, various models",
          "isCorrect": true
        },
        {
          "id": "java-c3754",
          "text": "NoSQL is always faster",
          "isCorrect": false
        },
        {
          "id": "java-c3755",
          "text": "SQL is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c3756",
          "text": "No significant difference",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q940",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database connection pooling?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3757",
          "text": "Reuses database connections to avoid overhead of creating new ones",
          "isCorrect": true
        },
        {
          "id": "java-c3758",
          "text": "Connection backup",
          "isCorrect": false
        },
        {
          "id": "java-c3759",
          "text": "Connection security",
          "isCorrect": false
        },
        {
          "id": "java-c3760",
          "text": "Connection monitoring",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q941",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database normalization?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3761",
          "text": "Process of organizing data to reduce redundancy",
          "isCorrect": true
        },
        {
          "id": "java-c3762",
          "text": "Performance optimization",
          "isCorrect": false
        },
        {
          "id": "java-c3763",
          "text": "Backup process",
          "isCorrect": false
        },
        {
          "id": "java-c3764",
          "text": "Query optimization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q942",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between UNION and UNION ALL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3765",
          "text": "UNION removes duplicates, UNION ALL keeps all rows",
          "isCorrect": true
        },
        {
          "id": "java-c3766",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3767",
          "text": "UNION is faster",
          "isCorrect": false
        },
        {
          "id": "java-c3768",
          "text": "UNION ALL sorts results",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q943",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are ACID properties?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3769",
          "text": "Atomicity",
          "isCorrect": true
        },
        {
          "id": "java-c3770",
          "text": "Consistency",
          "isCorrect": true
        },
        {
          "id": "java-c3771",
          "text": "Isolation",
          "isCorrect": true
        },
        {
          "id": "java-c3772",
          "text": "Durability",
          "isCorrect": true
        }
      ]
    },
    {
      "id": "java-q944",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a database index?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3773",
          "text": "Data structure improving query speed at cost of write performance",
          "isCorrect": true
        },
        {
          "id": "java-c3774",
          "text": "Table column",
          "isCorrect": false
        },
        {
          "id": "java-c3775",
          "text": "Primary key",
          "isCorrect": false
        },
        {
          "id": "java-c3776",
          "text": "Foreign key",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q945",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between clustered and non-clustered index?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3777",
          "text": "Clustered determines physical order; non-clustered is separate structure",
          "isCorrect": true
        },
        {
          "id": "java-c3778",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3779",
          "text": "Clustered is faster always",
          "isCorrect": false
        },
        {
          "id": "java-c3780",
          "text": "Non-clustered orders data",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q946",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database deadlock?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3781",
          "text": "Two+ transactions waiting for each other to release locks",
          "isCorrect": true
        },
        {
          "id": "java-c3782",
          "text": "Database crash",
          "isCorrect": false
        },
        {
          "id": "java-c3783",
          "text": "Lock timeout",
          "isCorrect": false
        },
        {
          "id": "java-c3784",
          "text": "Connection pool exhaustion",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q947",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is SQL injection?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3785",
          "text": "Security vulnerability allowing malicious SQL execution",
          "isCorrect": true
        },
        {
          "id": "java-c3786",
          "text": "SQL performance issue",
          "isCorrect": false
        },
        {
          "id": "java-c3787",
          "text": "Database error",
          "isCorrect": false
        },
        {
          "id": "java-c3788",
          "text": "Query optimization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q948",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is eventual consistency in NoSQL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3789",
          "text": "Data becomes consistent across nodes over time",
          "isCorrect": true
        },
        {
          "id": "java-c3790",
          "text": "Immediate consistency",
          "isCorrect": false
        },
        {
          "id": "java-c3791",
          "text": "No consistency guarantee",
          "isCorrect": false
        },
        {
          "id": "java-c3792",
          "text": "Strong consistency",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q949",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between SQL and NoSQL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3793",
          "text": "SQL: relational, structured schema; NoSQL: flexible schema, various models",
          "isCorrect": true
        },
        {
          "id": "java-c3794",
          "text": "NoSQL is always faster",
          "isCorrect": false
        },
        {
          "id": "java-c3795",
          "text": "SQL is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c3796",
          "text": "No significant difference",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q950",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database connection pooling?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3797",
          "text": "Reuses database connections to avoid overhead of creating new ones",
          "isCorrect": true
        },
        {
          "id": "java-c3798",
          "text": "Connection backup",
          "isCorrect": false
        },
        {
          "id": "java-c3799",
          "text": "Connection security",
          "isCorrect": false
        },
        {
          "id": "java-c3800",
          "text": "Connection monitoring",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q951",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database normalization?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3801",
          "text": "Process of organizing data to reduce redundancy",
          "isCorrect": true
        },
        {
          "id": "java-c3802",
          "text": "Performance optimization",
          "isCorrect": false
        },
        {
          "id": "java-c3803",
          "text": "Backup process",
          "isCorrect": false
        },
        {
          "id": "java-c3804",
          "text": "Query optimization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q952",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between UNION and UNION ALL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3805",
          "text": "UNION removes duplicates, UNION ALL keeps all rows",
          "isCorrect": true
        },
        {
          "id": "java-c3806",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3807",
          "text": "UNION is faster",
          "isCorrect": false
        },
        {
          "id": "java-c3808",
          "text": "UNION ALL sorts results",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q953",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are ACID properties?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3809",
          "text": "Atomicity",
          "isCorrect": true
        },
        {
          "id": "java-c3810",
          "text": "Consistency",
          "isCorrect": true
        },
        {
          "id": "java-c3811",
          "text": "Isolation",
          "isCorrect": true
        },
        {
          "id": "java-c3812",
          "text": "Durability",
          "isCorrect": true
        }
      ]
    },
    {
      "id": "java-q954",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a database index?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3813",
          "text": "Data structure improving query speed at cost of write performance",
          "isCorrect": true
        },
        {
          "id": "java-c3814",
          "text": "Table column",
          "isCorrect": false
        },
        {
          "id": "java-c3815",
          "text": "Primary key",
          "isCorrect": false
        },
        {
          "id": "java-c3816",
          "text": "Foreign key",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q955",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between clustered and non-clustered index?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3817",
          "text": "Clustered determines physical order; non-clustered is separate structure",
          "isCorrect": true
        },
        {
          "id": "java-c3818",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3819",
          "text": "Clustered is faster always",
          "isCorrect": false
        },
        {
          "id": "java-c3820",
          "text": "Non-clustered orders data",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q956",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database deadlock?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3821",
          "text": "Two+ transactions waiting for each other to release locks",
          "isCorrect": true
        },
        {
          "id": "java-c3822",
          "text": "Database crash",
          "isCorrect": false
        },
        {
          "id": "java-c3823",
          "text": "Lock timeout",
          "isCorrect": false
        },
        {
          "id": "java-c3824",
          "text": "Connection pool exhaustion",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q957",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is SQL injection?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3825",
          "text": "Security vulnerability allowing malicious SQL execution",
          "isCorrect": true
        },
        {
          "id": "java-c3826",
          "text": "SQL performance issue",
          "isCorrect": false
        },
        {
          "id": "java-c3827",
          "text": "Database error",
          "isCorrect": false
        },
        {
          "id": "java-c3828",
          "text": "Query optimization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q958",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is eventual consistency in NoSQL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3829",
          "text": "Data becomes consistent across nodes over time",
          "isCorrect": true
        },
        {
          "id": "java-c3830",
          "text": "Immediate consistency",
          "isCorrect": false
        },
        {
          "id": "java-c3831",
          "text": "No consistency guarantee",
          "isCorrect": false
        },
        {
          "id": "java-c3832",
          "text": "Strong consistency",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q959",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between SQL and NoSQL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3833",
          "text": "SQL: relational, structured schema; NoSQL: flexible schema, various models",
          "isCorrect": true
        },
        {
          "id": "java-c3834",
          "text": "NoSQL is always faster",
          "isCorrect": false
        },
        {
          "id": "java-c3835",
          "text": "SQL is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c3836",
          "text": "No significant difference",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q960",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database connection pooling?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3837",
          "text": "Reuses database connections to avoid overhead of creating new ones",
          "isCorrect": true
        },
        {
          "id": "java-c3838",
          "text": "Connection backup",
          "isCorrect": false
        },
        {
          "id": "java-c3839",
          "text": "Connection security",
          "isCorrect": false
        },
        {
          "id": "java-c3840",
          "text": "Connection monitoring",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q961",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database normalization?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3841",
          "text": "Process of organizing data to reduce redundancy",
          "isCorrect": true
        },
        {
          "id": "java-c3842",
          "text": "Performance optimization",
          "isCorrect": false
        },
        {
          "id": "java-c3843",
          "text": "Backup process",
          "isCorrect": false
        },
        {
          "id": "java-c3844",
          "text": "Query optimization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q962",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between UNION and UNION ALL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3845",
          "text": "UNION removes duplicates, UNION ALL keeps all rows",
          "isCorrect": true
        },
        {
          "id": "java-c3846",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3847",
          "text": "UNION is faster",
          "isCorrect": false
        },
        {
          "id": "java-c3848",
          "text": "UNION ALL sorts results",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q963",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are ACID properties?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3849",
          "text": "Atomicity",
          "isCorrect": true
        },
        {
          "id": "java-c3850",
          "text": "Consistency",
          "isCorrect": true
        },
        {
          "id": "java-c3851",
          "text": "Isolation",
          "isCorrect": true
        },
        {
          "id": "java-c3852",
          "text": "Durability",
          "isCorrect": true
        }
      ]
    },
    {
      "id": "java-q964",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a database index?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3853",
          "text": "Data structure improving query speed at cost of write performance",
          "isCorrect": true
        },
        {
          "id": "java-c3854",
          "text": "Table column",
          "isCorrect": false
        },
        {
          "id": "java-c3855",
          "text": "Primary key",
          "isCorrect": false
        },
        {
          "id": "java-c3856",
          "text": "Foreign key",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q965",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between clustered and non-clustered index?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3857",
          "text": "Clustered determines physical order; non-clustered is separate structure",
          "isCorrect": true
        },
        {
          "id": "java-c3858",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3859",
          "text": "Clustered is faster always",
          "isCorrect": false
        },
        {
          "id": "java-c3860",
          "text": "Non-clustered orders data",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q966",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database deadlock?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3861",
          "text": "Two+ transactions waiting for each other to release locks",
          "isCorrect": true
        },
        {
          "id": "java-c3862",
          "text": "Database crash",
          "isCorrect": false
        },
        {
          "id": "java-c3863",
          "text": "Lock timeout",
          "isCorrect": false
        },
        {
          "id": "java-c3864",
          "text": "Connection pool exhaustion",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q967",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is SQL injection?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3865",
          "text": "Security vulnerability allowing malicious SQL execution",
          "isCorrect": true
        },
        {
          "id": "java-c3866",
          "text": "SQL performance issue",
          "isCorrect": false
        },
        {
          "id": "java-c3867",
          "text": "Database error",
          "isCorrect": false
        },
        {
          "id": "java-c3868",
          "text": "Query optimization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q968",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is eventual consistency in NoSQL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3869",
          "text": "Data becomes consistent across nodes over time",
          "isCorrect": true
        },
        {
          "id": "java-c3870",
          "text": "Immediate consistency",
          "isCorrect": false
        },
        {
          "id": "java-c3871",
          "text": "No consistency guarantee",
          "isCorrect": false
        },
        {
          "id": "java-c3872",
          "text": "Strong consistency",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q969",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between SQL and NoSQL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3873",
          "text": "SQL: relational, structured schema; NoSQL: flexible schema, various models",
          "isCorrect": true
        },
        {
          "id": "java-c3874",
          "text": "NoSQL is always faster",
          "isCorrect": false
        },
        {
          "id": "java-c3875",
          "text": "SQL is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c3876",
          "text": "No significant difference",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q970",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database connection pooling?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3877",
          "text": "Reuses database connections to avoid overhead of creating new ones",
          "isCorrect": true
        },
        {
          "id": "java-c3878",
          "text": "Connection backup",
          "isCorrect": false
        },
        {
          "id": "java-c3879",
          "text": "Connection security",
          "isCorrect": false
        },
        {
          "id": "java-c3880",
          "text": "Connection monitoring",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q971",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database normalization?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3881",
          "text": "Process of organizing data to reduce redundancy",
          "isCorrect": true
        },
        {
          "id": "java-c3882",
          "text": "Performance optimization",
          "isCorrect": false
        },
        {
          "id": "java-c3883",
          "text": "Backup process",
          "isCorrect": false
        },
        {
          "id": "java-c3884",
          "text": "Query optimization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q972",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between UNION and UNION ALL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3885",
          "text": "UNION removes duplicates, UNION ALL keeps all rows",
          "isCorrect": true
        },
        {
          "id": "java-c3886",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3887",
          "text": "UNION is faster",
          "isCorrect": false
        },
        {
          "id": "java-c3888",
          "text": "UNION ALL sorts results",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q973",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are ACID properties?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3889",
          "text": "Atomicity",
          "isCorrect": true
        },
        {
          "id": "java-c3890",
          "text": "Consistency",
          "isCorrect": true
        },
        {
          "id": "java-c3891",
          "text": "Isolation",
          "isCorrect": true
        },
        {
          "id": "java-c3892",
          "text": "Durability",
          "isCorrect": true
        }
      ]
    },
    {
      "id": "java-q974",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a database index?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3893",
          "text": "Data structure improving query speed at cost of write performance",
          "isCorrect": true
        },
        {
          "id": "java-c3894",
          "text": "Table column",
          "isCorrect": false
        },
        {
          "id": "java-c3895",
          "text": "Primary key",
          "isCorrect": false
        },
        {
          "id": "java-c3896",
          "text": "Foreign key",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q975",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between clustered and non-clustered index?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3897",
          "text": "Clustered determines physical order; non-clustered is separate structure",
          "isCorrect": true
        },
        {
          "id": "java-c3898",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3899",
          "text": "Clustered is faster always",
          "isCorrect": false
        },
        {
          "id": "java-c3900",
          "text": "Non-clustered orders data",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q976",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database deadlock?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3901",
          "text": "Two+ transactions waiting for each other to release locks",
          "isCorrect": true
        },
        {
          "id": "java-c3902",
          "text": "Database crash",
          "isCorrect": false
        },
        {
          "id": "java-c3903",
          "text": "Lock timeout",
          "isCorrect": false
        },
        {
          "id": "java-c3904",
          "text": "Connection pool exhaustion",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q977",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is SQL injection?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3905",
          "text": "Security vulnerability allowing malicious SQL execution",
          "isCorrect": true
        },
        {
          "id": "java-c3906",
          "text": "SQL performance issue",
          "isCorrect": false
        },
        {
          "id": "java-c3907",
          "text": "Database error",
          "isCorrect": false
        },
        {
          "id": "java-c3908",
          "text": "Query optimization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q978",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is eventual consistency in NoSQL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3909",
          "text": "Data becomes consistent across nodes over time",
          "isCorrect": true
        },
        {
          "id": "java-c3910",
          "text": "Immediate consistency",
          "isCorrect": false
        },
        {
          "id": "java-c3911",
          "text": "No consistency guarantee",
          "isCorrect": false
        },
        {
          "id": "java-c3912",
          "text": "Strong consistency",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q979",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between SQL and NoSQL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3913",
          "text": "SQL: relational, structured schema; NoSQL: flexible schema, various models",
          "isCorrect": true
        },
        {
          "id": "java-c3914",
          "text": "NoSQL is always faster",
          "isCorrect": false
        },
        {
          "id": "java-c3915",
          "text": "SQL is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c3916",
          "text": "No significant difference",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q980",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database connection pooling?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3917",
          "text": "Reuses database connections to avoid overhead of creating new ones",
          "isCorrect": true
        },
        {
          "id": "java-c3918",
          "text": "Connection backup",
          "isCorrect": false
        },
        {
          "id": "java-c3919",
          "text": "Connection security",
          "isCorrect": false
        },
        {
          "id": "java-c3920",
          "text": "Connection monitoring",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q981",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database normalization?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3921",
          "text": "Process of organizing data to reduce redundancy",
          "isCorrect": true
        },
        {
          "id": "java-c3922",
          "text": "Performance optimization",
          "isCorrect": false
        },
        {
          "id": "java-c3923",
          "text": "Backup process",
          "isCorrect": false
        },
        {
          "id": "java-c3924",
          "text": "Query optimization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q982",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between UNION and UNION ALL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3925",
          "text": "UNION removes duplicates, UNION ALL keeps all rows",
          "isCorrect": true
        },
        {
          "id": "java-c3926",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3927",
          "text": "UNION is faster",
          "isCorrect": false
        },
        {
          "id": "java-c3928",
          "text": "UNION ALL sorts results",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q983",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are ACID properties?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3929",
          "text": "Atomicity",
          "isCorrect": true
        },
        {
          "id": "java-c3930",
          "text": "Consistency",
          "isCorrect": true
        },
        {
          "id": "java-c3931",
          "text": "Isolation",
          "isCorrect": true
        },
        {
          "id": "java-c3932",
          "text": "Durability",
          "isCorrect": true
        }
      ]
    },
    {
      "id": "java-q984",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a database index?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3933",
          "text": "Data structure improving query speed at cost of write performance",
          "isCorrect": true
        },
        {
          "id": "java-c3934",
          "text": "Table column",
          "isCorrect": false
        },
        {
          "id": "java-c3935",
          "text": "Primary key",
          "isCorrect": false
        },
        {
          "id": "java-c3936",
          "text": "Foreign key",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q985",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between clustered and non-clustered index?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3937",
          "text": "Clustered determines physical order; non-clustered is separate structure",
          "isCorrect": true
        },
        {
          "id": "java-c3938",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3939",
          "text": "Clustered is faster always",
          "isCorrect": false
        },
        {
          "id": "java-c3940",
          "text": "Non-clustered orders data",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q986",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database deadlock?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3941",
          "text": "Two+ transactions waiting for each other to release locks",
          "isCorrect": true
        },
        {
          "id": "java-c3942",
          "text": "Database crash",
          "isCorrect": false
        },
        {
          "id": "java-c3943",
          "text": "Lock timeout",
          "isCorrect": false
        },
        {
          "id": "java-c3944",
          "text": "Connection pool exhaustion",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q987",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is SQL injection?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3945",
          "text": "Security vulnerability allowing malicious SQL execution",
          "isCorrect": true
        },
        {
          "id": "java-c3946",
          "text": "SQL performance issue",
          "isCorrect": false
        },
        {
          "id": "java-c3947",
          "text": "Database error",
          "isCorrect": false
        },
        {
          "id": "java-c3948",
          "text": "Query optimization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q988",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is eventual consistency in NoSQL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3949",
          "text": "Data becomes consistent across nodes over time",
          "isCorrect": true
        },
        {
          "id": "java-c3950",
          "text": "Immediate consistency",
          "isCorrect": false
        },
        {
          "id": "java-c3951",
          "text": "No consistency guarantee",
          "isCorrect": false
        },
        {
          "id": "java-c3952",
          "text": "Strong consistency",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q989",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between SQL and NoSQL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3953",
          "text": "SQL: relational, structured schema; NoSQL: flexible schema, various models",
          "isCorrect": true
        },
        {
          "id": "java-c3954",
          "text": "NoSQL is always faster",
          "isCorrect": false
        },
        {
          "id": "java-c3955",
          "text": "SQL is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c3956",
          "text": "No significant difference",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q990",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database connection pooling?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3957",
          "text": "Reuses database connections to avoid overhead of creating new ones",
          "isCorrect": true
        },
        {
          "id": "java-c3958",
          "text": "Connection backup",
          "isCorrect": false
        },
        {
          "id": "java-c3959",
          "text": "Connection security",
          "isCorrect": false
        },
        {
          "id": "java-c3960",
          "text": "Connection monitoring",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q991",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database normalization?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3961",
          "text": "Process of organizing data to reduce redundancy",
          "isCorrect": true
        },
        {
          "id": "java-c3962",
          "text": "Performance optimization",
          "isCorrect": false
        },
        {
          "id": "java-c3963",
          "text": "Backup process",
          "isCorrect": false
        },
        {
          "id": "java-c3964",
          "text": "Query optimization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q992",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between UNION and UNION ALL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3965",
          "text": "UNION removes duplicates, UNION ALL keeps all rows",
          "isCorrect": true
        },
        {
          "id": "java-c3966",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3967",
          "text": "UNION is faster",
          "isCorrect": false
        },
        {
          "id": "java-c3968",
          "text": "UNION ALL sorts results",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q993",
      "deckId": "java-interview",
      "type": "multi-select",
      "prompt": "What are ACID properties?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3969",
          "text": "Atomicity",
          "isCorrect": true
        },
        {
          "id": "java-c3970",
          "text": "Consistency",
          "isCorrect": true
        },
        {
          "id": "java-c3971",
          "text": "Isolation",
          "isCorrect": true
        },
        {
          "id": "java-c3972",
          "text": "Durability",
          "isCorrect": true
        }
      ]
    },
    {
      "id": "java-q994",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is a database index?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3973",
          "text": "Data structure improving query speed at cost of write performance",
          "isCorrect": true
        },
        {
          "id": "java-c3974",
          "text": "Table column",
          "isCorrect": false
        },
        {
          "id": "java-c3975",
          "text": "Primary key",
          "isCorrect": false
        },
        {
          "id": "java-c3976",
          "text": "Foreign key",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q995",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between clustered and non-clustered index?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3977",
          "text": "Clustered determines physical order; non-clustered is separate structure",
          "isCorrect": true
        },
        {
          "id": "java-c3978",
          "text": "No difference",
          "isCorrect": false
        },
        {
          "id": "java-c3979",
          "text": "Clustered is faster always",
          "isCorrect": false
        },
        {
          "id": "java-c3980",
          "text": "Non-clustered orders data",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q996",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database deadlock?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3981",
          "text": "Two+ transactions waiting for each other to release locks",
          "isCorrect": true
        },
        {
          "id": "java-c3982",
          "text": "Database crash",
          "isCorrect": false
        },
        {
          "id": "java-c3983",
          "text": "Lock timeout",
          "isCorrect": false
        },
        {
          "id": "java-c3984",
          "text": "Connection pool exhaustion",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q997",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is SQL injection?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3985",
          "text": "Security vulnerability allowing malicious SQL execution",
          "isCorrect": true
        },
        {
          "id": "java-c3986",
          "text": "SQL performance issue",
          "isCorrect": false
        },
        {
          "id": "java-c3987",
          "text": "Database error",
          "isCorrect": false
        },
        {
          "id": "java-c3988",
          "text": "Query optimization",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q998",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is eventual consistency in NoSQL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3989",
          "text": "Data becomes consistent across nodes over time",
          "isCorrect": true
        },
        {
          "id": "java-c3990",
          "text": "Immediate consistency",
          "isCorrect": false
        },
        {
          "id": "java-c3991",
          "text": "No consistency guarantee",
          "isCorrect": false
        },
        {
          "id": "java-c3992",
          "text": "Strong consistency",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q999",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is the difference between SQL and NoSQL?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3993",
          "text": "SQL: relational, structured schema; NoSQL: flexible schema, various models",
          "isCorrect": true
        },
        {
          "id": "java-c3994",
          "text": "NoSQL is always faster",
          "isCorrect": false
        },
        {
          "id": "java-c3995",
          "text": "SQL is deprecated",
          "isCorrect": false
        },
        {
          "id": "java-c3996",
          "text": "No significant difference",
          "isCorrect": false
        }
      ]
    },
    {
      "id": "java-q1000",
      "deckId": "java-interview",
      "type": "mcq",
      "prompt": "What is database connection pooling?",
      "metadata": "{}",
      "choices": [
        {
          "id": "java-c3997",
          "text": "Reuses database connections to avoid overhead of creating new ones",
          "isCorrect": true
        },
        {
          "id": "java-c3998",
          "text": "Connection backup",
          "isCorrect": false
        },
        {
          "id": "java-c3999",
          "text": "Connection security",
          "isCorrect": false
        },
        {
          "id": "java-c4000",
          "text": "Connection monitoring",
          "isCorrect": false
        }
      ]
    }
  ]
}